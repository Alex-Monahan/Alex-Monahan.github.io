var Q=Object.create;var k=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,z=Object.prototype.hasOwnProperty;var v=n=>k(n,"__esModule",{value:!0});var $=(n,e)=>{v(n);for(var r in e)k(n,r,{get:e[r],enumerable:!0})},Z=(n,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of q(e))!z.call(n,t)&&t!=="default"&&k(n,t,{get:()=>e[t],enumerable:!(r=j(e,t))||r.enumerable});return n},h=n=>Z(v(k(n!=null?Q(J(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);$(exports,{AsyncDuckDB:()=>G,AsyncDuckDBConnection:()=>b,AsyncDuckDBDispatcher:()=>Y,AsyncPreparedStatement:()=>A,AsyncResultStreamIterator:()=>O,ConsoleLogger:()=>x,LogEvent:()=>p,LogLevel:()=>_,LogOrigin:()=>T,LogTopic:()=>I,StatusCode:()=>P,VoidLogger:()=>B,WorkerRequestType:()=>s,WorkerResponseType:()=>o,WorkerTask:()=>d,getJsDelivrBundles:()=>Ie,getLogEventLabel:()=>ee,getLogLevelLabel:()=>X,getLogOriginLabel:()=>te,getLogTopicLabel:()=>re,getPlatformFeatures:()=>K,selectBundle:()=>ye});var _;(function(a){a[a.NONE=0]="NONE",a[a.DEBUG=1]="DEBUG",a[a.INFO=2]="INFO",a[a.WARNING=3]="WARNING",a[a.ERROR=4]="ERROR"})(_||(_={}));var I;(function(a){a[a.NONE=0]="NONE",a[a.CONNECT=1]="CONNECT",a[a.DISCONNECT=2]="DISCONNECT",a[a.OPEN=3]="OPEN",a[a.QUERY=4]="QUERY"})(I||(I={}));var p;(function(u){u[u.NONE=0]="NONE",u[u.OK=1]="OK",u[u.ERROR=2]="ERROR",u[u.START=3]="START",u[u.RUN=4]="RUN",u[u.CAPTURE=5]="CAPTURE"})(p||(p={}));var T;(function(a){a[a.NONE=0]="NONE",a[a.WEB_WORKER=1]="WEB_WORKER",a[a.NODE_WORKER=2]="NODE_WORKER",a[a.BINDINGS=3]="BINDINGS",a[a.ASYNC_DUCKDB=4]="ASYNC_DUCKDB"})(T||(T={}));var B=class{log(e){}},x=class{log(e){console.log(e)}};function X(n){switch(n){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function ee(n){switch(n){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function re(n){switch(n){case 1:return"CONNECT";case 2:return"DISCONNECT";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function te(n){switch(n){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var P;(function(e){e[e.SUCCESS=0]="SUCCESS"})(P||(P={}));var m=h(require("apache-arrow"));var M=h(require("apache-arrow")),w=class extends M.AsyncByteQueue{flush(){let e=super.toUint8Array(!0);return this._values.length=0,e}};var b=class{constructor(e,r){this._bindings=e,this._conn=r}get bindings(){return this._bindings}async close(){return this._bindings.disconnect(this._conn)}useUnsafe(e){return e(this._bindings,this._conn)}async query(e){this._bindings.logger.log({timestamp:new Date,level:_.INFO,origin:T.ASYNC_DUCKDB,topic:I.QUERY,event:p.RUN,value:e});let r=await this._bindings.runQuery(this._conn,e),t=m.RecordBatchReader.from(r);return console.assert(t.isSync()),console.assert(t.isFile()),m.Table.from(t)}async send(e){this._bindings.logger.log({timestamp:new Date,level:_.INFO,origin:T.ASYNC_DUCKDB,topic:I.QUERY,event:p.RUN,value:e});let r=await this._bindings.sendQuery(this._conn,e),t=new O(this._bindings,this._conn,r),E=await m.RecordBatchReader.from(t);return console.assert(E.isAsync()),console.assert(E.isStream()),E}async prepare(e){let r=await this._bindings.createPrepared(this._conn,e);return new A(this._bindings,this._conn,r)}async insertArrowVectors(e,r){await this.insertArrowTable(m.Table.new(e),r)}async insertArrowTable(e,r){e.schema.fields.length==0&&console.warn("The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually"),await this.insertArrowBatches(e.schema,e.chunks,r)}async insertArrowBatches(e,r,t){let E=new w,a=new m.RecordBatchStreamWriter().reset(E,e),u=!0;for(let y of r)u||await this._bindings.insertArrowFromIPCStream(this._conn,E.flush(),t),u=!1,a.write(y);a.finish(),await this._bindings.insertArrowFromIPCStream(this._conn,E.flush(),t)}async insertArrowFromIPCStream(e,r){await this._bindings.insertArrowFromIPCStream(this._conn,e,r)}async insertCSVFromPath(e,r){await this._bindings.insertCSVFromPath(this._conn,e,r)}async insertJSONFromPath(e,r){await this._bindings.insertJSONFromPath(this._conn,e,r)}},O=class{constructor(e,r,t){this.db=e;this.conn=r;this.header=t;this._first=!0,this._depleted=!1,this._inFlight=null}async next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let e;return this._inFlight!=null?(e=await this._inFlight,this._inFlight=null):e=await this.db.fetchQueryResults(this.conn),this._depleted=e.length==0,this._depleted||(this._inFlight=this.db.fetchQueryResults(this.conn)),{done:this._depleted,value:e}}[Symbol.asyncIterator](){return this}},A=class{constructor(e,r,t){this.bindings=e,this.connectionId=r,this.statementId=t}async close(){await this.bindings.closePrepared(this.connectionId,this.statementId)}async query(...e){let r=await this.bindings.runPrepared(this.connectionId,this.statementId,e),t=m.RecordBatchReader.from(r);return console.assert(t.isSync()),console.assert(t.isFile()),m.Table.from(t)}async send(...e){let r=await this.bindings.sendPrepared(this.connectionId,this.statementId,e),t=new O(this.bindings,this.connectionId,r),E=await m.RecordBatchReader.from(t);return console.assert(E.isAsync()),console.assert(E.isStream()),E}};var s;(function(i){i.CLOSE_PREPARED="CLOSE_PREPARED",i.COLLECT_FILE_STATISTICS="COLLECT_FILE_STATISTICS",i.CONNECT="CONNECT",i.COPY_FILE_TO_BUFFER="COPY_FILE_TO_BUFFER",i.COPY_FILE_TO_PATH="COPY_FILE_TO_PATH",i.CREATE_PREPARED="CREATE_PREPARED",i.DISCONNECT="DISCONNECT",i.DROP_FILE="DROP_FILE",i.DROP_FILES="DROP_FILES",i.EXPORT_FILE_STATISTICS="EXPORT_FILE_STATISTICS",i.FETCH_QUERY_RESULTS="FETCH_QUERY_RESULTS",i.FLUSH_FILES="FLUSH_FILES",i.GET_FEATURE_FLAGS="GET_FEATURE_FLAGS",i.GET_VERSION="GET_VERSION",i.GLOB_FILE_INFOS="GLOB_FILE_INFOS",i.INSERT_ARROW_FROM_IPC_STREAM="INSERT_ARROW_FROM_IPC_STREAM",i.INSERT_CSV_FROM_PATH="IMPORT_CSV_FROM_PATH",i.INSERT_JSON_FROM_PATH="IMPORT_JSON_FROM_PATH",i.INSTANTIATE="INSTANTIATE",i.OPEN="OPEN",i.PING="PING",i.REGISTER_FILE_BUFFER="REGISTER_FILE_BUFFER",i.REGISTER_FILE_HANDLE="REGISTER_FILE_HANDLE",i.REGISTER_FILE_URL="REGISTER_FILE_URL",i.RESET="RESET",i.RUN_PREPARED="RUN_PREPARED",i.RUN_QUERY="RUN_QUERY",i.SEND_PREPARED="SEND_PREPARED",i.SEND_QUERY="SEND_QUERY",i.TOKENIZE="TOKENIZE"})(s||(s={}));var o;(function(c){c.CONNECTION_INFO="CONNECTION_INFO",c.ERROR="ERROR",c.FEATURE_FLAGS="FEATURE_FLAGS",c.FILE_BUFFER="FILE_BUFFER",c.FILE_INFOS="FILE_INFOS",c.FILE_SIZE="FILE_SIZE",c.FILE_STATISTICS="FILE_STATISTICS",c.LOG="LOG",c.OK="OK",c.PREPARED_STATEMENT_ID="PREPARED_STATEMENT_ID",c.QUERY_PLAN="QUERY_PLAN",c.QUERY_RESULT="QUERY_RESULT",c.QUERY_RESULT_CHUNK="QUERY_RESULT_CHUNK",c.QUERY_START="QUERY_START",c.REGISTERED_FILE="REGISTERED_FILE",c.SCRIPT_TOKENS="SCRIPT_TOKENS",c.SUCCESS="SUCCESS",c.VERSION_STRING="VERSION_STRING"})(o||(o={}));var d=class{constructor(e,r){this.promiseResolver=()=>{};this.promiseRejecter=()=>{};this.type=e,this.data=r,this.promise=new Promise((t,E)=>{this.promiseResolver=t,this.promiseRejecter=E})}};var l=h(require("apache-arrow"));function S(n,e){switch(e.typeId){case l.Type.Binary:return{name:n,type:"binary"};case l.Type.Bool:return{name:n,type:"bool"};case l.Type.Date:return{name:n,type:"date"};case l.Type.DateDay:return{name:n,type:"date32[d]"};case l.Type.DateMillisecond:return{name:n,type:"date64[ms]"};case l.Type.Decimal:{let r=e;return{name:n,type:"decimal",precision:r.precision,scale:r.scale}}case l.Type.Float:return{name:n,type:"float"};case l.Type.Float16:return{name:n,type:"float16"};case l.Type.Float32:return{name:n,type:"float32"};case l.Type.Float64:return{name:n,type:"float64"};case l.Type.Int:return{name:n,type:"int32"};case l.Type.Int16:return{name:n,type:"int16"};case l.Type.Int32:return{name:n,type:"int32"};case l.Type.Int64:return{name:n,type:"int64"};case l.Type.Uint16:return{name:n,type:"uint16"};case l.Type.Uint32:return{name:n,type:"uint32"};case l.Type.Uint64:return{name:n,type:"uint64"};case l.Type.Uint8:return{name:n,type:"uint8"};case l.Type.IntervalDayTime:return{name:n,type:"interval[dt]"};case l.Type.IntervalYearMonth:return{name:n,type:"interval[m]"};case l.Type.List:{let r=e;return{name:n,type:"list",children:[S(r.valueField.name,r.valueField.type)]}}case l.Type.FixedSizeBinary:return{name:n,type:"fixedsizebinary",byteWidth:e.byteWidth};case l.Type.Null:return{name:n,type:"null"};case l.Type.Utf8:return{name:n,type:"utf8"};case l.Type.Struct:return{name:n,type:"struct",children:e.children.map(t=>S(t.name,t.type))};case l.Type.Time:return{name:n,type:"time[s]"};case l.Type.TimeMicrosecond:return{name:n,type:"time[us]"};case l.Type.TimeMillisecond:return{name:n,type:"time[ms]"};case l.Type.TimeNanosecond:return{name:n,type:"time[ns]"};case l.Type.TimeSecond:return{name:n,type:"time[s]"};case l.Type.Timestamp:return{name:n,type:"timestamp",timezone:e.timezone||void 0};case l.Type.TimestampSecond:return{name:n,type:"timestamp[s]",timezone:e.timezone||void 0};case l.Type.TimestampMicrosecond:return{name:n,type:"timestamp[us]",timezone:e.timezone||void 0};case l.Type.TimestampNanosecond:return{name:n,type:"timestamp[ns]",timezone:e.timezone||void 0};case l.Type.TimestampMillisecond:return{name:n,type:"timestamp[ms]",timezone:e.timezone||void 0}}throw new Error(`unsupported arrow type: ${e.toString()}`)}var se=new TextEncoder,G=class{constructor(e,r=null){this._worker=null;this._workerShutdownPromise=null;this._workerShutdownResolver=()=>{};this._nextMessageId=0;this._pendingRequests=new Map;this._logger=e,this._onMessageHandler=this.onMessage.bind(this),this._onErrorHandler=this.onError.bind(this),this._onCloseHandler=this.onClose.bind(this),r!=null&&this.attach(r)}get logger(){return this._logger}attach(e){this._worker=e,this._worker.addEventListener("message",this._onMessageHandler),this._worker.addEventListener("error",this._onErrorHandler),this._worker.addEventListener("close",this._onCloseHandler),this._workerShutdownPromise=new Promise((r,t)=>{this._workerShutdownResolver=r})}detach(){!this._worker||(this._worker.removeEventListener("message",this._onMessageHandler),this._worker.removeEventListener("error",this._onErrorHandler),this._worker.removeEventListener("close",this._onCloseHandler),this._worker=null,this._workerShutdownResolver(null),this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async terminate(){!this._worker||(this._worker.terminate(),this._worker=null,this._workerShutdownPromise=null,this._workerShutdownResolver=()=>{})}async postTask(e,r=[]){if(!this._worker){console.error("cannot send a message since the worker is not set!");return}let t=this._nextMessageId++;return this._pendingRequests.set(t,e),this._worker.postMessage({messageId:t,type:e.type,data:e.data}),await e.promise}onMessage(e){let r=e.data;r.type==o.LOG&&this._logger.log(r.data);let t=this._pendingRequests.get(r.requestId);if(!t){console.warn(`unassociated response: [${r.requestId}, ${r.type.toString()}]`);return}if(this._pendingRequests.delete(r.requestId),r.type==o.ERROR){let E=new Error(r.data.message);E.name=r.data.name,E.stack=r.data.stack,t.promiseRejecter(E);return}switch(t.type){case s.CLOSE_PREPARED:case s.COLLECT_FILE_STATISTICS:case s.COPY_FILE_TO_PATH:case s.DISCONNECT:case s.DROP_FILES:case s.FLUSH_FILES:case s.INSERT_ARROW_FROM_IPC_STREAM:case s.INSERT_CSV_FROM_PATH:case s.INSERT_JSON_FROM_PATH:case s.INSTANTIATE:case s.OPEN:case s.PING:case s.REGISTER_FILE_BUFFER:case s.REGISTER_FILE_HANDLE:case s.REGISTER_FILE_URL:case s.RESET:if(r.type==o.OK){t.promiseResolver(r.data);return}break;case s.GLOB_FILE_INFOS:if(r.type==o.FILE_INFOS){t.promiseResolver(r.data);return}break;case s.GET_VERSION:if(r.type==o.VERSION_STRING){t.promiseResolver(r.data);return}break;case s.GET_FEATURE_FLAGS:if(r.type==o.FEATURE_FLAGS){t.promiseResolver(r.data);return}break;case s.TOKENIZE:if(r.type==o.SCRIPT_TOKENS){t.promiseResolver(r.data);return}break;case s.DROP_FILE:if(r.type==o.SUCCESS){t.promiseResolver(r.data);return}break;case s.COPY_FILE_TO_BUFFER:if(r.type==o.FILE_BUFFER){t.promiseResolver(r.data);return}break;case s.EXPORT_FILE_STATISTICS:if(r.type==o.FILE_STATISTICS){t.promiseResolver(r.data);return}break;case s.CONNECT:if(r.type==o.CONNECTION_INFO){t.promiseResolver(r.data);return}break;case s.RUN_PREPARED:case s.RUN_QUERY:if(r.type==o.QUERY_RESULT){t.promiseResolver(r.data);return}break;case s.SEND_PREPARED:case s.SEND_QUERY:if(r.type==o.QUERY_START){t.promiseResolver(r.data);return}break;case s.FETCH_QUERY_RESULTS:if(r.type==o.QUERY_RESULT_CHUNK){t.promiseResolver(r.data);return}break;case s.CREATE_PREPARED:if(r.type==o.PREPARED_STATEMENT_ID){t.promiseResolver(r.data);return}break}t.promiseRejecter(new Error(`unexpected response type: ${r.type.toString()}`))}onError(e){console.error(e),console.error(`error in duckdb worker: ${e.message}`),this._pendingRequests.clear()}onClose(){if(this._workerShutdownResolver(null),this._pendingRequests.size!=0){console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);return}this._pendingRequests.clear()}async reset(){let e=new d(s.RESET,null);return await this.postTask(e)}async ping(){let e=new d(s.PING,null);await this.postTask(e)}async dropFile(e){let r=new d(s.DROP_FILE,e);return await this.postTask(r)}async dropFiles(){let e=new d(s.DROP_FILES,null);return await this.postTask(e)}async flushFiles(){let e=new d(s.FLUSH_FILES,null);return await this.postTask(e)}async instantiate(e,r=null){let t=new d(s.INSTANTIATE,[e,r]);return await this.postTask(t)}async getVersion(){let e=new d(s.GET_VERSION,null);return await this.postTask(e)}async getFeatureFlags(){let e=new d(s.GET_FEATURE_FLAGS,null);return await this.postTask(e)}async open(e){let r=new d(s.OPEN,e);await this.postTask(r)}async tokenize(e){let r=new d(s.TOKENIZE,e);return await this.postTask(r)}async connectInternal(){let e=new d(s.CONNECT,null);return await this.postTask(e)}async connect(){let e=await this.connectInternal();return new b(this,e)}async disconnect(e){let r=new d(s.DISCONNECT,e);await this.postTask(r)}async runQuery(e,r){let t=new d(s.RUN_QUERY,[e,r]);return await this.postTask(t)}async sendQuery(e,r){let t=new d(s.SEND_QUERY,[e,r]);return await this.postTask(t)}async fetchQueryResults(e){let r=new d(s.FETCH_QUERY_RESULTS,e);return await this.postTask(r)}async createPrepared(e,r){let t=new d(s.CREATE_PREPARED,[e,r]);return await this.postTask(t)}async closePrepared(e,r){let t=new d(s.CLOSE_PREPARED,[e,r]);await this.postTask(t)}async runPrepared(e,r,t){let E=new d(s.RUN_PREPARED,[e,r,t]);return await this.postTask(E)}async sendPrepared(e,r,t){let E=new d(s.SEND_PREPARED,[e,r,t]);return await this.postTask(E)}async globFiles(e){let r=new d(s.GLOB_FILE_INFOS,e);return await this.postTask(r)}async registerFileText(e,r){let t=se.encode(r);await this.registerFileBuffer(e,t)}async registerFileURL(e,r){r===void 0&&(r=e);let t=new d(s.REGISTER_FILE_URL,[e,r]);await this.postTask(t)}async registerEmptyFileBuffer(e){let r=new d(s.REGISTER_FILE_BUFFER,[e,new Uint8Array]);await this.postTask(r)}async registerFileBuffer(e,r){let t=new d(s.REGISTER_FILE_BUFFER,[e,r]);await this.postTask(t,[r.buffer])}async registerFileHandle(e,r){let t=new d(s.REGISTER_FILE_HANDLE,[e,r]);await this.postTask(t,[])}async collectFileStatistics(e,r){let t=new d(s.COLLECT_FILE_STATISTICS,[e,r]);await this.postTask(t,[])}async exportFileStatistics(e){let r=new d(s.EXPORT_FILE_STATISTICS,e);return await this.postTask(r,[])}async copyFileToBuffer(e){let r=new d(s.COPY_FILE_TO_BUFFER,e);return await this.postTask(r)}async copyFileToPath(e,r){let t=new d(s.COPY_FILE_TO_PATH,[e,r]);await this.postTask(t)}async insertArrowFromIPCStream(e,r,t){let E=new d(s.INSERT_ARROW_FROM_IPC_STREAM,[e,r,t]);await this.postTask(E,[r.buffer])}async insertCSVFromPath(e,r,t){if(t.columns!==void 0){let a=[];for(let u in t.columns){let y=t.columns[u];a.push(S(u,y))}t.columnsFlat=a,delete t.columns}let E=new d(s.INSERT_CSV_FROM_PATH,[e,r,t]);await this.postTask(E)}async insertJSONFromPath(e,r,t){if(t.columns!==void 0){let a=[];for(let u in t.columns){let y=t.columns[u];a.push(S(u,y))}t.columnsFlat=a,delete t.columns}let E=new d(s.INSERT_JSON_FROM_PATH,[e,r,t]);await this.postTask(E)}};var Y=class{constructor(){this._bindings=null;this._nextMessageId=0}log(e){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:o.LOG,data:e},[])}sendOK(e){this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.OK,data:null},[])}failWith(e,r){let t={name:r.name,message:r.message,stack:r.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.ERROR,data:t},[])}async onMessage(e){switch(e.type){case s.PING:this.sendOK(e);return;case s.INSTANTIATE:this._bindings!=null&&this.failWith(e,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(e.data[0],e.data[1]),this.sendOK(e)}catch(r){this._bindings=null,this.failWith(e,r)}return;default:break}if(!this._bindings)return this.failWith(e,new Error("duckdb is not initialized"));try{switch(e.type){case s.GET_VERSION:this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.VERSION_STRING,data:this._bindings.getVersion()},[]);break;case s.GET_FEATURE_FLAGS:this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.FEATURE_FLAGS,data:this._bindings.getFeatureFlags()},[]);break;case s.RESET:this._bindings.reset(),this.sendOK(e);break;case s.OPEN:this._bindings.open(e.data),this.sendOK(e);break;case s.DROP_FILE:this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.SUCCESS,data:this._bindings.dropFile(e.data)},[]);break;case s.DROP_FILES:this._bindings.dropFiles(),this.sendOK(e);break;case s.FLUSH_FILES:this._bindings.flushFiles(),this.sendOK(e);break;case s.CONNECT:{let r=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.CONNECTION_INFO,data:r.useUnsafe((t,E)=>E)},[]);break}case s.DISCONNECT:this._bindings.disconnect(e.data),this.sendOK(e);break;case s.CREATE_PREPARED:{let r=this._bindings.createPrepared(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.PREPARED_STATEMENT_ID,data:r},[]);break}case s.CLOSE_PREPARED:{this._bindings.closePrepared(e.data[0],e.data[1]),this.sendOK(e);break}case s.RUN_PREPARED:{let r=this._bindings.runPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.QUERY_RESULT,data:r},[r.buffer]);break}case s.RUN_QUERY:{let r=this._bindings.runQuery(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.QUERY_RESULT,data:r},[r.buffer]);break}case s.SEND_PREPARED:{let r=this._bindings.sendPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.QUERY_START,data:r},[r.buffer]);break}case s.SEND_QUERY:{let r=this._bindings.sendQuery(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.QUERY_START,data:r},[r.buffer]);break}case s.FETCH_QUERY_RESULTS:{let r=this._bindings.fetchQueryResults(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.QUERY_RESULT_CHUNK,data:r},[r.buffer]);break}case s.GLOB_FILE_INFOS:{let r=this._bindings.globFiles(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.FILE_INFOS,data:r},[]);break}case s.REGISTER_FILE_URL:this._bindings.registerFileURL(e.data[0],e.data[1]),this.sendOK(e);break;case s.REGISTER_FILE_BUFFER:this._bindings.registerFileBuffer(e.data[0],e.data[1]),this.sendOK(e);break;case s.REGISTER_FILE_HANDLE:this._bindings.registerFileHandle(e.data[0],e.data[1]),this.sendOK(e);break;case s.COPY_FILE_TO_PATH:this._bindings.copyFileToPath(e.data[0],e.data[1]),this.sendOK(e);break;case s.COPY_FILE_TO_BUFFER:{let r=this._bindings.copyFileToBuffer(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.FILE_BUFFER,data:r},[]);break}case s.COLLECT_FILE_STATISTICS:this._bindings.collectFileStatistics(e.data[0],e.data[1]),this.sendOK(e);break;case s.EXPORT_FILE_STATISTICS:{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.FILE_STATISTICS,data:this._bindings.exportFileStatistics(e.data)},[]);break}case s.INSERT_ARROW_FROM_IPC_STREAM:{this._bindings.insertArrowFromIPCStream(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case s.INSERT_CSV_FROM_PATH:{this._bindings.insertCSVFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case s.INSERT_JSON_FROM_PATH:{this._bindings.insertJSONFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case s.TOKENIZE:{let r=this._bindings.tokenize(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:o.SCRIPT_TOKENS,data:r},[]);break}}}catch(r){return this.failWith(e,r)}}};var g=h(require("wasm-feature-detect"));var ne="@duckdb/duckdb-wasm",ie="0.1.12-dev54.0",ae="DuckDB powered by WebAssembly",oe="MPL-2.0",ce={type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},le={"@apache-arrow/esnext-esm":"^6.0.0","wasm-feature-detect":"^1.2.11"},de={"@types/emscripten":"^1.39.4","@types/jasmine":"^3.10.2","@typescript-eslint/eslint-plugin":"^5.3.0","@typescript-eslint/parser":"^5.3.0",esbuild:"^0.13.12",eslint:"^8.2.0","eslint-plugin-jasmine":"^4.1.2","eslint-plugin-react":"^7.26.1",jasmine:"^3.10.0","jasmine-core":"^3.10.1","jasmine-spec-reporter":"^7.0.0",karma:"^6.3.8","karma-chrome-launcher":"^3.1.0","karma-coverage":"^2.0.3","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^4.0.1","karma-jasmine-html-reporter":"^1.7.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.32","fast-glob":"^3.2.7","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.4.1",puppeteer:"^11.0.0",rimraf:"^3.0.2",typedoc:"^0.22.8",typescript:"^4.4.4","web-worker":"^1.2.0"},Ee={fsevents:"*"},ue={"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.js","test:node:debug":"node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.js","test:node:coverage":"nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.js","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},Re=["dist","!dist/types/test"],pe="./dist/duckdb-node-async.js",_e="./dist/duckdb-node-async.d.ts",Te="./dist/duckdb-esm.js",me={"./dist/duckdb-node-async.js":"./dist/duckdb-browser-async.js","fast-glob":!1,"temp-write":!1,worker_threads:!1,perf_hooks:!1,fs:!1,os:!1,path:!1,buffer:!1,crypto:!1},N={name:ne,version:ie,description:ae,license:oe,repository:ce,dependencies:le,devDependencies:de,optionalDependencies:Ee,scripts:ue,files:Re,main:pe,types:_e,module:Te,browser:me};var H=N.name,V=N.version,f=N.version.split("."),rr=f[0],tr=f[1],sr=f[2];function F(n){let e=`importScripts("${n}");`;return URL.createObjectURL(new Blob([e],{type:"text/javascript"}))}function Ie(){let n=`https://cdn.jsdelivr.net/npm/${H}@${V}/dist/`;return{asyncDefault:{mainModule:`${n}duckdb.wasm`,mainWorker:F(`${n}duckdb-browser-async.worker.js`)},asyncNext:{mainModule:`${n}duckdb-next.wasm`,mainWorker:F(`${n}duckdb-browser-async-next.worker.js`)},asyncNextCOI:{mainModule:`${n}duckdb-next-coi.wasm`,mainWorker:F(`${n}duckdb-browser-async-next-coi.worker.js`),pthreadWorker:F(`${n}duckdb-browser-async-next-coi.pthread.worker.js`)}}}var C=null,L=null,D=null,U=null,W=null;function ge(){return typeof process!="undefined"&&process.release.name==="node"}async function K(){return C==null&&(C=typeof BigInt64Array!="undefined"),L==null&&(L=await g.exceptions()),D==null&&(D=await g.threads()),U==null&&(U=await g.simd()),W==null&&(W=await g.bulkMemory()),{bigInt64Array:C,crossOriginIsolated:ge()||globalThis.crossOriginIsolated||!1,wasmExceptions:L,wasmSIMD:U,wasmThreads:D,wasmBulkMemory:W}}async function ye(n){let e=await K();if(e.wasmExceptions&&e.wasmSIMD){if(e.wasmThreads&&e.crossOriginIsolated&&n.asyncNextCOI)return{mainModule:n.asyncNextCOI.mainModule,mainWorker:n.asyncNextCOI.mainWorker,pthreadWorker:n.asyncNextCOI.pthreadWorker};if(n.asyncNext)return{mainModule:n.asyncNext.mainModule,mainWorker:n.asyncNext.mainWorker,pthreadWorker:null}}return{mainModule:n.asyncDefault.mainModule,mainWorker:n.asyncDefault.mainWorker,pthreadWorker:null}}0&&(module.exports={AsyncDuckDB,AsyncDuckDBConnection,AsyncDuckDBDispatcher,AsyncPreparedStatement,AsyncResultStreamIterator,ConsoleLogger,LogEvent,LogLevel,LogOrigin,LogTopic,StatusCode,VoidLogger,WorkerRequestType,WorkerResponseType,WorkerTask,getJsDelivrBundles,getLogEventLabel,getLogLevelLabel,getLogOriginLabel,getLogTopicLabel,getPlatformFeatures,selectBundle});
//# sourceMappingURL=duckdb-node-async.js.map
