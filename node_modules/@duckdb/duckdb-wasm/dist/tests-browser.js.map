{
  "version": 3,
  "sources": ["../../../node_modules/apache-arrow/node_modules/flatbuffers/js/flatbuffers.js", "../../../node_modules/text-encoding-utf-8/lib/encoding.lib.js", "../../../node_modules/apache-arrow/util/util/utf8.ts", "../../../node_modules/apache-arrow/io/io/interfaces.ts", "../../../node_modules/apache-arrow/util/util/compat.ts", "../../../node_modules/apache-arrow/util/util/buffer.ts", "../../../node_modules/apache-arrow/io/io/adapters.ts", "../../../node_modules/apache-arrow/vector.ts", "../../../node_modules/apache-arrow/fb/fb/Schema.ts", "../../../node_modules/apache-arrow/fb/fb/Message.ts", "../../../node_modules/apache-arrow/enum.ts", "../../../node_modules/apache-arrow/util/util/bit.ts", "../../../node_modules/apache-arrow/visitor.ts", "../../../node_modules/apache-arrow/visitor/visitor/typecomparator.ts", "../../../node_modules/apache-arrow/type.ts", "../../../node_modules/apache-arrow/data.ts", "../../../node_modules/apache-arrow/util/util/pretty.ts", "../../../node_modules/apache-arrow/builder/builder/valid.ts", "../../../node_modules/apache-arrow/builder/builder/buffer.ts", "../../../node_modules/apache-arrow/builder.ts", "../../../node_modules/apache-arrow/builder/builder/bool.ts", "../../../node_modules/apache-arrow/builder/builder/null.ts", "../../../node_modules/apache-arrow/builder/builder/date.ts", "../../../node_modules/apache-arrow/builder/builder/decimal.ts", "../../../node_modules/apache-arrow/builder/builder/dictionary.ts", "../../../node_modules/apache-arrow/builder/builder/fixedsizebinary.ts", "../../../node_modules/apache-arrow/util/util/math.ts", "../../../node_modules/apache-arrow/builder/builder/float.ts", "../../../node_modules/apache-arrow/util/util/bn.ts", "../../../node_modules/apache-arrow/builder/builder/int.ts", "../../../node_modules/apache-arrow/builder/builder/time.ts", "../../../node_modules/apache-arrow/builder/builder/timestamp.ts", "../../../node_modules/apache-arrow/builder/builder/interval.ts", "../../../node_modules/apache-arrow/builder/builder/binary.ts", "../../../node_modules/apache-arrow/builder/builder/utf8.ts", "../../../node_modules/apache-arrow/builder/builder/run.ts", "../../../node_modules/apache-arrow/vector/vector/row.ts", "../../../node_modules/apache-arrow/util/util/vector.ts", "../../../node_modules/apache-arrow/vector/vector/chunked.ts", "../../../node_modules/apache-arrow/column.ts", "../../../node_modules/apache-arrow/util/util/args.ts", "../../../node_modules/apache-arrow/schema.ts", "../../../node_modules/apache-arrow/builder/builder/list.ts", "../../../node_modules/apache-arrow/builder/builder/fixedsizelist.ts", "../../../node_modules/apache-arrow/builder/builder/map.ts", "../../../node_modules/apache-arrow/builder/builder/struct.ts", "../../../node_modules/apache-arrow/builder/builder/union.ts", "../../../node_modules/apache-arrow/visitor/visitor/set.ts", "../../../node_modules/apache-arrow/visitor/visitor/builderctor.ts", "../../../node_modules/apache-arrow/builder/builder/index.ts", "../../../node_modules/apache-arrow/fb/fb/File.ts", "../../../node_modules/apache-arrow/ipc/metadata/ipc/metadata/file.ts", "../../../node_modules/apache-arrow/io/io/stream.ts", "../../../node_modules/apache-arrow/io/io/file.ts", "../../../node_modules/apache-arrow/util/util/int.ts", "../../../node_modules/apache-arrow/visitor/visitor/vectorloader.ts", "../../../node_modules/apache-arrow/visitor/visitor/typeassembler.ts", "../../../node_modules/apache-arrow/ipc/metadata/ipc/metadata/json.ts", "../../../node_modules/apache-arrow/ipc/metadata/ipc/metadata/message.ts", "../../../node_modules/apache-arrow/ipc/ipc/message.ts", "../../../node_modules/apache-arrow/visitor/visitor/vectorassembler.ts", "../../../node_modules/apache-arrow/visitor/visitor/jsontypeassembler.ts", "../../../node_modules/apache-arrow/visitor/visitor/jsonvectorassembler.ts", "../../../node_modules/apache-arrow/ipc/ipc/writer.ts", "../../../node_modules/apache-arrow/util/util/recordbatch.ts", "../../../node_modules/apache-arrow/vector/vector/base.ts", "../../../node_modules/apache-arrow/vector/vector/binary.ts", "../../../node_modules/apache-arrow/vector/vector/bool.ts", "../../../node_modules/apache-arrow/vector/vector/date.ts", "../../../node_modules/apache-arrow/vector/vector/decimal.ts", "../../../node_modules/apache-arrow/vector/vector/dictionary.ts", "../../../node_modules/apache-arrow/vector/vector/fixedsizebinary.ts", "../../../node_modules/apache-arrow/vector/vector/fixedsizelist.ts", "../../../node_modules/apache-arrow/vector/vector/float.ts", "../../../node_modules/apache-arrow/vector/vector/interval.ts", "../../../node_modules/apache-arrow/vector/vector/int.ts", "../../../node_modules/apache-arrow/vector/vector/list.ts", "../../../node_modules/apache-arrow/vector/vector/map.ts", "../../../node_modules/apache-arrow/vector/vector/null.ts", "../../../node_modules/apache-arrow/vector/vector/struct.ts", "../../../node_modules/apache-arrow/vector/vector/timestamp.ts", "../../../node_modules/apache-arrow/vector/vector/time.ts", "../../../node_modules/apache-arrow/vector/vector/union.ts", "../../../node_modules/apache-arrow/vector/vector/utf8.ts", "../../../node_modules/apache-arrow/util/util/fn.ts", "../../../node_modules/apache-arrow/visitor/visitor/get.ts", "../../../node_modules/apache-arrow/visitor/visitor/indexof.ts", "../../../node_modules/apache-arrow/visitor/visitor/iterator.ts", "../../../node_modules/apache-arrow/visitor/visitor/toarray.ts", "../../../node_modules/apache-arrow/visitor/visitor/bytewidth.ts", "../../../node_modules/apache-arrow/visitor/visitor/vectorctor.ts", "../../../node_modules/apache-arrow/vector/vector/index.ts", "../../../node_modules/apache-arrow/table.ts", "../../../node_modules/apache-arrow/recordbatch.ts", "../../../node_modules/apache-arrow/ipc/ipc/reader.ts", "../../../node_modules/apache-arrow/io/whatwg/io/whatwg/iterable.ts", "../../../node_modules/apache-arrow/io/whatwg/io/whatwg/builder.ts", "../../../node_modules/apache-arrow/io/whatwg/io/whatwg/reader.ts", "../../../node_modules/apache-arrow/io/whatwg/io/whatwg/writer.ts", "../../../node_modules/apache-arrow/compute/compute/predicate.ts", "../../../node_modules/apache-arrow/compute/compute/dataframe.ts", "../../../node_modules/apache-arrow/Arrow.ts", "../../../node_modules/apache-arrow/Arrow.dom.ts", "(disabled):path", "(disabled):fs", "(disabled):crypto", "../src/log.ts", "../src/status.ts", "../src/bindings/connection.ts", "../src/utils/ipc_buffer.ts", "../src/bindings/runtime.ts", "../src/bindings/file_stats.ts", "../src/flat_arrow.ts", "../src/bindings/bindings_base.ts", "../src/bindings/insert_options.ts", "../src/bindings/insert.ts", "../src/bindings/duckdb_wasm.js", "../src/bindings/bindings_browser_base.ts", "../src/bindings/bindings_browser.ts", "../src/bindings/runtime_browser.ts", "../src/parallel/async_connection.ts", "../src/parallel/worker_request.ts", "../src/parallel/async_bindings.ts", "../../../node_modules/wasm-feature-detect/dist/esm/index.js", "../src/version.ts", "../src/platform.ts", "../test/bindings.test.ts", "../test/batch_stream.test.ts", "../test/batch_stream_async.test.ts", "../test/filesystem.test.ts", "../test/insert_arrow.test.ts", "../test/table_test.ts", "../test/insert_json.test.ts", "../test/insert_csv.test.ts", "../test/tokenizer.test.ts", "../test/regression/github_332.test.ts", "../test/regression/github_334.test.ts", "../test/regression/index.ts", "../test/index_browser.ts"],
  "sourcesContent": ["/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nthis.flatbuffers = flatbuffers;\n\n/// @endcond\n/// @}\n", "'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 \u2264 c \u2264 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 \u2264 c \u2264 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n\u22121, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n\u22121:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 \u2264 d \u2264 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // \u2212 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte \u2212 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte \u2212 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 \u00D7 utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte \u2212 0x80) << (6 \u00D7 (utf-8 bytes\n    // needed \u2212 utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 \u00D7 count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 \u00D7 (count \u2212 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it: Iterator<ArrayBufferViewInput, any, number | undefined>): Generator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncGenerator<T, T, number | undefined> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it: AsyncIterator<ArrayBufferViewInput, any, number | undefined>): AsyncGenerator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\ninterface ReadableStreamReadResult<T> { done: boolean; value: T; }\ntype Uint8ArrayGenerator = Generator<Uint8Array, null, { cmd: 'peek' | 'read', size: number }>;\ntype AsyncUint8ArrayGenerator = AsyncGenerator<Uint8Array, null, { cmd: 'peek' | 'read', size: number }>;\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Uint8ArrayGenerator | AsyncUint8ArrayGenerator>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\n\n    let done: boolean | undefined, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return(null!));\n    }\n    return null;\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\n\n    let done: boolean | undefined, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = (yield <any> null)!);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return(new Uint8Array(0)));\n    }\n    return null;\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n    return null;\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value!.byteLength) < size) && !done) {\n        return await readInto(reader, value!.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value!.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) {\n        yield new Uint8Array(0);\n        return null;\n    }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    return null;\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<AbstractVector<T>>,\n            Sliceable<AbstractVector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\n(AbstractVector.prototype as any).data = null;\n\nexport { AbstractVector as Vector };\n", "/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n", "// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            // @ts-ignore\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            // @ts-ignore\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            // @ts-ignore\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            // @ts-ignore\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            // @ts-ignore\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            // @ts-ignore\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            // @ts-ignore\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    // @ts-ignore\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    } as ThroughIterable<T, TNull>;\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    } as ThroughAsyncIterable<T, TNull>;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    // @ts-ignore\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n\n        let [field, data, ...rest] = args as [\n            string | Field<T>,\n            Data<T> | Vector<T> | (Data<T> | Vector<T>)[],\n            ...any[]\n        ];\n\n        if (typeof field !== 'string' && !(field instanceof Field)) {\n            data = <Data<T> | Vector<T> | (Data<T> | Vector<T>)[]> field;\n            field = '';\n        }\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n", "// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ntype ByteStreamSourceIterator<T> = Generator<T, null, { cmd: 'peek' | 'read', size?: number | null }>;\n/** @ignore */\ntype AsyncByteStreamSourceIterator<T> = AsyncGenerator<T, null, { cmd: 'peek' | 'read', size?: number | null }>;\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, boolean | TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, boolean | TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, boolean | TNull> | VectorBuilderOptionsAsync<Bool, boolean | TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, Date | TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, Date | TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, Date | TNull> | VectorBuilderOptionsAsync<T, Date | TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, string | TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, string | TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, string | TNull> | VectorBuilderOptionsAsync<Utf8, string | TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector.data;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.data.nullBitmap, vector.data.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.data.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.data.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n", "/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return (chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks)) as Vector<T>;\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return (chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks)) as Vector<T>;\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer(): Footer | null { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\ntype SourceIterator<T> = Generator<T, void, number | null>;\n/** @ignore */\ntype AsyncSourceIterator<T> = AsyncGenerator<T, void, number | null>;\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: SourceIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]() as SourceIterator<T>)); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: SourceIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncSourceIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]() as AsyncSourceIterator<T>)); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncSourceIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n", "// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n", "", "", "", "export enum LogLevel {\n    NONE = 0,\n    DEBUG = 1,\n    INFO = 2,\n    WARNING = 3,\n    ERROR = 4,\n}\n\nexport enum LogTopic {\n    NONE = 0,\n    CONNECT = 1,\n    DISCONNECT = 2,\n    OPEN = 3,\n    QUERY = 4,\n}\n\nexport enum LogEvent {\n    NONE = 0,\n    OK = 1,\n    ERROR = 2,\n    START = 3,\n    RUN = 4,\n    CAPTURE = 5,\n}\n\nexport enum LogOrigin {\n    NONE = 0,\n    WEB_WORKER = 1,\n    NODE_WORKER = 2,\n    BINDINGS = 3,\n    ASYNC_DUCKDB = 4,\n}\n\nexport type LogEntry<O, T, E, V> = {\n    readonly timestamp: Date;\n    readonly level: LogLevel;\n    readonly origin: O;\n    readonly topic: T;\n    readonly event: E;\n    readonly value: V;\n};\n\nexport type LogEntryVariant =\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\n\nexport interface Logger {\n    log(entry: LogEntryVariant): void;\n}\n\nexport class VoidLogger implements Logger {\n    public log(_entry: LogEntryVariant): void {}\n}\n\nexport class ConsoleLogger implements Logger {\n    public log(entry: LogEntryVariant): void {\n        console.log(entry);\n    }\n}\n\nexport function getLogLevelLabel(level: LogLevel): string {\n    switch (level) {\n        case LogLevel.NONE:\n            return 'NONE';\n        case LogLevel.DEBUG:\n            return 'DEBUG';\n        case LogLevel.INFO:\n            return 'INFO';\n        case LogLevel.WARNING:\n            return 'WARNING';\n        case LogLevel.ERROR:\n            return 'ERROR';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogEventLabel(event: LogEvent): string {\n    switch (event) {\n        case LogEvent.NONE:\n            return 'NONE';\n        case LogEvent.OK:\n            return 'OK';\n        case LogEvent.ERROR:\n            return 'ERROR';\n        case LogEvent.START:\n            return 'START';\n        case LogEvent.RUN:\n            return 'RUN';\n        case LogEvent.CAPTURE:\n            return 'CAPTURE';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogTopicLabel(topic: LogTopic): string {\n    switch (topic) {\n        case LogTopic.CONNECT:\n            return 'CONNECT';\n        case LogTopic.DISCONNECT:\n            return 'DISCONNECT';\n        case LogTopic.OPEN:\n            return 'OPEN';\n        case LogTopic.QUERY:\n            return 'QUERY';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogOriginLabel(origin: LogOrigin): string {\n    switch (origin) {\n        case LogOrigin.NONE:\n            return 'NONE';\n        case LogOrigin.WEB_WORKER:\n            return 'WEB WORKER';\n        case LogOrigin.NODE_WORKER:\n            return 'NODE WORKER';\n        case LogOrigin.BINDINGS:\n            return 'DUCKDB BINDINGS';\n        case LogOrigin.ASYNC_DUCKDB:\n            return 'DUCKDB';\n        default:\n            return '?';\n    }\n}\n", "export enum StatusCode {\n    SUCCESS = 0,\n}\n", "import * as arrow from 'apache-arrow';\nimport * as utils from '../utils';\nimport { DuckDBBindings } from './bindings_interface';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from './insert_options';\n\n/** A thin helper to bind the connection id and talk record batches */\nexport class DuckDBConnection {\n    /** The bindings */\n    protected _bindings: DuckDBBindings;\n    /** The connection handle */\n    protected _conn: number;\n\n    /** Constructor */\n    constructor(bindings: DuckDBBindings, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Close a connection */\n    public close(): void {\n        this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: DuckDBBindings, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public query<T extends { [key: string]: arrow.DataType } = any>(text: string): arrow.Table<T> {\n        const buffer = this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader);\n    }\n\n    /** Send a query */\n    public send<T extends { [key: string]: arrow.DataType } = any>(text: string): arrow.RecordBatchStreamReader<T> {\n        const header = this._bindings.sendQuery(this._conn, text);\n        const iter = new ResultStreamIterator(this._bindings, this._conn, header);\n        const reader = arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isSync());\n        console.assert(reader.isStream());\n        return reader;\n    }\n\n    /** Create a prepared statement */\n    public prepare<T extends { [key: string]: arrow.DataType } = any>(text: string): PreparedStatement {\n        const stmt = this._bindings.createPrepared(this._conn, text);\n        return new PreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert arrow vectors */\n    public insertArrowVectors<T extends { [key: string]: arrow.Vector } = any>(\n        children: T,\n        options: ArrowInsertOptions,\n    ): void {\n        this.insertArrowTable(arrow.Table.new(children), options);\n    }\n    /** Insert an arrow table */\n    public insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): void {\n        if (table.schema.fields.length == 0) {\n            console.warn(\n                'The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually',\n            );\n        }\n        this.insertArrowBatches(table.schema, table.chunks, options);\n    }\n    /** Insert record batches */\n    public insertArrowBatches(\n        schema: arrow.Schema,\n        batches: Iterable<arrow.RecordBatch>,\n        options: ArrowInsertOptions,\n    ): void {\n        /// Warn the user about an empty schema.\n        if (schema.fields.length == 0) {\n            console.warn(\n                'The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually',\n            );\n        }\n\n        // Prepare the IPC stream writer\n        const buffer = new utils.IPCBuffer();\n        const writer = new arrow.RecordBatchStreamWriter().reset(buffer, schema);\n\n        // Write all batches to the ipc buffer\n        let first = true;\n        for (const batch of batches) {\n            if (!first) {\n                this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n            }\n            first = false;\n            writer.write(batch);\n        }\n        writer.finish();\n        this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): void {\n        this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n\n    /** Inesrt csv file from path */\n    public insertCSVFromPath(path: string, options: CSVInsertOptions): void {\n        this._bindings.insertCSVFromPath(this._conn, path, options);\n    }\n    /** Insert json file from path */\n    public insertJSONFromPath(path: string, options: JSONInsertOptions): void {\n        this._bindings.insertJSONFromPath(this._conn, path, options);\n    }\n}\n\n/** A result stream iterator */\nexport class ResultStreamIterator implements Iterable<Uint8Array> {\n    /** First chunk? */\n    _first: boolean;\n    /** Reached end of stream? */\n    _depleted: boolean;\n\n    constructor(protected bindings: DuckDBBindings, protected conn: number, protected header: Uint8Array) {\n        this._first = true;\n        this._depleted = false;\n    }\n\n    next(): IteratorResult<Uint8Array> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        const bufferI8 = this.bindings.fetchQueryResults(this.conn);\n        this._depleted = bufferI8.length == 0;\n        return {\n            done: this._depleted,\n            value: bufferI8,\n        };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id*/\nexport class PreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: DuckDBBindings;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: DuckDBBindings, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public close() {\n        this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public query(...params: any[]): arrow.Table<T> {\n        const buffer = this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public send(...params: any[]): arrow.RecordBatchStreamReader<T> {\n        const header = this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new ResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isSync());\n        console.assert(reader.isStream());\n        return reader as arrow.RecordBatchStreamReader;\n    }\n}\n", "import * as arrow from 'apache-arrow';\n\nexport class IPCBuffer extends arrow.AsyncByteQueue<Uint8Array> {\n    /// Flush the buffer\n    flush(): Uint8Array {\n        const buffer = super.toUint8Array(true);\n        this._values.length = 0;\n        return buffer;\n    }\n}\n", "import { DuckDBModule } from './duckdb_module';\n\n/** Wrapper for TextDecoder to support shared array buffers */\nfunction TextDecoderWrapper(): (input?: BufferSource) => string {\n    const decoder = new TextDecoder();\n    return (data: any) => {\n        if (typeof SharedArrayBuffer !== 'undefined' && data.buffer instanceof SharedArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        return decoder.decode(data);\n    };\n}\n/** Helper to decode text */\nexport const decodeText = TextDecoderWrapper();\n\n/** Copy a buffer */\nexport function failWith(mod: DuckDBModule, msg: string): void {\n    mod.ccall('duckdb_web_fail_with', null, ['string'], [msg]);\n}\n\n/** Copy a buffer */\nexport function copyBuffer(mod: DuckDBModule, begin: number, length: number): Uint8Array {\n    const buffer = mod.HEAPU8.subarray(begin, begin + length);\n    const copy = new Uint8Array(new ArrayBuffer(buffer.byteLength));\n    copy.set(buffer);\n    return copy;\n}\n\n/** Decode a string */\nexport function readString(mod: DuckDBModule, begin: number, length: number): string {\n    return decodeText(mod.HEAPU8.subarray(begin, begin + length));\n}\n\n/** The data protocol */\nexport enum DuckDBDataProtocol {\n    BUFFER = 0,\n    NATIVE = 1,\n    HTTP = 3,\n}\n\n/** An info for a file registered with DuckDB */\nexport interface DuckDBFileInfo {\n    fileId: number;\n    fileName: string;\n    dataProtocol: DuckDBDataProtocol;\n    dataUrl: string | null;\n    dataNativeFd: number | null;\n    allowFullHttpReads?: boolean;\n}\n\n/** Call a function with packed response buffer */\nexport function callSRet(\n    mod: DuckDBModule,\n    funcName: string,\n    argTypes: Array<Emscripten.JSType>,\n    args: Array<any>,\n): [number, number, number] {\n    const stackPointer = mod.stackSave();\n\n    // Allocate the packed response buffer\n    const response = mod.stackAlloc(3 * 8);\n    argTypes.unshift('number');\n    args.unshift(response);\n\n    // Do the call\n    mod.ccall(funcName, null, argTypes, args);\n\n    // Read the response\n    const status = mod.HEAPF64[(response >> 3) + 0];\n    const data = mod.HEAPF64[(response >> 3) + 1];\n    const dataSize = mod.HEAPF64[(response >> 3) + 2];\n\n    // Restore the stack\n    mod.stackRestore(stackPointer);\n    return [status, data, dataSize];\n}\n\n/** Drop response buffers */\nexport function dropResponseBuffers(mod: DuckDBModule): void {\n    mod.ccall('duckdb_web_clear_response', null, [], []);\n}\n\n/** The duckdb runtime */\nexport interface DuckDBRuntime {\n    _files?: Map<string, any>;\n\n    // Test a platform feature\n    testPlatformFeature(mod: DuckDBModule, feature: number): boolean;\n\n    // File APIs with dedicated file identifier\n    openFile(mod: DuckDBModule, fileId: number): void;\n    syncFile(mod: DuckDBModule, fileId: number): void;\n    closeFile(mod: DuckDBModule, fileId: number): void;\n    getLastFileModificationTime(mod: DuckDBModule, fileId: number): number;\n    truncateFile(mod: DuckDBModule, fileId: number, newSize: number): void;\n    readFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n    writeFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n\n    // File APIs with path parameter\n    removeDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    checkDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    createDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    listDirectoryEntries(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    glob(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    moveFile(mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number): void;\n    checkFile(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    removeFile(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n}\n\nexport const DEFAULT_RUNTIME: DuckDBRuntime = {\n    testPlatformFeature: (_mod: DuckDBModule, _feature: number): boolean => false,\n    openFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    syncFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    closeFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    getLastFileModificationTime: (_mod: DuckDBModule, _fileId: number): number => {\n        return 0;\n    },\n    truncateFile: (_mod: DuckDBModule, _fileId: number, _newSize: number): void => {},\n    readFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n    writeFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n\n    removeDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    checkDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    createDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    listDirectoryEntries: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    glob: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number): void => {},\n    checkFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n};\n", "export interface FileBlockStatistics {\n    /** The file reads cold */\n    file_reads_cold: number;\n    /** The file reads aheads */\n    file_reads_ahead: number;\n    /** The file reads cached */\n    file_reads_cached: number;\n    /** The file writes */\n    file_writes: number;\n    /** The page accesses */\n    page_accesses: number;\n    /** The page loads */\n    page_loads: number;\n}\n\n/** The file block statistics */\nexport class FileStatistics {\n    /** The cold file reads */\n    public totalFileReadsCold: number;\n    /** The file readaheads */\n    public totalFileReadsAhead: number;\n    /** The cached file reads */\n    public totalFileReadsCached: number;\n    /** The file writes */\n    public totalFileWrites: number;\n    /** The page accesses */\n    public totalPageAccesses: number;\n    /** The page loads */\n    public totalPageLoads: number;\n    /** The blocks */\n    public blockSize: number;\n    /** The blocks */\n    public blockStats: Uint8Array;\n\n    constructor(u8array: Uint8Array) {\n        const f64 = new Float64Array(u8array.buffer, u8array.byteOffset, u8array.byteLength / 8);\n        const blocks = new Uint8Array(new ArrayBuffer(u8array.byteLength));\n        blocks.set(u8array.subarray(7 * 8));\n        this.totalFileReadsCold = f64[0];\n        this.totalFileReadsAhead = f64[1];\n        this.totalFileReadsCached = f64[2];\n        this.totalFileWrites = f64[3];\n        this.totalPageAccesses = f64[4];\n        this.totalPageLoads = f64[5];\n        this.blockSize = f64[6];\n        this.blockStats = blocks;\n    }\n\n    /** The block stats */\n    public getBlockStats(index: number, out?: FileBlockStatistics): FileBlockStatistics {\n        out = out || {\n            file_reads_cold: 0,\n            file_reads_ahead: 0,\n            file_reads_cached: 0,\n            file_writes: 0,\n            page_accesses: 0,\n            page_loads: 0,\n        };\n        out.file_writes = this.blockStats[index * 3 + 0] & 0b1111;\n        out.file_reads_cold = this.blockStats[index * 3 + 0] >> 4;\n        out.file_reads_ahead = this.blockStats[index * 3 + 1] & 0b1111;\n        out.file_reads_cached = this.blockStats[index * 3 + 1] >> 4;\n        out.page_accesses = this.blockStats[index * 3 + 1] & 0b1111;\n        out.page_loads = this.blockStats[index * 3 + 1] >> 4;\n        return out;\n    }\n}\n", "import * as arrow from 'apache-arrow';\n\nexport interface FlatArrowType {\n    /// The type\n    type: string;\n    /// Is nullable?\n    nullable?: boolean;\n    /// Decimal precision\n    precision?: number;\n    /// Decimal scaling\n    scale?: number;\n    /// Timezone\n    timezone?: string;\n    /// Byte width (FixedSizeBinary)\n    byteWidth?: number;\n    /// Fields\n    children?: FlatArrowField[];\n}\n\nexport type FlatArrowField = FlatArrowType & { name: string };\n\nexport function flattenArrowField(name: string, type: arrow.DataType): FlatArrowField {\n    switch (type.typeId) {\n        case arrow.Type.Binary:\n            return { name, type: 'binary' };\n        case arrow.Type.Bool:\n            return { name, type: 'bool' };\n        case arrow.Type.Date:\n            return { name, type: 'date' };\n        case arrow.Type.DateDay:\n            return { name, type: 'date32[d]' };\n        case arrow.Type.DateMillisecond:\n            return { name, type: 'date64[ms]' };\n        case arrow.Type.Decimal: {\n            const dec = type as arrow.Decimal;\n            return { name, type: 'decimal', precision: dec.precision, scale: dec.scale };\n        }\n        case arrow.Type.Float:\n            return { name, type: 'float' };\n        case arrow.Type.Float16:\n            return { name, type: 'float16' };\n        case arrow.Type.Float32:\n            return { name, type: 'float32' };\n        case arrow.Type.Float64:\n            return { name, type: 'float64' };\n        case arrow.Type.Int:\n            return { name, type: 'int32' };\n        case arrow.Type.Int16:\n            return { name, type: 'int16' };\n        case arrow.Type.Int32:\n            return { name, type: 'int32' };\n        case arrow.Type.Int64:\n            return { name, type: 'int64' };\n        case arrow.Type.Uint16:\n            return { name, type: 'uint16' };\n        case arrow.Type.Uint32:\n            return { name, type: 'uint32' };\n        case arrow.Type.Uint64:\n            return { name, type: 'uint64' };\n        case arrow.Type.Uint8:\n            return { name, type: 'uint8' };\n        case arrow.Type.IntervalDayTime:\n            return { name, type: 'interval[dt]' };\n        case arrow.Type.IntervalYearMonth:\n            return { name, type: 'interval[m]' };\n        case arrow.Type.List: {\n            const list = type as arrow.List;\n            return { name, type: 'list', children: [flattenArrowField(list.valueField.name, list.valueField.type)] };\n        }\n        case arrow.Type.FixedSizeBinary: {\n            const bin = type as arrow.FixedSizeBinary;\n            return { name, type: 'fixedsizebinary', byteWidth: bin.byteWidth };\n        }\n        case arrow.Type.Null:\n            return { name, type: 'null' };\n        case arrow.Type.Utf8:\n            return { name, type: 'utf8' };\n        case arrow.Type.Struct: {\n            const struct_ = type as arrow.Struct;\n            return {\n                name,\n                type: 'struct',\n                children: struct_.children.map(c => flattenArrowField(c.name, c.type)),\n            };\n        }\n        case arrow.Type.Time:\n            return { name, type: 'time[s]' };\n        case arrow.Type.TimeMicrosecond:\n            return { name, type: 'time[us]' };\n        case arrow.Type.TimeMillisecond:\n            return { name, type: 'time[ms]' };\n        case arrow.Type.TimeNanosecond:\n            return { name, type: 'time[ns]' };\n        case arrow.Type.TimeSecond:\n            return { name, type: 'time[s]' };\n        case arrow.Type.Timestamp: {\n            const ts = type as arrow.Timestamp;\n            return { name, type: 'timestamp', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampSecond: {\n            const ts = type as arrow.TimestampSecond;\n            return { name, type: 'timestamp[s]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMicrosecond: {\n            const ts = type as arrow.TimestampMicrosecond;\n            return { name, type: 'timestamp[us]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampNanosecond: {\n            const ts = type as arrow.TimestampNanosecond;\n            return { name, type: 'timestamp[ns]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMillisecond: {\n            const ts = type as arrow.TimestampMillisecond;\n            return { name, type: 'timestamp[ms]', timezone: ts.timezone || undefined };\n        }\n    }\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\n}\n", "import { DuckDBModule, PThread } from './duckdb_module';\nimport { DuckDBConfig } from './config';\nimport { Logger } from '../log';\nimport { DuckDBBindings } from './bindings_interface';\nimport { DuckDBConnection } from './connection';\nimport { StatusCode } from '../status';\nimport { dropResponseBuffers, DuckDBRuntime, readString, callSRet, copyBuffer } from './runtime';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from './insert_options';\nimport { ScriptTokens } from './tokens';\nimport { FileStatistics } from './file_stats';\nimport { flattenArrowField } from '../flat_arrow';\nimport { WebFile } from './web_file';\n\nconst TEXT_ENCODER = new TextEncoder();\n\ndeclare global {\n    // eslint-disable-next-line no-var\n    var DUCKDB_RUNTIME: any;\n}\n\n/** A DuckDB Feature */\nexport enum DuckDBFeature {\n    WASM_EXCEPTIONS = 1 << 0,\n    WASM_THREADS = 1 << 1,\n    WASM_SIMD = 1 << 2,\n    WASM_BULK_MEMORY = 1 << 3,\n    EMIT_BIGINT = 1 << 4,\n}\n\n/** The proxy for either the browser- order node-based DuckDB API */\nexport abstract class DuckDBBindingsBase implements DuckDBBindings {\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** Backend-dependent native-glue code for DuckDB */\n    protected readonly _runtime: DuckDBRuntime;\n    /** The instance */\n    protected _instance: DuckDBModule | null = null;\n    /** The loading promise */\n    protected _initPromise: Promise<void> | null = null;\n    /** The resolver for the open promise (called by onRuntimeInitialized) */\n    protected _initPromiseResolver: () => void = () => {};\n\n    constructor(logger: Logger, runtime: DuckDBRuntime) {\n        this._logger = logger;\n        this._runtime = runtime;\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n    /** Get the instance */\n    public get mod(): DuckDBModule {\n        return this._instance!;\n    }\n    /** Get the instance */\n    public get pthread(): PThread | null {\n        return this.mod.PThread || null;\n    }\n\n    /** Instantiate the module */\n    protected abstract instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule>;\n    /** Instantiate the database */\n    public async instantiate(): Promise<this> {\n        // Already opened?\n        if (this._instance != null) {\n            return this;\n        }\n        // Open in progress?\n        if (this._initPromise != null) {\n            await this._initPromise;\n        }\n\n        // Create a promise that we can await\n        this._initPromise = new Promise(resolve => {\n            this._initPromiseResolver = resolve;\n        });\n\n        // Initialize duckdb\n        this._instance = await this.instantiateImpl({\n            print: console.log.bind(console),\n            printErr: console.log.bind(console),\n            onRuntimeInitialized: this._initPromiseResolver,\n        });\n\n        // Wait for onRuntimeInitialized\n        await this._initPromise;\n        this._initPromise = null;\n\n        return this;\n    }\n    /** Open a database at a path */\n    public open(config: DuckDBConfig): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_open', ['string'], [JSON.stringify(config)]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n\n    /** Reset the database */\n    public reset(): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_reset', [], []);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n\n    /** Get the version */\n    public getVersion(): string {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_get_version', [], []);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const version = readString(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return version;\n    }\n    /** Get the feature flags */\n    public getFeatureFlags(): number {\n        return this.mod.ccall('duckdb_web_get_feature_flags', 'number', [], []);\n    }\n\n    /** Tokenize a script */\n    public tokenize(text: string): ScriptTokens {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_tokenize', ['string'], [text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = readString(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return JSON.parse(res) as ScriptTokens;\n    }\n\n    /** Connect to database */\n    public connect(): DuckDBConnection {\n        const conn = this.mod.ccall('duckdb_web_connect', 'number', [], []);\n        return new DuckDBConnection(this, conn);\n    }\n    /** Disconnect from database */\n    public disconnect(conn: number): void {\n        this.mod.ccall('duckdb_web_disconnect', null, ['number'], [conn]);\n    }\n\n    /** Send a query and return the full result */\n    public runQuery(conn: number, text: string): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_run', ['number', 'string'], [conn, text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n    /** Send a query asynchronously. Results have to be fetched with `fetchQueryResults` */\n    public sendQuery(conn: number, text: string): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_send', ['number', 'string'], [conn, text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n    /** Fetch query results */\n    public fetchQueryResults(conn: number): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_fetch_results', ['number'], [conn]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n\n    /** Prepare a statement and return its identifier */\n    public createPrepared(conn: number, text: string): number {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_prepared_create', ['number', 'string'], [conn, text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n        return d;\n    }\n\n    /** Close a prepared statement */\n    public closePrepared(conn: number, statement: number): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_prepared_close', ['number', 'number'], [conn, statement]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n\n    /** Execute a prepared statement and return the full result */\n    public runPrepared(conn: number, statement: number, params: any[]): Uint8Array {\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_prepared_run',\n            ['number', 'number', 'string'],\n            [conn, statement, JSON.stringify(params)],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n\n    /** Execute a prepared statement and stream the result */\n    public sendPrepared(conn: number, statement: number, params: any[]): Uint8Array {\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_prepared_send',\n            ['number', 'number', 'string'],\n            [conn, statement, JSON.stringify(params)],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n\n    /** Insert record batches from an arrow ipc stream */\n    public insertArrowFromIPCStream(conn: number, buffer: Uint8Array, options?: ArrowInsertOptions): void {\n        // Store buffer\n        const bufferPtr = this.mod._malloc(buffer.length);\n        const bufferOfs = this.mod.HEAPU8.subarray(bufferPtr, bufferPtr + buffer.length);\n        bufferOfs.set(buffer);\n        const optJSON = options ? JSON.stringify(options) : '';\n\n        // Call wasm function\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_insert_arrow_from_ipc_stream',\n            ['number', 'number', 'number', 'string'],\n            [conn, bufferPtr, buffer.length, optJSON],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n\n    /** Insert csv from path */\n    public insertCSVFromPath(conn: number, path: string, options: CSVInsertOptions): void {\n        // Stringify options\n        if (options.columns !== undefined) {\n            options.columnsFlat = [];\n            for (const k in options.columns) {\n                options.columnsFlat.push(flattenArrowField(k, options.columns[k]));\n            }\n        }\n        const opt = { ...options } as any;\n        opt.columns = opt.columnsFlat;\n        delete opt.columnsFlat;\n        const optJSON = JSON.stringify(opt);\n\n        // Call wasm function\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_insert_csv_from_path',\n            ['number', 'string', 'string'],\n            [conn, path, optJSON],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n    /** Insert json from path */\n    public insertJSONFromPath(conn: number, path: string, options: JSONInsertOptions): void {\n        // Stringify options\n        if (options.columns !== undefined) {\n            options.columnsFlat = [];\n            for (const k in options.columns) {\n                options.columnsFlat.push(flattenArrowField(k, options.columns[k]));\n            }\n        }\n        const opt = { ...options } as any;\n        opt.columns = opt.columnsFlat;\n        delete opt.columnsFlat;\n        const optJSON = JSON.stringify(opt);\n\n        // Call wasm function\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_insert_json_from_path',\n            ['number', 'string', 'string'],\n            [conn, path, optJSON],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n    /** Glob file infos */\n    public globFiles(path: string): WebFile[] {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_glob_file_infos', ['string'], [path]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const infoStr = readString(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        const info = JSON.parse(infoStr) as WebFile[];\n        if (info == null) {\n            return [];\n        }\n        return info;\n    }\n    /** Register a file object URL */\n    public registerFileURL(name: string, url?: string): void {\n        if (url === undefined) {\n            url = name;\n        }\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_register_file_url', ['string', 'string'], [name, url]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Register file text */\n    public registerFileText(name: string, text: string): void {\n        const buffer = TEXT_ENCODER.encode(text);\n        this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file buffer */\n    public registerFileBuffer(name: string, buffer: Uint8Array): void {\n        const ptr = this.mod._malloc(buffer.length);\n        const dst = this.mod.HEAPU8.subarray(ptr, ptr + buffer.length);\n        dst.set(buffer);\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_fs_register_file_buffer',\n            ['string', 'number', 'number'],\n            [name, ptr, buffer.length],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Register a file object URL */\n    public registerFileHandle<HandleType>(name: string, handle: HandleType): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_register_file_url', ['string', 'string'], [name, name]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n        globalThis.DUCKDB_RUNTIME._files = (globalThis.DUCKDB_RUNTIME._files || new Map()).set(name, handle);\n        if (this.pthread) {\n            for (const worker of this.pthread.runningWorkers) {\n                worker.postMessage({\n                    cmd: 'registerFileHandle',\n                    fileName: name,\n                    fileHandle: handle,\n                });\n            }\n            for (const worker of this.pthread.unusedWorkers) {\n                worker.postMessage({\n                    cmd: 'dropFileHandle',\n                    fileName: name,\n                });\n            }\n        }\n    }\n    /** Drop file */\n    public dropFile(name: string): boolean {\n        return this.mod.ccall('duckdb_web_fs_drop_file', 'boolean', ['string'], [name]);\n    }\n    /** Drop files */\n    public dropFiles(): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_drop_files', [], []);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Flush all files */\n    public flushFiles(): void {\n        this.mod.ccall('duckdb_web_flush_files', null, [], []);\n    }\n    /** Write a file to a path */\n    public copyFileToPath(name: string, path: string): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_copy_file_to_path', ['string', 'string'], [name, path]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Write a file to a buffer */\n    public copyFileToBuffer(name: string): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_copy_file_to_buffer', ['string'], [name]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const buffer = this.mod.HEAPU8.subarray(d, d + n);\n        const copy = new Uint8Array(buffer.length);\n        copy.set(buffer);\n        dropResponseBuffers(this.mod);\n        return copy;\n    }\n\n    /** Enable tracking of file statistics */\n    public collectFileStatistics(file: string, enable: boolean): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_collect_file_stats', ['string', 'boolean'], [file, enable]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n    /** Export file statistics */\n    public exportFileStatistics(file: string): FileStatistics {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_export_file_stats', ['string'], [file]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        return new FileStatistics(this.mod.HEAPU8.subarray(d, d + n));\n    }\n}\n", "import * as arrow from 'apache-arrow';\nimport { FlatArrowField } from '../flat_arrow';\n\nexport enum JSONTableShape {\n    ROW_ARRAY = 'row-array',\n    COLUMN_OBJECT = 'column-object',\n}\n\nexport interface JSONInsertOptions {\n    name: string;\n    schema?: string;\n    create?: boolean;\n    shape?: JSONTableShape;\n    columns?: {\n        [key: string]: arrow.DataType;\n    };\n    columnsFlat?: FlatArrowField[];\n}\n\nexport interface CSVInsertOptions {\n    name: string;\n    schema?: string;\n    create?: boolean;\n    header?: boolean;\n    delimiter?: string;\n    quote?: string;\n    escape?: string;\n    skip?: number;\n    detect?: boolean;\n    dateFormat?: string;\n    timestampFormat?: string;\n    columns?: {\n        [key: string]: arrow.DataType;\n    };\n    columnsFlat?: FlatArrowField[];\n}\n\nexport interface ArrowInsertOptions {\n    name: string;\n    schema?: string;\n    create?: boolean;\n}\n", "export enum InsertMode {\n    APPEND,\n    IMPORT,\n}\n\nexport interface InsertOptions {\n    mode: InsertMode;\n}\n", "\nvar DuckDB = (function() {\n  var _scriptDir = import.meta.url;\n  \n  return (\nfunction(DuckDB) {\n  DuckDB = DuckDB || {};\n\nvar Module=typeof DuckDB!==\"undefined\"?DuckDB:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=typeof window===\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";var ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;var toLog=e;err(\"exiting due to exception: \"+toLog)}var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};readAsync=function readAsync(filename,onload,onerror){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);nodeFS[\"readFile\"](filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",function(reason){throw reason});quit_=function(status,toThrow){if(keepRuntimeAlive()){process[\"exitCode\"]=status;throw toThrow}logExceptionOnExit(toThrow);process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);function onDone(ret){if(stack!==0)stackRestore(stack);return convertReturnValue(ret)}ret=onDone(ret);return ret}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){{if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}var wasmBinaryFile;if(Module[\"locateFile\"]){wasmBinaryFile=\"duckdb_wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}}else{wasmBinaryFile=new URL(\"duckdb_wasm.wasm\",import.meta.url).toString()}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"Ae\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"De\"];addOnInit(Module[\"asm\"][\"Be\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function handleException(e){if(e instanceof ExitStatus||e==\"unwind\"){return EXITSTATUS}quit_(1,e)}function ___cxa_allocate_exception(size){return _malloc(size+16)+16}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-16;this.set_type=function(type){HEAP32[this.ptr+4>>2]=type};this.get_type=function(){return HEAP32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1}}function CatchInfo(ptr){this.free=function(){_free(this.ptr);this.ptr=0};this.set_base_ptr=function(basePtr){HEAP32[this.ptr>>2]=basePtr};this.get_base_ptr=function(){return HEAP32[this.ptr>>2]};this.set_adjusted_ptr=function(adjustedPtr){HEAP32[this.ptr+4>>2]=adjustedPtr};this.get_adjusted_ptr_addr=function(){return this.ptr+4};this.get_adjusted_ptr=function(){return HEAP32[this.ptr+4>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_exception_info().get_type());if(isPointer){return HEAP32[this.get_base_ptr()>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.get_base_ptr()};this.get_exception_info=function(){return new ExceptionInfo(this.get_base_ptr())};if(ptr===undefined){this.ptr=_malloc(8);this.set_adjusted_ptr(0)}else{this.ptr=ptr}}var exceptionCaught=[];function exception_addRef(info){info.add_ref()}var uncaughtExceptionCount=0;function ___cxa_begin_catch(ptr){var catchInfo=new CatchInfo(ptr);var info=catchInfo.get_exception_info();if(!info.get_caught()){info.set_caught(true);uncaughtExceptionCount--}info.set_rethrown(false);exceptionCaught.push(catchInfo);exception_addRef(info);return catchInfo.get_exception_ptr()}var exceptionLast=0;function ___cxa_free_exception(ptr){return _free(new ExceptionInfo(ptr).ptr)}function exception_decRef(info){if(info.release_ref()&&!info.get_rethrown()){var destructor=info.get_destructor();if(destructor){wasmTable.get(destructor)(info.excPtr)}___cxa_free_exception(info.excPtr)}}function ___cxa_end_catch(){_setThrew(0);var catchInfo=exceptionCaught.pop();exception_decRef(catchInfo.get_exception_info());catchInfo.free();exceptionLast=0}function ___resumeException(catchInfoPtr){var catchInfo=new CatchInfo(catchInfoPtr);var ptr=catchInfo.get_base_ptr();if(!exceptionLast){exceptionLast=ptr}catchInfo.free();throw ptr}function ___cxa_find_matching_catch_2(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_find_matching_catch_3(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_find_matching_catch_4(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_find_matching_catch_5(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_rethrow(){var catchInfo=exceptionCaught.pop();if(!catchInfo){abort(\"no exception to throw\")}var info=catchInfo.get_exception_info();var ptr=catchInfo.get_base_ptr();if(!info.get_rethrown()){exceptionCaught.push(catchInfo);info.set_rethrown(true);info.set_caught(false);uncaughtExceptionCount++}else{catchInfo.free()}exceptionLast=ptr;throw ptr}function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function ___cxa_uncaught_exceptions(){return uncaughtExceptionCount}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_access(path,amode){path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_fstat64(fd,buf){}function ___sys_ftruncate64(fd,zero,low,high){}function ___sys_getdents64(fd,dirp,count){}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_madvise1(addr,length,advice){return 0}function ___sys_mkdir(path,mode){path=SYSCALLS.getStr(path);return SYSCALLS.doMkdir(path,mode)}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs}function ___sys_rename(old_path,new_path){}function ___sys_rmdir(path){}function ___sys_stat64(path,buf){}function ___sys_unlink(path){}function __dlopen_js(filename,flag){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function __dlsym_js(handle,symbol){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _abort(){abort(\"\")}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else _emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now()}else{setErrNo(28);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _duckdb_web_fs_directory_create(path,pathLen){return globalThis.DUCKDB_RUNTIME.createDirectory(Module,path,pathLen)}function _duckdb_web_fs_directory_exists(path,pathLen){return globalThis.DUCKDB_RUNTIME.checkDirectory(Module,path,pathLen)}function _duckdb_web_fs_directory_list_files(path,pathLen){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(Module,path,pathLen)}function _duckdb_web_fs_directory_remove(path,pathLen){return globalThis.DUCKDB_RUNTIME.removeDirectory(Module,path,pathLen)}function _duckdb_web_fs_file_close(fileId){return globalThis.DUCKDB_RUNTIME.closeFile(Module,fileId)}function _duckdb_web_fs_file_exists(path,pathLen){return globalThis.DUCKDB_RUNTIME.checkFile(Module,path,pathLen)}function _duckdb_web_fs_file_get_last_modified_time(fileId){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(Module,fileId)}function _duckdb_web_fs_file_move(from,fromLen,to,toLen){return globalThis.DUCKDB_RUNTIME.moveFile(Module,from,fromLen,to,toLen)}function _duckdb_web_fs_file_open(fileId){return globalThis.DUCKDB_RUNTIME.openFile(Module,fileId)}function _duckdb_web_fs_file_read(fileId,buf,size,location){return globalThis.DUCKDB_RUNTIME.readFile(Module,fileId,buf,size,location)}function _duckdb_web_fs_file_truncate(fileId,newSize){return globalThis.DUCKDB_RUNTIME.truncateFile(Module,fileId,newSize)}function _duckdb_web_fs_file_write(fileId,buf,size,location){return globalThis.DUCKDB_RUNTIME.writeFile(Module,fileId,buf,size,location)}function _duckdb_web_fs_glob(path,pathLen){return globalThis.DUCKDB_RUNTIME.glob(Module,path,pathLen)}function _duckdb_web_test_platform_feature(feature){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(Module,feature)}function _emscripten_get_heap_max(){return 2147483648}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){return 0}function _fd_fdstat_get(fd,pbuf){var type=fd==1||fd==2?2:abort();HEAP8[pbuf>>0]=type;return 0}function _fd_pread(fd,iov,iovcnt,offset_low,offset_high,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt,offset_low);HEAP32[pnum>>2]=num;return 0}function _fd_pwrite(fd,iov,iovcnt,offset_low,offset_high,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt,offset_low);HEAP32[pnum>>2]=num;return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_sync(fd){var stream=SYSCALLS.getStreamFromFD(fd);if(stream.stream_ops&&stream.stream_ops.fsync){return-stream.stream_ops.fsync(stream)}return 0}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _getTempRet0(){return getTempRet0()}function getRandomDevice(){if(typeof crypto===\"object\"&&typeof crypto[\"getRandomValues\"]===\"function\"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require(\"crypto\");return function(){return crypto_module[\"randomBytes\"](1)[0]}}catch(e){}}return function(){abort(\"randomDevice\")}}function _getentropy(buffer,size){if(!_getentropy.randomDevice){_getentropy.randomDevice=getRandomDevice()}for(var i=0;i<size;i++){HEAP8[buffer+i>>0]=_getentropy.randomDevice()}return 0}function _llvm_eh_typeid_for(type){return type}function _setTempRet0(val){setTempRet0(val)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={\"i\":___cxa_allocate_exception,\"A\":___cxa_begin_catch,\"G\":___cxa_end_catch,\"b\":___cxa_find_matching_catch_2,\"n\":___cxa_find_matching_catch_3,\"I\":___cxa_find_matching_catch_4,\"pa\":___cxa_find_matching_catch_5,\"j\":___cxa_free_exception,\"ua\":___cxa_rethrow,\"u\":___cxa_throw,\"E\":___cxa_uncaught_exceptions,\"c\":___resumeException,\"Ga\":___sys_access,\"ea\":___sys_fcntl64,\"Ia\":___sys_fstat64,\"Ha\":___sys_ftruncate64,\"Ea\":___sys_getdents64,\"ia\":___sys_getpid,\"Na\":___sys_ioctl,\"Aa\":___sys_madvise1,\"Fa\":___sys_mkdir,\"sa\":___sys_open,\"Ca\":___sys_rename,\"ja\":___sys_rmdir,\"la\":___sys_stat64,\"ka\":___sys_unlink,\"La\":__dlopen_js,\"Ka\":__dlsym_js,\"ga\":_abort,\"qa\":_clock_gettime,\"xe\":_duckdb_web_fs_directory_create,\"ye\":_duckdb_web_fs_directory_exists,\"ve\":_duckdb_web_fs_directory_list_files,\"we\":_duckdb_web_fs_directory_remove,\"ha\":_duckdb_web_fs_file_close,\"te\":_duckdb_web_fs_file_exists,\"wa\":_duckdb_web_fs_file_get_last_modified_time,\"ue\":_duckdb_web_fs_file_move,\"ya\":_duckdb_web_fs_file_open,\"$\":_duckdb_web_fs_file_read,\"ze\":_duckdb_web_fs_file_truncate,\"xa\":_duckdb_web_fs_file_write,\"se\":_duckdb_web_fs_glob,\"re\":_duckdb_web_test_platform_feature,\"Oa\":_emscripten_get_heap_max,\"Sa\":_emscripten_memcpy_big,\"Kc\":_emscripten_resize_heap,\"Qa\":_environ_get,\"Ra\":_environ_sizes_get,\"Y\":_fd_close,\"Ma\":_fd_fdstat_get,\"mb\":_fd_pread,\"lb\":_fd_pwrite,\"ra\":_fd_read,\"Md\":_fd_seek,\"Da\":_fd_sync,\"da\":_fd_write,\"a\":_getTempRet0,\"Ja\":_getentropy,\"W\":invoke_ddd,\"K\":invoke_di,\"R\":invoke_diii,\"sc\":invoke_diijii,\"X\":invoke_fff,\"M\":invoke_fi,\"va\":invoke_fiii,\"tc\":invoke_fiijii,\"t\":invoke_i,\"U\":invoke_id,\"rb\":invoke_idd,\"Z\":invoke_idiii,\"V\":invoke_if,\"Cb\":invoke_iff,\"e\":invoke_ii,\"aa\":invoke_iid,\"C\":invoke_iidii,\"Hb\":invoke_iidj,\"d\":invoke_iii,\"fa\":invoke_iiid,\"ma\":invoke_iiif,\"h\":invoke_iiii,\"Fb\":invoke_iiiidjj,\"l\":invoke_iiiii,\"ta\":invoke_iiiiid,\"o\":invoke_iiiiii,\"z\":invoke_iiiiiii,\"w\":invoke_iiiiiiii,\"Q\":invoke_iiiiiiiii,\"x\":invoke_iiiiiiiiiii,\"v\":invoke_iiiiiiiiiiii,\"p\":invoke_iiiiiiiiiiiiiiii,\"L\":invoke_iiiiiiiiiiiiiiiiiiii,\"J\":invoke_iiiiiiiiiiiiiiiiiiiii,\"Vb\":invoke_iiiiiiiiiiiij,\"Yb\":invoke_iiiiiiiiiiji,\"$b\":invoke_iiiiiiiij,\"hc\":invoke_iiiiiiiiji,\"Wb\":invoke_iiiiiiij,\"Gb\":invoke_iiiiiiiji,\"rc\":invoke_iiiiiiijii,\"Zb\":invoke_iiiiiij,\"ic\":invoke_iiiiiiji,\"ne\":invoke_iiiiij,\"Kd\":invoke_iiiiiji,\"Dd\":invoke_iiiiijii,\"be\":invoke_iiiiijj,\"Mb\":invoke_iiiiijji,\"cd\":invoke_iiiiijjiijj,\"Ua\":invoke_iiiiijjj,\"Ta\":invoke_iiiiijjji,\"Ud\":invoke_iiiij,\"Jd\":invoke_iiiiji,\"vb\":invoke_iiiijii,\"Sc\":invoke_iiiijiii,\"Td\":invoke_iiiijj,\"yc\":invoke_iiiijji,\"Nb\":invoke_iiiijjii,\"Eb\":invoke_iiiijjj,\"ie\":invoke_iiij,\"Qd\":invoke_iiiji,\"uc\":invoke_iiijii,\"Ed\":invoke_iiijiii,\"od\":invoke_iiijiiii,\"Bd\":invoke_iiijiij,\"hb\":invoke_iiijiijj,\"Rd\":invoke_iiijij,\"ec\":invoke_iiijj,\"Od\":invoke_iiijji,\"bd\":invoke_iiijjii,\"cb\":invoke_iiijjji,\"Va\":invoke_iiijjjii,\"ed\":invoke_iiijjjj,\"Vd\":invoke_iij,\"xd\":invoke_iiji,\"$a\":invoke_iijii,\"tb\":invoke_iijiii,\"Fd\":invoke_iijiiii,\"db\":invoke_iijiijj,\"Db\":invoke_iijiji,\"Pd\":invoke_iijj,\"yd\":invoke_iijji,\"ad\":invoke_iijjii,\"Ad\":invoke_iijjiii,\"zd\":invoke_iijjiiii,\"ud\":invoke_iijjijj,\"dc\":invoke_iijjjj,\"Tb\":invoke_ij,\"ge\":invoke_iji,\"_d\":invoke_ijj,\"jc\":invoke_ijji,\"Zd\":invoke_ijjiii,\"Ld\":invoke_j,\"mc\":invoke_jd,\"lc\":invoke_jf,\"fe\":invoke_ji,\"$d\":invoke_jii,\"Id\":invoke_jiii,\"qe\":invoke_jiiii,\"Ac\":invoke_jiiiii,\"kc\":invoke_jiiiiii,\"Xb\":invoke_jiiiiiii,\"zc\":invoke_jiiiiiijii,\"pc\":invoke_jiiiiijiiii,\"Pc\":invoke_jiiiij,\"sb\":invoke_jiiiiji,\"vc\":invoke_jiiiijii,\"qc\":invoke_jiiiijiiiiiiii,\"ld\":invoke_jiiij,\"xc\":invoke_jiiijii,\"oc\":invoke_jiiijiii,\"xb\":invoke_jiiijj,\"gd\":invoke_jiiijji,\"Sb\":invoke_jiij,\"id\":invoke_jiiji,\"Yc\":invoke_jiijii,\"Jc\":invoke_jiijiiiii,\"Ic\":invoke_jiijiijiii,\"Gc\":invoke_jiijijii,\"Hc\":invoke_jiijjiii,\"md\":invoke_jij,\"Ab\":invoke_jiji,\"Vc\":invoke_jijiii,\"Wa\":invoke_jijiiii,\"bc\":invoke_jijijjij,\"jb\":invoke_jijj,\"Tc\":invoke_jijjij,\"nc\":invoke_jj,\"Pb\":invoke_jjj,\"s\":invoke_v,\"k\":invoke_vi,\"B\":invoke_vid,\"ba\":invoke_vidi,\"ob\":invoke_vidiijj,\"D\":invoke_vif,\"ca\":invoke_vifi,\"pb\":invoke_vifiijj,\"f\":invoke_vii,\"T\":invoke_viid,\"P\":invoke_viidii,\"fc\":invoke_viif,\"g\":invoke_viii,\"m\":invoke_viiii,\"Ba\":invoke_viiiidiiii,\"q\":invoke_viiiii,\"r\":invoke_viiiiii,\"na\":invoke_viiiiiidiii,\"y\":invoke_viiiiiii,\"O\":invoke_viiiiiiii,\"N\":invoke_viiiiiiiii,\"S\":invoke_viiiiiiiiii,\"za\":invoke_viiiiiiiiiii,\"oa\":invoke_viiiiiiiiiiiii,\"_\":invoke_viiiiiiiiiiiiiii,\"wd\":invoke_viiiiiij,\"nb\":invoke_viiiiij,\"dd\":invoke_viiiiiji,\"Ub\":invoke_viiiiijiii,\"wc\":invoke_viiiiijiiii,\"gc\":invoke_viiiiijj,\"Ib\":invoke_viiiiijji,\"gb\":invoke_viiiiijjji,\"le\":invoke_viiiij,\"Sd\":invoke_viiiiji,\"ub\":invoke_viiiijii,\"ab\":invoke_viiiijiii,\"sd\":invoke_viiiijiiii,\"td\":invoke_viiiijiiiii,\"Qb\":invoke_viiiijiiiiiiii,\"pd\":invoke_viiiijj,\"Kb\":invoke_viiiijji,\"Jb\":invoke_viiiijjii,\"Lc\":invoke_viiiijjjj,\"ke\":invoke_viiij,\"qd\":invoke_viiiji,\"vd\":invoke_viiijii,\"Rc\":invoke_viiijiii,\"Dc\":invoke_viiijiiiijjj,\"yb\":invoke_viiijij,\"zb\":invoke_viiijijiji,\"eb\":invoke_viiijijjj,\"ee\":invoke_viiijj,\"nd\":invoke_viiijji,\"Lb\":invoke_viiijjii,\"Bc\":invoke_viiijjiij,\"Oc\":invoke_viiijjij,\"je\":invoke_viiijjj,\"bb\":invoke_viiijjjji,\"oe\":invoke_viij,\"Xd\":invoke_viiji,\"Yd\":invoke_viijii,\"Cd\":invoke_viijiii,\"wb\":invoke_viijiiii,\"Xc\":invoke_viijiiiii,\"Fc\":invoke_viijiiiiij,\"Ec\":invoke_viijiiiijj,\"Wc\":invoke_viijiiij,\"fb\":invoke_viijiijj,\"hd\":invoke_viijiijji,\"$c\":invoke_viijij,\"Xa\":invoke_viijiji,\"Cc\":invoke_viijijiiiijjj,\"ib\":invoke_viijijj,\"pe\":invoke_viijj,\"Nd\":invoke_viijji,\"Zc\":invoke_viijjii,\"Mc\":invoke_viijjij,\"ce\":invoke_viijjj,\"_b\":invoke_viijjji,\"me\":invoke_vij,\"ae\":invoke_viji,\"_c\":invoke_vijii,\"Hd\":invoke_vijiii,\"Gd\":invoke_vijiiii,\"Uc\":invoke_vijiiiji,\"qb\":invoke_vijiijj,\"fd\":invoke_vijij,\"cc\":invoke_vijijiiiijjj,\"he\":invoke_vijijj,\"_a\":invoke_vijijjiiiii,\"Nc\":invoke_vijijjiij,\"kb\":invoke_vijijjji,\"Wd\":invoke_vijj,\"Qc\":invoke_vijji,\"Ya\":invoke_vijjiiii,\"Za\":invoke_vijjiiiii,\"ac\":invoke_vijjij,\"de\":invoke_vijjj,\"kd\":invoke_vijjji,\"Ob\":invoke_vjii,\"Rb\":invoke_vjiiii,\"Bb\":invoke_vjiiiji,\"rd\":invoke_vjjii,\"jd\":invoke_vjjijij,\"H\":_llvm_eh_typeid_for,\"F\":_setTempRet0,\"Pa\":_strftime_l};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"Be\"]).apply(null,arguments)};var _main=Module[\"_main\"]=function(){return(_main=Module[\"_main\"]=Module[\"asm\"][\"Ce\"]).apply(null,arguments)};var _duckdb_web_fs_glob_add_path=Module[\"_duckdb_web_fs_glob_add_path\"]=function(){return(_duckdb_web_fs_glob_add_path=Module[\"_duckdb_web_fs_glob_add_path\"]=Module[\"asm\"][\"Ee\"]).apply(null,arguments)};var _duckdb_web_clear_response=Module[\"_duckdb_web_clear_response\"]=function(){return(_duckdb_web_clear_response=Module[\"_duckdb_web_clear_response\"]=Module[\"asm\"][\"Fe\"]).apply(null,arguments)};var _duckdb_web_fail_with=Module[\"_duckdb_web_fail_with\"]=function(){return(_duckdb_web_fail_with=Module[\"_duckdb_web_fail_with\"]=Module[\"asm\"][\"Ge\"]).apply(null,arguments)};var _duckdb_web_reset=Module[\"_duckdb_web_reset\"]=function(){return(_duckdb_web_reset=Module[\"_duckdb_web_reset\"]=Module[\"asm\"][\"He\"]).apply(null,arguments)};var _duckdb_web_connect=Module[\"_duckdb_web_connect\"]=function(){return(_duckdb_web_connect=Module[\"_duckdb_web_connect\"]=Module[\"asm\"][\"Ie\"]).apply(null,arguments)};var _duckdb_web_disconnect=Module[\"_duckdb_web_disconnect\"]=function(){return(_duckdb_web_disconnect=Module[\"_duckdb_web_disconnect\"]=Module[\"asm\"][\"Je\"]).apply(null,arguments)};var _duckdb_web_flush_files=Module[\"_duckdb_web_flush_files\"]=function(){return(_duckdb_web_flush_files=Module[\"_duckdb_web_flush_files\"]=Module[\"asm\"][\"Ke\"]).apply(null,arguments)};var _duckdb_web_flush_file=Module[\"_duckdb_web_flush_file\"]=function(){return(_duckdb_web_flush_file=Module[\"_duckdb_web_flush_file\"]=Module[\"asm\"][\"Le\"]).apply(null,arguments)};var _duckdb_web_open=Module[\"_duckdb_web_open\"]=function(){return(_duckdb_web_open=Module[\"_duckdb_web_open\"]=Module[\"asm\"][\"Me\"]).apply(null,arguments)};var _duckdb_web_collect_file_stats=Module[\"_duckdb_web_collect_file_stats\"]=function(){return(_duckdb_web_collect_file_stats=Module[\"_duckdb_web_collect_file_stats\"]=Module[\"asm\"][\"Ne\"]).apply(null,arguments)};var _duckdb_web_export_file_stats=Module[\"_duckdb_web_export_file_stats\"]=function(){return(_duckdb_web_export_file_stats=Module[\"_duckdb_web_export_file_stats\"]=Module[\"asm\"][\"Oe\"]).apply(null,arguments)};var _duckdb_web_fs_drop_file=Module[\"_duckdb_web_fs_drop_file\"]=function(){return(_duckdb_web_fs_drop_file=Module[\"_duckdb_web_fs_drop_file\"]=Module[\"asm\"][\"Pe\"]).apply(null,arguments)};var _duckdb_web_fs_drop_files=Module[\"_duckdb_web_fs_drop_files\"]=function(){return(_duckdb_web_fs_drop_files=Module[\"_duckdb_web_fs_drop_files\"]=Module[\"asm\"][\"Qe\"]).apply(null,arguments)};var _duckdb_web_fs_glob_file_infos=Module[\"_duckdb_web_fs_glob_file_infos\"]=function(){return(_duckdb_web_fs_glob_file_infos=Module[\"_duckdb_web_fs_glob_file_infos\"]=Module[\"asm\"][\"Re\"]).apply(null,arguments)};var _duckdb_web_fs_get_file_info_by_id=Module[\"_duckdb_web_fs_get_file_info_by_id\"]=function(){return(_duckdb_web_fs_get_file_info_by_id=Module[\"_duckdb_web_fs_get_file_info_by_id\"]=Module[\"asm\"][\"Se\"]).apply(null,arguments)};var _duckdb_web_fs_get_file_info_by_name=Module[\"_duckdb_web_fs_get_file_info_by_name\"]=function(){return(_duckdb_web_fs_get_file_info_by_name=Module[\"_duckdb_web_fs_get_file_info_by_name\"]=Module[\"asm\"][\"Te\"]).apply(null,arguments)};var _duckdb_web_fs_set_file_descriptor=Module[\"_duckdb_web_fs_set_file_descriptor\"]=function(){return(_duckdb_web_fs_set_file_descriptor=Module[\"_duckdb_web_fs_set_file_descriptor\"]=Module[\"asm\"][\"Ue\"]).apply(null,arguments)};var _duckdb_web_fs_register_file_url=Module[\"_duckdb_web_fs_register_file_url\"]=function(){return(_duckdb_web_fs_register_file_url=Module[\"_duckdb_web_fs_register_file_url\"]=Module[\"asm\"][\"Ve\"]).apply(null,arguments)};var _duckdb_web_fs_register_file_buffer=Module[\"_duckdb_web_fs_register_file_buffer\"]=function(){return(_duckdb_web_fs_register_file_buffer=Module[\"_duckdb_web_fs_register_file_buffer\"]=Module[\"asm\"][\"We\"]).apply(null,arguments)};var _duckdb_web_copy_file_to_buffer=Module[\"_duckdb_web_copy_file_to_buffer\"]=function(){return(_duckdb_web_copy_file_to_buffer=Module[\"_duckdb_web_copy_file_to_buffer\"]=Module[\"asm\"][\"Xe\"]).apply(null,arguments)};var _duckdb_web_copy_file_to_path=Module[\"_duckdb_web_copy_file_to_path\"]=function(){return(_duckdb_web_copy_file_to_path=Module[\"_duckdb_web_copy_file_to_path\"]=Module[\"asm\"][\"Ye\"]).apply(null,arguments)};var _duckdb_web_get_version=Module[\"_duckdb_web_get_version\"]=function(){return(_duckdb_web_get_version=Module[\"_duckdb_web_get_version\"]=Module[\"asm\"][\"Ze\"]).apply(null,arguments)};var _duckdb_web_get_feature_flags=Module[\"_duckdb_web_get_feature_flags\"]=function(){return(_duckdb_web_get_feature_flags=Module[\"_duckdb_web_get_feature_flags\"]=Module[\"asm\"][\"_e\"]).apply(null,arguments)};var _duckdb_web_tokenize=Module[\"_duckdb_web_tokenize\"]=function(){return(_duckdb_web_tokenize=Module[\"_duckdb_web_tokenize\"]=Module[\"asm\"][\"$e\"]).apply(null,arguments)};var _duckdb_web_prepared_create=Module[\"_duckdb_web_prepared_create\"]=function(){return(_duckdb_web_prepared_create=Module[\"_duckdb_web_prepared_create\"]=Module[\"asm\"][\"af\"]).apply(null,arguments)};var _duckdb_web_prepared_close=Module[\"_duckdb_web_prepared_close\"]=function(){return(_duckdb_web_prepared_close=Module[\"_duckdb_web_prepared_close\"]=Module[\"asm\"][\"bf\"]).apply(null,arguments)};var _duckdb_web_prepared_run=Module[\"_duckdb_web_prepared_run\"]=function(){return(_duckdb_web_prepared_run=Module[\"_duckdb_web_prepared_run\"]=Module[\"asm\"][\"cf\"]).apply(null,arguments)};var _duckdb_web_prepared_send=Module[\"_duckdb_web_prepared_send\"]=function(){return(_duckdb_web_prepared_send=Module[\"_duckdb_web_prepared_send\"]=Module[\"asm\"][\"df\"]).apply(null,arguments)};var _duckdb_web_query_run=Module[\"_duckdb_web_query_run\"]=function(){return(_duckdb_web_query_run=Module[\"_duckdb_web_query_run\"]=Module[\"asm\"][\"ef\"]).apply(null,arguments)};var _duckdb_web_query_send=Module[\"_duckdb_web_query_send\"]=function(){return(_duckdb_web_query_send=Module[\"_duckdb_web_query_send\"]=Module[\"asm\"][\"ff\"]).apply(null,arguments)};var _duckdb_web_query_fetch_results=Module[\"_duckdb_web_query_fetch_results\"]=function(){return(_duckdb_web_query_fetch_results=Module[\"_duckdb_web_query_fetch_results\"]=Module[\"asm\"][\"gf\"]).apply(null,arguments)};var _duckdb_web_insert_arrow_from_ipc_stream=Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"]=function(){return(_duckdb_web_insert_arrow_from_ipc_stream=Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"]=Module[\"asm\"][\"hf\"]).apply(null,arguments)};var _duckdb_web_insert_csv_from_path=Module[\"_duckdb_web_insert_csv_from_path\"]=function(){return(_duckdb_web_insert_csv_from_path=Module[\"_duckdb_web_insert_csv_from_path\"]=Module[\"asm\"][\"jf\"]).apply(null,arguments)};var _duckdb_web_insert_json_from_path=Module[\"_duckdb_web_insert_json_from_path\"]=function(){return(_duckdb_web_insert_json_from_path=Module[\"_duckdb_web_insert_json_from_path\"]=Module[\"asm\"][\"kf\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"lf\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"mf\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"nf\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"of\"]).apply(null,arguments)};var _setThrew=Module[\"_setThrew\"]=function(){return(_setThrew=Module[\"_setThrew\"]=Module[\"asm\"][\"pf\"]).apply(null,arguments)};var ___cxa_can_catch=Module[\"___cxa_can_catch\"]=function(){return(___cxa_can_catch=Module[\"___cxa_can_catch\"]=Module[\"asm\"][\"qf\"]).apply(null,arguments)};var ___cxa_is_pointer_type=Module[\"___cxa_is_pointer_type\"]=function(){return(___cxa_is_pointer_type=Module[\"___cxa_is_pointer_type\"]=Module[\"asm\"][\"rf\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"sf\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"tf\"]).apply(null,arguments)};var dynCall_viiij=Module[\"dynCall_viiij\"]=function(){return(dynCall_viiij=Module[\"dynCall_viiij\"]=Module[\"asm\"][\"uf\"]).apply(null,arguments)};var dynCall_viiijjj=Module[\"dynCall_viiijjj\"]=function(){return(dynCall_viiijjj=Module[\"dynCall_viiijjj\"]=Module[\"asm\"][\"vf\"]).apply(null,arguments)};var dynCall_iiij=Module[\"dynCall_iiij\"]=function(){return(dynCall_iiij=Module[\"dynCall_iiij\"]=Module[\"asm\"][\"wf\"]).apply(null,arguments)};var dynCall_vijijj=Module[\"dynCall_vijijj\"]=function(){return(dynCall_vijijj=Module[\"dynCall_vijijj\"]=Module[\"asm\"][\"xf\"]).apply(null,arguments)};var dynCall_iji=Module[\"dynCall_iji\"]=function(){return(dynCall_iji=Module[\"dynCall_iji\"]=Module[\"asm\"][\"yf\"]).apply(null,arguments)};var dynCall_vij=Module[\"dynCall_vij\"]=function(){return(dynCall_vij=Module[\"dynCall_vij\"]=Module[\"asm\"][\"zf\"]).apply(null,arguments)};var dynCall_viijj=Module[\"dynCall_viijj\"]=function(){return(dynCall_viijj=Module[\"dynCall_viijj\"]=Module[\"asm\"][\"Af\"]).apply(null,arguments)};var dynCall_ji=Module[\"dynCall_ji\"]=function(){return(dynCall_ji=Module[\"dynCall_ji\"]=Module[\"asm\"][\"Bf\"]).apply(null,arguments)};var dynCall_viiijj=Module[\"dynCall_viiijj\"]=function(){return(dynCall_viiijj=Module[\"dynCall_viiijj\"]=Module[\"asm\"][\"Cf\"]).apply(null,arguments)};var dynCall_vijjj=Module[\"dynCall_vijjj\"]=function(){return(dynCall_vijjj=Module[\"dynCall_vijjj\"]=Module[\"asm\"][\"Df\"]).apply(null,arguments)};var dynCall_jii=Module[\"dynCall_jii\"]=function(){return(dynCall_jii=Module[\"dynCall_jii\"]=Module[\"asm\"][\"Ef\"]).apply(null,arguments)};var dynCall_jiiii=Module[\"dynCall_jiiii\"]=function(){return(dynCall_jiiii=Module[\"dynCall_jiiii\"]=Module[\"asm\"][\"Ff\"]).apply(null,arguments)};var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=function(){return(dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=Module[\"asm\"][\"Gf\"]).apply(null,arguments)};var dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=function(){return(dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=Module[\"asm\"][\"Hf\"]).apply(null,arguments)};var dynCall_viijii=Module[\"dynCall_viijii\"]=function(){return(dynCall_viijii=Module[\"dynCall_viijii\"]=Module[\"asm\"][\"If\"]).apply(null,arguments)};var dynCall_viiji=Module[\"dynCall_viiji\"]=function(){return(dynCall_viiji=Module[\"dynCall_viiji\"]=Module[\"asm\"][\"Jf\"]).apply(null,arguments)};var dynCall_vijj=Module[\"dynCall_vijj\"]=function(){return(dynCall_vijj=Module[\"dynCall_vijj\"]=Module[\"asm\"][\"Kf\"]).apply(null,arguments)};var dynCall_viji=Module[\"dynCall_viji\"]=function(){return(dynCall_viji=Module[\"dynCall_viji\"]=Module[\"asm\"][\"Lf\"]).apply(null,arguments)};var dynCall_iij=Module[\"dynCall_iij\"]=function(){return(dynCall_iij=Module[\"dynCall_iij\"]=Module[\"asm\"][\"Mf\"]).apply(null,arguments)};var dynCall_viij=Module[\"dynCall_viij\"]=function(){return(dynCall_viij=Module[\"dynCall_viij\"]=Module[\"asm\"][\"Nf\"]).apply(null,arguments)};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){return(dynCall_jiji=Module[\"dynCall_jiji\"]=Module[\"asm\"][\"Of\"]).apply(null,arguments)};var dynCall_viiiij=Module[\"dynCall_viiiij\"]=function(){return(dynCall_viiiij=Module[\"dynCall_viiiij\"]=Module[\"asm\"][\"Pf\"]).apply(null,arguments)};var dynCall_iiiij=Module[\"dynCall_iiiij\"]=function(){return(dynCall_iiiij=Module[\"dynCall_iiiij\"]=Module[\"asm\"][\"Qf\"]).apply(null,arguments)};var dynCall_iiiiiji=Module[\"dynCall_iiiiiji\"]=function(){return(dynCall_iiiiiji=Module[\"dynCall_iiiiiji\"]=Module[\"asm\"][\"Rf\"]).apply(null,arguments)};var dynCall_iiiji=Module[\"dynCall_iiiji\"]=function(){return(dynCall_iiiji=Module[\"dynCall_iiiji\"]=Module[\"asm\"][\"Sf\"]).apply(null,arguments)};var dynCall_iiiiji=Module[\"dynCall_iiiiji\"]=function(){return(dynCall_iiiiji=Module[\"dynCall_iiiiji\"]=Module[\"asm\"][\"Tf\"]).apply(null,arguments)};var dynCall_jiii=Module[\"dynCall_jiii\"]=function(){return(dynCall_jiii=Module[\"dynCall_jiii\"]=Module[\"asm\"][\"Uf\"]).apply(null,arguments)};var dynCall_jij=Module[\"dynCall_jij\"]=function(){return(dynCall_jij=Module[\"dynCall_jij\"]=Module[\"asm\"][\"Vf\"]).apply(null,arguments)};var dynCall_j=Module[\"dynCall_j\"]=function(){return(dynCall_j=Module[\"dynCall_j\"]=Module[\"asm\"][\"Wf\"]).apply(null,arguments)};var dynCall_viijij=Module[\"dynCall_viijij\"]=function(){return(dynCall_viijij=Module[\"dynCall_viijij\"]=Module[\"asm\"][\"Xf\"]).apply(null,arguments)};var dynCall_iijjijj=Module[\"dynCall_iijjijj\"]=function(){return(dynCall_iijjijj=Module[\"dynCall_iijjijj\"]=Module[\"asm\"][\"Yf\"]).apply(null,arguments)};var dynCall_viiiijiiiii=Module[\"dynCall_viiiijiiiii\"]=function(){return(dynCall_viiiijiiiii=Module[\"dynCall_viiiijiiiii\"]=Module[\"asm\"][\"Zf\"]).apply(null,arguments)};var dynCall_viiiijiiii=Module[\"dynCall_viiiijiiii\"]=function(){return(dynCall_viiiijiiii=Module[\"dynCall_viiiijiiii\"]=Module[\"asm\"][\"_f\"]).apply(null,arguments)};var dynCall_viiijii=Module[\"dynCall_viiijii\"]=function(){return(dynCall_viiijii=Module[\"dynCall_viiijii\"]=Module[\"asm\"][\"$f\"]).apply(null,arguments)};var dynCall_viiiiiij=Module[\"dynCall_viiiiiij\"]=function(){return(dynCall_viiiiiij=Module[\"dynCall_viiiiiij\"]=Module[\"asm\"][\"ag\"]).apply(null,arguments)};var dynCall_iiijiii=Module[\"dynCall_iiijiii\"]=function(){return(dynCall_iiijiii=Module[\"dynCall_iiijiii\"]=Module[\"asm\"][\"bg\"]).apply(null,arguments)};var dynCall_iiiiijii=Module[\"dynCall_iiiiijii\"]=function(){return(dynCall_iiiiijii=Module[\"dynCall_iiiiijii\"]=Module[\"asm\"][\"cg\"]).apply(null,arguments)};var dynCall_viijiii=Module[\"dynCall_viijiii\"]=function(){return(dynCall_viijiii=Module[\"dynCall_viijiii\"]=Module[\"asm\"][\"dg\"]).apply(null,arguments)};var dynCall_iiijiij=Module[\"dynCall_iiijiij\"]=function(){return(dynCall_iiijiij=Module[\"dynCall_iiijiij\"]=Module[\"asm\"][\"eg\"]).apply(null,arguments)};var dynCall_vijiii=Module[\"dynCall_vijiii\"]=function(){return(dynCall_vijiii=Module[\"dynCall_vijiii\"]=Module[\"asm\"][\"fg\"]).apply(null,arguments)};var dynCall_iijjiii=Module[\"dynCall_iijjiii\"]=function(){return(dynCall_iijjiii=Module[\"dynCall_iijjiii\"]=Module[\"asm\"][\"gg\"]).apply(null,arguments)};var dynCall_iijjiiii=Module[\"dynCall_iijjiiii\"]=function(){return(dynCall_iijjiiii=Module[\"dynCall_iijjiiii\"]=Module[\"asm\"][\"hg\"]).apply(null,arguments)};var dynCall_iiji=Module[\"dynCall_iiji\"]=function(){return(dynCall_iiji=Module[\"dynCall_iiji\"]=Module[\"asm\"][\"ig\"]).apply(null,arguments)};var dynCall_iijji=Module[\"dynCall_iijji\"]=function(){return(dynCall_iijji=Module[\"dynCall_iijji\"]=Module[\"asm\"][\"jg\"]).apply(null,arguments)};var dynCall_vijiiii=Module[\"dynCall_vijiiii\"]=function(){return(dynCall_vijiiii=Module[\"dynCall_vijiiii\"]=Module[\"asm\"][\"kg\"]).apply(null,arguments)};var dynCall_iijiiii=Module[\"dynCall_iijiiii\"]=function(){return(dynCall_iijiiii=Module[\"dynCall_iijiiii\"]=Module[\"asm\"][\"lg\"]).apply(null,arguments)};var dynCall_vijij=Module[\"dynCall_vijij\"]=function(){return(dynCall_vijij=Module[\"dynCall_vijij\"]=Module[\"asm\"][\"mg\"]).apply(null,arguments)};var dynCall_iiijjjj=Module[\"dynCall_iiijjjj\"]=function(){return(dynCall_iiijjjj=Module[\"dynCall_iiijjjj\"]=Module[\"asm\"][\"ng\"]).apply(null,arguments)};var dynCall_iiijiiii=Module[\"dynCall_iiijiiii\"]=function(){return(dynCall_iiijiiii=Module[\"dynCall_iiijiiii\"]=Module[\"asm\"][\"og\"]).apply(null,arguments)};var dynCall_jiiij=Module[\"dynCall_jiiij\"]=function(){return(dynCall_jiiij=Module[\"dynCall_jiiij\"]=Module[\"asm\"][\"pg\"]).apply(null,arguments)};var dynCall_iiiiijjiijj=Module[\"dynCall_iiiiijjiijj\"]=function(){return(dynCall_iiiiijjiijj=Module[\"dynCall_iiiiijjiijj\"]=Module[\"asm\"][\"qg\"]).apply(null,arguments)};var dynCall_viijiijji=Module[\"dynCall_viijiijji\"]=function(){return(dynCall_viijiijji=Module[\"dynCall_viijiijji\"]=Module[\"asm\"][\"rg\"]).apply(null,arguments)};var dynCall_vjjijij=Module[\"dynCall_vjjijij\"]=function(){return(dynCall_vjjijij=Module[\"dynCall_vjjijij\"]=Module[\"asm\"][\"sg\"]).apply(null,arguments)};var dynCall_vijjji=Module[\"dynCall_vijjji\"]=function(){return(dynCall_vijjji=Module[\"dynCall_vijjji\"]=Module[\"asm\"][\"tg\"]).apply(null,arguments)};var dynCall_vjjii=Module[\"dynCall_vjjii\"]=function(){return(dynCall_vjjii=Module[\"dynCall_vjjii\"]=Module[\"asm\"][\"ug\"]).apply(null,arguments)};var dynCall_viiiiiji=Module[\"dynCall_viiiiiji\"]=function(){return(dynCall_viiiiiji=Module[\"dynCall_viiiiiji\"]=Module[\"asm\"][\"vg\"]).apply(null,arguments)};var dynCall_jiiijji=Module[\"dynCall_jiiijji\"]=function(){return(dynCall_jiiijji=Module[\"dynCall_jiiijji\"]=Module[\"asm\"][\"wg\"]).apply(null,arguments)};var dynCall_iijj=Module[\"dynCall_iijj\"]=function(){return(dynCall_iijj=Module[\"dynCall_iijj\"]=Module[\"asm\"][\"xg\"]).apply(null,arguments)};var dynCall_iiijjii=Module[\"dynCall_iiijjii\"]=function(){return(dynCall_iiijjii=Module[\"dynCall_iiijjii\"]=Module[\"asm\"][\"yg\"]).apply(null,arguments)};var dynCall_iijjii=Module[\"dynCall_iijjii\"]=function(){return(dynCall_iijjii=Module[\"dynCall_iijjii\"]=Module[\"asm\"][\"zg\"]).apply(null,arguments)};var dynCall_vijii=Module[\"dynCall_vijii\"]=function(){return(dynCall_vijii=Module[\"dynCall_vijii\"]=Module[\"asm\"][\"Ag\"]).apply(null,arguments)};var dynCall_viijjii=Module[\"dynCall_viijjii\"]=function(){return(dynCall_viijjii=Module[\"dynCall_viijjii\"]=Module[\"asm\"][\"Bg\"]).apply(null,arguments)};var dynCall_viiiijj=Module[\"dynCall_viiiijj\"]=function(){return(dynCall_viiiijj=Module[\"dynCall_viiiijj\"]=Module[\"asm\"][\"Cg\"]).apply(null,arguments)};var dynCall_jijjij=Module[\"dynCall_jijjij\"]=function(){return(dynCall_jijjij=Module[\"dynCall_jijjij\"]=Module[\"asm\"][\"Dg\"]).apply(null,arguments)};var dynCall_jiijii=Module[\"dynCall_jiijii\"]=function(){return(dynCall_jiijii=Module[\"dynCall_jiijii\"]=Module[\"asm\"][\"Eg\"]).apply(null,arguments)};var dynCall_jijiii=Module[\"dynCall_jijiii\"]=function(){return(dynCall_jijiii=Module[\"dynCall_jijiii\"]=Module[\"asm\"][\"Fg\"]).apply(null,arguments)};var dynCall_viijiiiii=Module[\"dynCall_viijiiiii\"]=function(){return(dynCall_viijiiiii=Module[\"dynCall_viijiiiii\"]=Module[\"asm\"][\"Gg\"]).apply(null,arguments)};var dynCall_viijiiij=Module[\"dynCall_viijiiij\"]=function(){return(dynCall_viijiiij=Module[\"dynCall_viijiiij\"]=Module[\"asm\"][\"Hg\"]).apply(null,arguments)};var dynCall_vijiiiji=Module[\"dynCall_vijiiiji\"]=function(){return(dynCall_vijiiiji=Module[\"dynCall_vijiiiji\"]=Module[\"asm\"][\"Ig\"]).apply(null,arguments)};var dynCall_jiiji=Module[\"dynCall_jiiji\"]=function(){return(dynCall_jiiji=Module[\"dynCall_jiiji\"]=Module[\"asm\"][\"Jg\"]).apply(null,arguments)};var dynCall_viiijij=Module[\"dynCall_viiijij\"]=function(){return(dynCall_viiijij=Module[\"dynCall_viiijij\"]=Module[\"asm\"][\"Kg\"]).apply(null,arguments)};var dynCall_viijiijj=Module[\"dynCall_viijiijj\"]=function(){return(dynCall_viijiijj=Module[\"dynCall_viijiijj\"]=Module[\"asm\"][\"Lg\"]).apply(null,arguments)};var dynCall_viiiiijj=Module[\"dynCall_viiiiijj\"]=function(){return(dynCall_viiiiijj=Module[\"dynCall_viiiiijj\"]=Module[\"asm\"][\"Mg\"]).apply(null,arguments)};var dynCall_viiijji=Module[\"dynCall_viiijji\"]=function(){return(dynCall_viiijji=Module[\"dynCall_viiijji\"]=Module[\"asm\"][\"Ng\"]).apply(null,arguments)};var dynCall_viiiji=Module[\"dynCall_viiiji\"]=function(){return(dynCall_viiiji=Module[\"dynCall_viiiji\"]=Module[\"asm\"][\"Og\"]).apply(null,arguments)};var dynCall_iiiijiii=Module[\"dynCall_iiiijiii\"]=function(){return(dynCall_iiiijiii=Module[\"dynCall_iiiijiii\"]=Module[\"asm\"][\"Pg\"]).apply(null,arguments)};var dynCall_iiijij=Module[\"dynCall_iiijij\"]=function(){return(dynCall_iiijij=Module[\"dynCall_iiijij\"]=Module[\"asm\"][\"Qg\"]).apply(null,arguments)};var dynCall_iiijji=Module[\"dynCall_iiijji\"]=function(){return(dynCall_iiijji=Module[\"dynCall_iiijji\"]=Module[\"asm\"][\"Rg\"]).apply(null,arguments)};var dynCall_viijji=Module[\"dynCall_viijji\"]=function(){return(dynCall_viijji=Module[\"dynCall_viijji\"]=Module[\"asm\"][\"Sg\"]).apply(null,arguments)};var dynCall_iiiijj=Module[\"dynCall_iiiijj\"]=function(){return(dynCall_iiiijj=Module[\"dynCall_iiiijj\"]=Module[\"asm\"][\"Tg\"]).apply(null,arguments)};var dynCall_viiijiii=Module[\"dynCall_viiijiii\"]=function(){return(dynCall_viiijiii=Module[\"dynCall_viiijiii\"]=Module[\"asm\"][\"Ug\"]).apply(null,arguments)};var dynCall_vijji=Module[\"dynCall_vijji\"]=function(){return(dynCall_vijji=Module[\"dynCall_vijji\"]=Module[\"asm\"][\"Vg\"]).apply(null,arguments)};var dynCall_jiiiij=Module[\"dynCall_jiiiij\"]=function(){return(dynCall_jiiiij=Module[\"dynCall_jiiiij\"]=Module[\"asm\"][\"Wg\"]).apply(null,arguments)};var dynCall_jiijiiiii=Module[\"dynCall_jiijiiiii\"]=function(){return(dynCall_jiijiiiii=Module[\"dynCall_jiijiiiii\"]=Module[\"asm\"][\"Xg\"]).apply(null,arguments)};var dynCall_jiijiijiii=Module[\"dynCall_jiijiijiii\"]=function(){return(dynCall_jiijiijiii=Module[\"dynCall_jiijiijiii\"]=Module[\"asm\"][\"Yg\"]).apply(null,arguments)};var dynCall_jiijjiii=Module[\"dynCall_jiijjiii\"]=function(){return(dynCall_jiijjiii=Module[\"dynCall_jiijjiii\"]=Module[\"asm\"][\"Zg\"]).apply(null,arguments)};var dynCall_jiijijii=Module[\"dynCall_jiijijii\"]=function(){return(dynCall_jiijijii=Module[\"dynCall_jiijijii\"]=Module[\"asm\"][\"_g\"]).apply(null,arguments)};var dynCall_viiijjij=Module[\"dynCall_viiijjij\"]=function(){return(dynCall_viiijjij=Module[\"dynCall_viiijjij\"]=Module[\"asm\"][\"$g\"]).apply(null,arguments)};var dynCall_vijijjiij=Module[\"dynCall_vijijjiij\"]=function(){return(dynCall_vijijjiij=Module[\"dynCall_vijijjiij\"]=Module[\"asm\"][\"ah\"]).apply(null,arguments)};var dynCall_viijjij=Module[\"dynCall_viijjij\"]=function(){return(dynCall_viijjij=Module[\"dynCall_viijjij\"]=Module[\"asm\"][\"bh\"]).apply(null,arguments)};var dynCall_viiijjiij=Module[\"dynCall_viiijjiij\"]=function(){return(dynCall_viiijjiij=Module[\"dynCall_viiijjiij\"]=Module[\"asm\"][\"ch\"]).apply(null,arguments)};var dynCall_viiiijjjj=Module[\"dynCall_viiiijjjj\"]=function(){return(dynCall_viiiijjjj=Module[\"dynCall_viiiijjjj\"]=Module[\"asm\"][\"dh\"]).apply(null,arguments)};var dynCall_viijiiiiij=Module[\"dynCall_viijiiiiij\"]=function(){return(dynCall_viijiiiiij=Module[\"dynCall_viijiiiiij\"]=Module[\"asm\"][\"eh\"]).apply(null,arguments)};var dynCall_viijiiiijj=Module[\"dynCall_viijiiiijj\"]=function(){return(dynCall_viijiiiijj=Module[\"dynCall_viijiiiijj\"]=Module[\"asm\"][\"fh\"]).apply(null,arguments)};var dynCall_viiijiiiijjj=Module[\"dynCall_viiijiiiijjj\"]=function(){return(dynCall_viiijiiiijjj=Module[\"dynCall_viiijiiiijjj\"]=Module[\"asm\"][\"gh\"]).apply(null,arguments)};var dynCall_viijijiiiijjj=Module[\"dynCall_viijijiiiijjj\"]=function(){return(dynCall_viijijiiiijjj=Module[\"dynCall_viijijiiiijjj\"]=Module[\"asm\"][\"hh\"]).apply(null,arguments)};var dynCall_jiiijii=Module[\"dynCall_jiiijii\"]=function(){return(dynCall_jiiijii=Module[\"dynCall_jiiijii\"]=Module[\"asm\"][\"ih\"]).apply(null,arguments)};var dynCall_viiiiijiiii=Module[\"dynCall_viiiiijiiii\"]=function(){return(dynCall_viiiiijiiii=Module[\"dynCall_viiiiijiiii\"]=Module[\"asm\"][\"jh\"]).apply(null,arguments)};var dynCall_iiijii=Module[\"dynCall_iiijii\"]=function(){return(dynCall_iiijii=Module[\"dynCall_iiijii\"]=Module[\"asm\"][\"kh\"]).apply(null,arguments)};var dynCall_fiijii=Module[\"dynCall_fiijii\"]=function(){return(dynCall_fiijii=Module[\"dynCall_fiijii\"]=Module[\"asm\"][\"lh\"]).apply(null,arguments)};var dynCall_diijii=Module[\"dynCall_diijii\"]=function(){return(dynCall_diijii=Module[\"dynCall_diijii\"]=Module[\"asm\"][\"mh\"]).apply(null,arguments)};var dynCall_iiiiiiijii=Module[\"dynCall_iiiiiiijii\"]=function(){return(dynCall_iiiiiiijii=Module[\"dynCall_iiiiiiijii\"]=Module[\"asm\"][\"nh\"]).apply(null,arguments)};var dynCall_viiiiji=Module[\"dynCall_viiiiji\"]=function(){return(dynCall_viiiiji=Module[\"dynCall_viiiiji\"]=Module[\"asm\"][\"oh\"]).apply(null,arguments)};var dynCall_jiiiijii=Module[\"dynCall_jiiiijii\"]=function(){return(dynCall_jiiiijii=Module[\"dynCall_jiiiijii\"]=Module[\"asm\"][\"ph\"]).apply(null,arguments)};var dynCall_jiiiijiiiiiiii=Module[\"dynCall_jiiiijiiiiiiii\"]=function(){return(dynCall_jiiiijiiiiiiii=Module[\"dynCall_jiiiijiiiiiiii\"]=Module[\"asm\"][\"qh\"]).apply(null,arguments)};var dynCall_jiiiiijiiii=Module[\"dynCall_jiiiiijiiii\"]=function(){return(dynCall_jiiiiijiiii=Module[\"dynCall_jiiiiijiiii\"]=Module[\"asm\"][\"rh\"]).apply(null,arguments)};var dynCall_jiiijiii=Module[\"dynCall_jiiijiii\"]=function(){return(dynCall_jiiijiii=Module[\"dynCall_jiiijiii\"]=Module[\"asm\"][\"sh\"]).apply(null,arguments)};var dynCall_jj=Module[\"dynCall_jj\"]=function(){return(dynCall_jj=Module[\"dynCall_jj\"]=Module[\"asm\"][\"th\"]).apply(null,arguments)};var dynCall_jd=Module[\"dynCall_jd\"]=function(){return(dynCall_jd=Module[\"dynCall_jd\"]=Module[\"asm\"][\"uh\"]).apply(null,arguments)};var dynCall_jf=Module[\"dynCall_jf\"]=function(){return(dynCall_jf=Module[\"dynCall_jf\"]=Module[\"asm\"][\"vh\"]).apply(null,arguments)};var dynCall_iijjjj=Module[\"dynCall_iijjjj\"]=function(){return(dynCall_iijjjj=Module[\"dynCall_iijjjj\"]=Module[\"asm\"][\"wh\"]).apply(null,arguments)};var dynCall_iiijj=Module[\"dynCall_iiijj\"]=function(){return(dynCall_iiijj=Module[\"dynCall_iiijj\"]=Module[\"asm\"][\"xh\"]).apply(null,arguments)};var dynCall_vijijiiiijjj=Module[\"dynCall_vijijiiiijjj\"]=function(){return(dynCall_vijijiiiijjj=Module[\"dynCall_vijijiiiijjj\"]=Module[\"asm\"][\"yh\"]).apply(null,arguments)};var dynCall_iiiiiiji=Module[\"dynCall_iiiiiiji\"]=function(){return(dynCall_iiiiiiji=Module[\"dynCall_iiiiiiji\"]=Module[\"asm\"][\"zh\"]).apply(null,arguments)};var dynCall_iiiiiiiiji=Module[\"dynCall_iiiiiiiiji\"]=function(){return(dynCall_iiiiiiiiji=Module[\"dynCall_iiiiiiiiji\"]=Module[\"asm\"][\"Ah\"]).apply(null,arguments)};var dynCall_jijijjij=Module[\"dynCall_jijijjij\"]=function(){return(dynCall_jijijjij=Module[\"dynCall_jijijjij\"]=Module[\"asm\"][\"Bh\"]).apply(null,arguments)};var dynCall_vijjij=Module[\"dynCall_vijjij\"]=function(){return(dynCall_vijjij=Module[\"dynCall_vijjij\"]=Module[\"asm\"][\"Ch\"]).apply(null,arguments)};var dynCall_viijjj=Module[\"dynCall_viijjj\"]=function(){return(dynCall_viijjj=Module[\"dynCall_viijjj\"]=Module[\"asm\"][\"Dh\"]).apply(null,arguments)};var dynCall_viijjji=Module[\"dynCall_viijjji\"]=function(){return(dynCall_viijjji=Module[\"dynCall_viijjji\"]=Module[\"asm\"][\"Eh\"]).apply(null,arguments)};var dynCall_iiiiiij=Module[\"dynCall_iiiiiij\"]=function(){return(dynCall_iiiiiij=Module[\"dynCall_iiiiiij\"]=Module[\"asm\"][\"Fh\"]).apply(null,arguments)};var dynCall_iiiiiiiiiiji=Module[\"dynCall_iiiiiiiiiiji\"]=function(){return(dynCall_iiiiiiiiiiji=Module[\"dynCall_iiiiiiiiiiji\"]=Module[\"asm\"][\"Gh\"]).apply(null,arguments)};var dynCall_jiiiiiii=Module[\"dynCall_jiiiiiii\"]=function(){return(dynCall_jiiiiiii=Module[\"dynCall_jiiiiiii\"]=Module[\"asm\"][\"Hh\"]).apply(null,arguments)};var dynCall_jijj=Module[\"dynCall_jijj\"]=function(){return(dynCall_jijj=Module[\"dynCall_jijj\"]=Module[\"asm\"][\"Ih\"]).apply(null,arguments)};var dynCall_viiiijiiiiiiii=Module[\"dynCall_viiiijiiiiiiii\"]=function(){return(dynCall_viiiijiiiiiiii=Module[\"dynCall_viiiijiiiiiiii\"]=Module[\"asm\"][\"Jh\"]).apply(null,arguments)};var dynCall_ij=Module[\"dynCall_ij\"]=function(){return(dynCall_ij=Module[\"dynCall_ij\"]=Module[\"asm\"][\"Kh\"]).apply(null,arguments)};var dynCall_jjj=Module[\"dynCall_jjj\"]=function(){return(dynCall_jjj=Module[\"dynCall_jjj\"]=Module[\"asm\"][\"Lh\"]).apply(null,arguments)};var dynCall_vjii=Module[\"dynCall_vjii\"]=function(){return(dynCall_vjii=Module[\"dynCall_vjii\"]=Module[\"asm\"][\"Mh\"]).apply(null,arguments)};var dynCall_vjiiii=Module[\"dynCall_vjiiii\"]=function(){return(dynCall_vjiiii=Module[\"dynCall_vjiiii\"]=Module[\"asm\"][\"Nh\"]).apply(null,arguments)};var dynCall_viiiiijiii=Module[\"dynCall_viiiiijiii\"]=function(){return(dynCall_viiiiijiii=Module[\"dynCall_viiiiijiii\"]=Module[\"asm\"][\"Oh\"]).apply(null,arguments)};var dynCall_jiij=Module[\"dynCall_jiij\"]=function(){return(dynCall_jiij=Module[\"dynCall_jiij\"]=Module[\"asm\"][\"Ph\"]).apply(null,arguments)};var dynCall_iiiijjii=Module[\"dynCall_iiiijjii\"]=function(){return(dynCall_iiiijjii=Module[\"dynCall_iiiijjii\"]=Module[\"asm\"][\"Qh\"]).apply(null,arguments)};var dynCall_iiiiijji=Module[\"dynCall_iiiiijji\"]=function(){return(dynCall_iiiiijji=Module[\"dynCall_iiiiijji\"]=Module[\"asm\"][\"Rh\"]).apply(null,arguments)};var dynCall_viiijjii=Module[\"dynCall_viiijjii\"]=function(){return(dynCall_viiijjii=Module[\"dynCall_viiijjii\"]=Module[\"asm\"][\"Sh\"]).apply(null,arguments)};var dynCall_viiiijji=Module[\"dynCall_viiiijji\"]=function(){return(dynCall_viiiijji=Module[\"dynCall_viiiijji\"]=Module[\"asm\"][\"Th\"]).apply(null,arguments)};var dynCall_viiiijjii=Module[\"dynCall_viiiijjii\"]=function(){return(dynCall_viiiijjii=Module[\"dynCall_viiiijjii\"]=Module[\"asm\"][\"Uh\"]).apply(null,arguments)};var dynCall_viiiiijji=Module[\"dynCall_viiiiijji\"]=function(){return(dynCall_viiiiijji=Module[\"dynCall_viiiiijji\"]=Module[\"asm\"][\"Vh\"]).apply(null,arguments)};var dynCall_iidj=Module[\"dynCall_iidj\"]=function(){return(dynCall_iidj=Module[\"dynCall_iidj\"]=Module[\"asm\"][\"Wh\"]).apply(null,arguments)};var dynCall_ijji=Module[\"dynCall_ijji\"]=function(){return(dynCall_ijji=Module[\"dynCall_ijji\"]=Module[\"asm\"][\"Xh\"]).apply(null,arguments)};var dynCall_iiiiiiiij=Module[\"dynCall_iiiiiiiij\"]=function(){return(dynCall_iiiiiiiij=Module[\"dynCall_iiiiiiiij\"]=Module[\"asm\"][\"Yh\"]).apply(null,arguments)};var dynCall_iiiiiiij=Module[\"dynCall_iiiiiiij\"]=function(){return(dynCall_iiiiiiij=Module[\"dynCall_iiiiiiij\"]=Module[\"asm\"][\"Zh\"]).apply(null,arguments)};var dynCall_iiiiiiiiiiiij=Module[\"dynCall_iiiiiiiiiiiij\"]=function(){return(dynCall_iiiiiiiiiiiij=Module[\"dynCall_iiiiiiiiiiiij\"]=Module[\"asm\"][\"_h\"]).apply(null,arguments)};var dynCall_iiiiiiiji=Module[\"dynCall_iiiiiiiji\"]=function(){return(dynCall_iiiiiiiji=Module[\"dynCall_iiiiiiiji\"]=Module[\"asm\"][\"$h\"]).apply(null,arguments)};var dynCall_iiiidjj=Module[\"dynCall_iiiidjj\"]=function(){return(dynCall_iiiidjj=Module[\"dynCall_iiiidjj\"]=Module[\"asm\"][\"ai\"]).apply(null,arguments)};var dynCall_iiiijjj=Module[\"dynCall_iiiijjj\"]=function(){return(dynCall_iiiijjj=Module[\"dynCall_iiiijjj\"]=Module[\"asm\"][\"bi\"]).apply(null,arguments)};var dynCall_jiiiii=Module[\"dynCall_jiiiii\"]=function(){return(dynCall_jiiiii=Module[\"dynCall_jiiiii\"]=Module[\"asm\"][\"ci\"]).apply(null,arguments)};var dynCall_jiiiiiijii=Module[\"dynCall_jiiiiiijii\"]=function(){return(dynCall_jiiiiiijii=Module[\"dynCall_jiiiiiijii\"]=Module[\"asm\"][\"di\"]).apply(null,arguments)};var dynCall_iiiijji=Module[\"dynCall_iiiijji\"]=function(){return(dynCall_iiiijji=Module[\"dynCall_iiiijji\"]=Module[\"asm\"][\"ei\"]).apply(null,arguments)};var dynCall_jiiiiii=Module[\"dynCall_jiiiiii\"]=function(){return(dynCall_jiiiiii=Module[\"dynCall_jiiiiii\"]=Module[\"asm\"][\"fi\"]).apply(null,arguments)};var dynCall_iijiji=Module[\"dynCall_iijiji\"]=function(){return(dynCall_iijiji=Module[\"dynCall_iijiji\"]=Module[\"asm\"][\"gi\"]).apply(null,arguments)};var dynCall_vjiiiji=Module[\"dynCall_vjiiiji\"]=function(){return(dynCall_vjiiiji=Module[\"dynCall_vjiiiji\"]=Module[\"asm\"][\"hi\"]).apply(null,arguments)};var dynCall_viiijijiji=Module[\"dynCall_viiijijiji\"]=function(){return(dynCall_viiijijiji=Module[\"dynCall_viiijijiji\"]=Module[\"asm\"][\"ii\"]).apply(null,arguments)};var dynCall_jiiijj=Module[\"dynCall_jiiijj\"]=function(){return(dynCall_jiiijj=Module[\"dynCall_jiiijj\"]=Module[\"asm\"][\"ji\"]).apply(null,arguments)};var dynCall_viijiiii=Module[\"dynCall_viijiiii\"]=function(){return(dynCall_viijiiii=Module[\"dynCall_viijiiii\"]=Module[\"asm\"][\"ki\"]).apply(null,arguments)};var dynCall_iiiijii=Module[\"dynCall_iiiijii\"]=function(){return(dynCall_iiiijii=Module[\"dynCall_iiiijii\"]=Module[\"asm\"][\"li\"]).apply(null,arguments)};var dynCall_viiiijii=Module[\"dynCall_viiiijii\"]=function(){return(dynCall_viiiijii=Module[\"dynCall_viiiijii\"]=Module[\"asm\"][\"mi\"]).apply(null,arguments)};var dynCall_iijiii=Module[\"dynCall_iijiii\"]=function(){return(dynCall_iijiii=Module[\"dynCall_iijiii\"]=Module[\"asm\"][\"ni\"]).apply(null,arguments)};var dynCall_jiiiiji=Module[\"dynCall_jiiiiji\"]=function(){return(dynCall_jiiiiji=Module[\"dynCall_jiiiiji\"]=Module[\"asm\"][\"oi\"]).apply(null,arguments)};var dynCall_vijiijj=Module[\"dynCall_vijiijj\"]=function(){return(dynCall_vijiijj=Module[\"dynCall_vijiijj\"]=Module[\"asm\"][\"pi\"]).apply(null,arguments)};var dynCall_vifiijj=Module[\"dynCall_vifiijj\"]=function(){return(dynCall_vifiijj=Module[\"dynCall_vifiijj\"]=Module[\"asm\"][\"qi\"]).apply(null,arguments)};var dynCall_vidiijj=Module[\"dynCall_vidiijj\"]=function(){return(dynCall_vidiijj=Module[\"dynCall_vidiijj\"]=Module[\"asm\"][\"ri\"]).apply(null,arguments)};var dynCall_viiiiij=Module[\"dynCall_viiiiij\"]=function(){return(dynCall_viiiiij=Module[\"dynCall_viiiiij\"]=Module[\"asm\"][\"si\"]).apply(null,arguments)};var dynCall_ijj=Module[\"dynCall_ijj\"]=function(){return(dynCall_ijj=Module[\"dynCall_ijj\"]=Module[\"asm\"][\"ti\"]).apply(null,arguments)};var dynCall_ijjiii=Module[\"dynCall_ijjiii\"]=function(){return(dynCall_ijjiii=Module[\"dynCall_ijjiii\"]=Module[\"asm\"][\"ui\"]).apply(null,arguments)};var dynCall_vijijjji=Module[\"dynCall_vijijjji\"]=function(){return(dynCall_vijijjji=Module[\"dynCall_vijijjji\"]=Module[\"asm\"][\"vi\"]).apply(null,arguments)};var dynCall_viiiiijjji=Module[\"dynCall_viiiiijjji\"]=function(){return(dynCall_viiiiijjji=Module[\"dynCall_viiiiijjji\"]=Module[\"asm\"][\"wi\"]).apply(null,arguments)};var dynCall_viijijj=Module[\"dynCall_viijijj\"]=function(){return(dynCall_viijijj=Module[\"dynCall_viijijj\"]=Module[\"asm\"][\"xi\"]).apply(null,arguments)};var dynCall_iiijiijj=Module[\"dynCall_iiijiijj\"]=function(){return(dynCall_iiijiijj=Module[\"dynCall_iiijiijj\"]=Module[\"asm\"][\"yi\"]).apply(null,arguments)};var dynCall_viiijijjj=Module[\"dynCall_viiijijjj\"]=function(){return(dynCall_viiijijjj=Module[\"dynCall_viiijijjj\"]=Module[\"asm\"][\"zi\"]).apply(null,arguments)};var dynCall_iijiijj=Module[\"dynCall_iijiijj\"]=function(){return(dynCall_iijiijj=Module[\"dynCall_iijiijj\"]=Module[\"asm\"][\"Ai\"]).apply(null,arguments)};var dynCall_viiijjjji=Module[\"dynCall_viiijjjji\"]=function(){return(dynCall_viiijjjji=Module[\"dynCall_viiijjjji\"]=Module[\"asm\"][\"Bi\"]).apply(null,arguments)};var dynCall_viiiijiii=Module[\"dynCall_viiiijiii\"]=function(){return(dynCall_viiiijiii=Module[\"dynCall_viiiijiii\"]=Module[\"asm\"][\"Ci\"]).apply(null,arguments)};var dynCall_iijii=Module[\"dynCall_iijii\"]=function(){return(dynCall_iijii=Module[\"dynCall_iijii\"]=Module[\"asm\"][\"Di\"]).apply(null,arguments)};var dynCall_vijjiiii=Module[\"dynCall_vijjiiii\"]=function(){return(dynCall_vijjiiii=Module[\"dynCall_vijjiiii\"]=Module[\"asm\"][\"Ei\"]).apply(null,arguments)};var dynCall_vijijjiiiii=Module[\"dynCall_vijijjiiiii\"]=function(){return(dynCall_vijijjiiiii=Module[\"dynCall_vijijjiiiii\"]=Module[\"asm\"][\"Fi\"]).apply(null,arguments)};var dynCall_vijjiiiii=Module[\"dynCall_vijjiiiii\"]=function(){return(dynCall_vijjiiiii=Module[\"dynCall_vijjiiiii\"]=Module[\"asm\"][\"Gi\"]).apply(null,arguments)};var dynCall_iiijjji=Module[\"dynCall_iiijjji\"]=function(){return(dynCall_iiijjji=Module[\"dynCall_iiijjji\"]=Module[\"asm\"][\"Hi\"]).apply(null,arguments)};var dynCall_iiiiijjj=Module[\"dynCall_iiiiijjj\"]=function(){return(dynCall_iiiiijjj=Module[\"dynCall_iiiiijjj\"]=Module[\"asm\"][\"Ii\"]).apply(null,arguments)};var dynCall_jijiiii=Module[\"dynCall_jijiiii\"]=function(){return(dynCall_jijiiii=Module[\"dynCall_jijiiii\"]=Module[\"asm\"][\"Ji\"]).apply(null,arguments)};var dynCall_iiijjjii=Module[\"dynCall_iiijjjii\"]=function(){return(dynCall_iiijjjii=Module[\"dynCall_iiijjjii\"]=Module[\"asm\"][\"Ki\"]).apply(null,arguments)};var dynCall_iiiiijjji=Module[\"dynCall_iiiiijjji\"]=function(){return(dynCall_iiiiijjji=Module[\"dynCall_iiiiijjji\"]=Module[\"asm\"][\"Li\"]).apply(null,arguments)};var dynCall_viijiji=Module[\"dynCall_viijiji\"]=function(){return(dynCall_viijiji=Module[\"dynCall_viijiji\"]=Module[\"asm\"][\"Mi\"]).apply(null,arguments)};function invoke_v(index){var sp=stackSave();try{wasmTable.get(index)()}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ii(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_diii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viif(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viid(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iff(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_idd(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_i(index){var sp=stackSave();try{return wasmTable.get(index)()}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_idiii(index,a1,a2,a3,a4){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iidii(index,a1,a2,a3,a4){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viidii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vif(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vid(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_di(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiid(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiid(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vifi(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vidi(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iid(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiidiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fi(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fff(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ddd(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiif(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiidiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_if(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_id(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiiii(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijj(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viijj(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viij(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_viij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiiiij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vij(index,a1,a2,a3){var sp=stackSave();try{dynCall_vij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viiiij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiij(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_viiij(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiij(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iiij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vijijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iji(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iji(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ji(index,a1){var sp=stackSave();try{return dynCall_ji(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiijj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_vijjj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijjj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viji(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_viji(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jii(index,a1,a2){var sp=stackSave();try{return dynCall_jii(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ijj(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_ijj(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ijjiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_ijjiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_viiji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijj(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_vijj(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iij(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiij(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iiiij(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiijj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiiiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiijij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iiiji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijj(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iijj(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiijji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viijji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_j(index){var sp=stackSave();try{return dynCall_j(index)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiiiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiiiji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiii(index,a1,a2,a3){var sp=stackSave();try{return dynCall_jiii(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vijiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_vijiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiijiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viijiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiijiij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iijji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiji(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iiji(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiijii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iijjijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viiiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjjii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vjjii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viiiji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiijji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jij(index,a1,a2,a3){var sp=stackSave();try{return dynCall_jij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiij(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jiiij(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vijjji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjjijij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_vjjijij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jiiji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viijiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vijij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijjiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14){var sp=stackSave();try{return dynCall_iiiiijjiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijjii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viijij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_vijii(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijjii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jiijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jijiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_vijiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijjij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jijjij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vijji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jiiiij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_vijijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_jiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_jiijiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_jiijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_jiijijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viijiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viijiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{dynCall_viiijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17){var sp=stackSave();try{dynCall_viijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viiijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jiiiii(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_jiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiijii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fiijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_fiijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_diijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_diijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14){var sp=stackSave();try{return dynCall_jiiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_jiiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jj(index,a1,a2){var sp=stackSave();try{return dynCall_jj(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jd(index,a1){var sp=stackSave();try{return dynCall_jd(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jf(index,a1){var sp=stackSave();try{return dynCall_jf(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jiiiiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ijji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_ijji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijj(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiijj(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16){var sp=stackSave();try{dynCall_vijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_jijijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vijjij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiiiij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{return dynCall_iiiiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiiiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13){var sp=stackSave();try{return dynCall_iiiiiiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ij(index,a1,a2){var sp=stackSave();try{return dynCall_ij(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiij(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vjiiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14){var sp=stackSave();try{dynCall_viiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jjj(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jjj(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjii(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_vjii(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iidj(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iidj(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiidjj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiidjj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vjiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiji(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiji(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijijiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiijijiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiijij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiijj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiijii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iijiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiiiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_vijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vifiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vifiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vidiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vidiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiiiij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_vijijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijj(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jijj(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiijijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiijjjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iijii(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13){var sp=stackSave();try{dynCall_vijijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_vijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_vijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jijiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiijjjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_iiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}Module[\"ccall\"]=ccall;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}var calledMain=false;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function callMain(args){var entryFunction=Module[\"_main\"];var argc=0;var argv=0;try{var ret=entryFunction(argc,argv);exit(ret,true);return ret}catch(e){return handleException(e)}finally{calledMain=true}}function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();if(shouldRunNow)callMain(args);postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;function exit(status,implicit){EXITSTATUS=status;if(keepRuntimeAlive()){}else{exitRuntime()}procExit(status)}function procExit(code){EXITSTATUS=code;if(!keepRuntimeAlive()){if(Module[\"onExit\"])Module[\"onExit\"](code);ABORT=true}quit_(code,new ExitStatus(code))}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"])shouldRunNow=false;run();\n\n\n  return DuckDB.ready\n}\n);\n})();\nexport default DuckDB;", "import { DuckDBModule } from './duckdb_module';\nimport { DuckDBBindingsBase } from './bindings_base';\nimport { DuckDBRuntime } from './runtime';\nimport { Logger } from '../log';\n\n/** DuckDB bindings for the browser */\nexport abstract class DuckDBBrowserBindings extends DuckDBBindingsBase {\n    /** The path of the wasm module */\n    protected readonly mainModuleURL: string;\n    /** The path of the pthread worker script */\n    protected readonly pthreadWorkerURL: string | null;\n\n    /** Constructor */\n    public constructor(logger: Logger, runtime: DuckDBRuntime, mainModuleURL: string, pthreadWorkerURL: string | null) {\n        super(logger, runtime);\n        this.mainModuleURL = mainModuleURL;\n        this.pthreadWorkerURL = pthreadWorkerURL;\n    }\n\n    /** Locate a file */\n    protected locateFile(path: string, prefix: string): string {\n        if (path.endsWith('.wasm')) {\n            return this.mainModuleURL;\n        }\n        if (path.endsWith('.worker.js')) {\n            if (!this.pthreadWorkerURL) {\n                throw new Error('Missing DuckDB worker URL!');\n            }\n            return this.pthreadWorkerURL!;\n        }\n        throw new Error(`WASM instantiation requested unexpected file: prefix=${prefix} path=${path}`);\n    }\n\n    /** Instantiate the wasm module */\n    protected instantiateWasm(\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        imports: any,\n        success: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\n    ): Emscripten.WebAssemblyExports {\n        globalThis.DUCKDB_RUNTIME = this._runtime;\n        if (WebAssembly.instantiateStreaming) {\n            WebAssembly.instantiateStreaming(fetch(this.mainModuleURL), imports).then(output => {\n                success(output.instance, output.module);\n            });\n        } else {\n            fetch(this.mainModuleURL)\n                .then(resp => resp.arrayBuffer())\n                .then(bytes =>\n                    WebAssembly.instantiate(bytes, imports).then(output => {\n                        success(output.instance, output.module);\n                    }),\n                )\n                .catch(error => {\n                    console.error('Failed to instantiate WASM:', error);\n                });\n        }\n        return [];\n    }\n\n    /// Instantiation must be done by the browser variants\n    protected abstract instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule>;\n}\n", "import DuckDBWasm from './duckdb_wasm.js';\nimport { DuckDBBrowserBindings } from './bindings_browser_base';\nimport { DuckDBModule } from './duckdb_module';\nimport { DuckDBRuntime } from './runtime';\nimport { Logger } from '../log';\n\n/** DuckDB bindings for the browser */\nexport class DuckDB extends DuckDBBrowserBindings {\n    /** Constructor */\n    public constructor(\n        logger: Logger,\n        runtime: DuckDBRuntime,\n        mainModuleURL: string,\n        pthreadWorkerURL: string | null = null,\n    ) {\n        super(logger, runtime, mainModuleURL, pthreadWorkerURL);\n    }\n\n    /** Instantiate the bindings */\n    protected instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule> {\n        return DuckDBWasm({\n            ...moduleOverrides,\n            instantiateWasm: this.instantiateWasm.bind(this),\n            locateFile: this.locateFile.bind(this),\n        });\n    }\n}\n", "import { StatusCode } from '../status';\nimport {\n    DuckDBRuntime,\n    DuckDBFileInfo,\n    callSRet,\n    failWith,\n    dropResponseBuffers,\n    readString,\n    DuckDBDataProtocol,\n} from './runtime';\nimport { DuckDBModule } from '../targets/duckdb-browser-sync-next';\n\nexport const BROWSER_RUNTIME: DuckDBRuntime & {\n    fileInfoCache: Map<number, DuckDBFileInfo>;\n\n    getFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null;\n} = {\n    fileInfoCache: new Map<number, DuckDBFileInfo>(),\n\n    getFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null {\n        try {\n            const cached = BROWSER_RUNTIME.fileInfoCache.get(fileId);\n            if (cached) return cached;\n            const [s, d, n] = callSRet(mod, 'duckdb_web_fs_get_file_info_by_id', ['number'], [fileId]);\n            if (s !== StatusCode.SUCCESS) {\n                return null;\n            }\n            const infoStr = readString(mod, d, n);\n            dropResponseBuffers(mod);\n            const info = JSON.parse(infoStr);\n            if (info == null) {\n                return null;\n            }\n            const file = { ...info, blob: null } as DuckDBFileInfo;\n            BROWSER_RUNTIME.fileInfoCache.set(fileId, file);\n            return file;\n        } catch (e: any) {\n            return null;\n        }\n    },\n\n    testPlatformFeature: (_mod: DuckDBModule, feature: number): boolean => {\n        switch (feature) {\n            case 1:\n                return typeof BigInt64Array !== 'undefined';\n            default:\n                console.warn(`test for unknown feature: ${feature}`);\n                return false;\n        }\n    },\n\n    openFile: (mod: DuckDBModule, fileId: number): number => {\n        try {\n            BROWSER_RUNTIME.fileInfoCache.delete(fileId);\n            const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                // HTTP File\n                case DuckDBDataProtocol.HTTP: {\n                    // Supports ranges?\n                    let error: any | null = null;\n                    try {\n                        // Send a dummy range request querying the first byte of the file\n                        const xhr = new XMLHttpRequest();\n                        xhr.open('HEAD', file.dataUrl!, false);\n                        xhr.setRequestHeader('Range', `bytes=0-`);\n                        xhr.send(null);\n\n                        // Supports range requests\n                        const contentLength = xhr.getResponseHeader('Content-Length');\n                        if (xhr.status == 206 && contentLength !== null) {\n                            const result = mod._malloc(2 * 8);\n                            mod.HEAPF64[(result >> 3) + 0] = +contentLength;\n                            mod.HEAPF64[(result >> 3) + 1] = 0;\n                            return result;\n                        }\n                    } catch (e: any) {\n                        error = e;\n                        console.warn(`HEAD request with range header failed: ${e}`);\n                    }\n\n                    // Try to fallback to full read?\n                    if (file.allowFullHttpReads) {\n                        console.warn(`falling back to full HTTP read for: ${file.dataUrl}`);\n\n                        // Send non-range request\n                        const xhr = new XMLHttpRequest();\n                        xhr.open('GET', file.dataUrl!, false);\n                        xhr.responseType = 'arraybuffer';\n                        xhr.send(null);\n\n                        // Return buffer\n                        if (xhr.status == 200) {\n                            const data = mod._malloc(xhr.response.byteLength);\n                            const src = new Uint8Array(xhr.response, 0, xhr.response.byteLength);\n                            mod.HEAPU8.set(src, data);\n                            const result = mod._malloc(2 * 8);\n                            mod.HEAPF64[(result >> 3) + 0] = xhr.response.byteLength;\n                            mod.HEAPF64[(result >> 3) + 1] = data;\n                            return result;\n                        }\n                    }\n\n                    // Raise error?\n                    if (error != null) {\n                        throw new Error(`Reading file ${file.fileName} failed with error: ${error}`);\n                    }\n                    return 0;\n                }\n                // Native File\n                case DuckDBDataProtocol.NATIVE: {\n                    const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                    if (handle) {\n                        const result = mod._malloc(2 * 8);\n                        mod.HEAPF64[(result >> 3) + 0] = handle.size;\n                        mod.HEAPF64[(result >> 3) + 1] = 0;\n                        return result;\n                    }\n\n                    // Fall back to empty buffered file in the browser\n                    console.warn(`Buffering missing file: ${file.fileName}`);\n                    const result = mod._malloc(2 * 8);\n                    const buffer = mod._malloc(1); // malloc(0) is allowed to return a nullptr\n                    mod.HEAPF64[(result >> 3) + 0] = 1;\n                    mod.HEAPF64[(result >> 3) + 1] = buffer;\n                    return result;\n                }\n            }\n        } catch (e: any) {\n            console.error(e.toString());\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    glob: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = readString(mod, pathPtr, pathLen);\n\n            // Starts with http?\n            // Try a HTTP HEAD request\n            if (path.startsWith('http')) {\n                // Send a dummy range request querying the first byte of the file\n                const xhr = new XMLHttpRequest();\n                xhr.open('HEAD', path!, false);\n                xhr.send(null);\n                if (xhr.status != 200 && xhr.status !== 206) {\n                    failWith(mod, `HEAD request failed: ${path}`);\n                    return;\n                }\n                mod.ccall('duckdb_web_fs_glob_add_path', null, ['string'], [path]);\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    checkFile: (mod: DuckDBModule, pathPtr: number, pathLen: number): boolean => {\n        try {\n            const path = readString(mod, pathPtr, pathLen);\n\n            // Starts with http?\n            // Try a HTTP HEAD request\n            if (path.startsWith('http')) {\n                // Send a dummy range request querying the first byte of the file\n                const xhr = new XMLHttpRequest();\n                xhr.open('HEAD', path!, false);\n                xhr.setRequestHeader('Range', `bytes=0-`);\n                xhr.send(null);\n                let supportsRanges = false;\n                if (xhr.status == 206) {\n                    supportsRanges = true;\n                } else if (xhr.status == 200) {\n                    const header = xhr.getResponseHeader('Accept-Ranges');\n                    supportsRanges = header === 'bytes';\n                } else {\n                    return false;\n                }\n                if (!supportsRanges) {\n                    return false;\n                }\n\n                // HTTP file exists and supports range requests\n                return true;\n            }\n        } catch (e: any) {\n            return false;\n        }\n        return false;\n    },\n    syncFile: (_mod: DuckDBModule, _fileId: number) => {},\n    closeFile: (mod: DuckDBModule, fileId: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        BROWSER_RUNTIME.fileInfoCache.delete(fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.HTTP:\n                break;\n            case DuckDBDataProtocol.NATIVE:\n                // XXX Remove from registry\n                return;\n        }\n    },\n    truncateFile: (mod: DuckDBModule, fileId: number, newSize: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.HTTP:\n                failWith(mod, `Cannot truncate a http file`);\n                return;\n            case DuckDBDataProtocol.NATIVE:\n                failWith(mod, `truncateFile not implemented`);\n                return;\n        }\n        return 0;\n    },\n    readFile(mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) {\n        try {\n            const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                // File reading from BLOB or HTTP MUST be done with range requests.\n                // We have to check in OPEN if such file supports range requests and upgrade to BUFFER if not.\n                case DuckDBDataProtocol.HTTP: {\n                    if (!file.dataUrl) {\n                        throw new Error(`Missing data URL for file ${fileId}`);\n                    }\n                    try {\n                        const xhr = new XMLHttpRequest();\n                        xhr.open('GET', file.dataUrl!, false);\n                        xhr.responseType = 'arraybuffer';\n                        xhr.setRequestHeader('Range', `bytes=${location}-${location + bytes - 1}`);\n                        xhr.send(null);\n                        if (\n                            xhr.status == 206 /* Partial content */ ||\n                            (xhr.status == 200 && bytes == xhr.response.byteLength && location == 0)\n                        ) {\n                            const src = new Uint8Array(xhr.response, 0, Math.min(xhr.response.byteLength, bytes));\n                            mod.HEAPU8.set(src, buf);\n                            return src.byteLength;\n                        } else if (xhr.status == 200) {\n                            throw new Error(\n                                `Range request for ${file.dataUrl} did not return a partial response: ${xhr.status} \"${xhr.statusText}\"`,\n                            );\n                        } else {\n                            throw new Error(\n                                `Range request for ${file.dataUrl} did returned non-success status: ${xhr.status} \"${xhr.statusText}\"`,\n                            );\n                        }\n                    } catch (e) {\n                        throw new Error(`Range request for ${file.dataUrl} failed with error: ${e}\"`);\n                    }\n                }\n                case DuckDBDataProtocol.NATIVE: {\n                    const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                    if (!handle) {\n                        throw new Error(`No handle available for file: ${file.fileName}`);\n                    }\n                    const sliced = handle!.slice(location, location + bytes);\n                    const data = new Uint8Array(new FileReaderSync().readAsArrayBuffer(sliced));\n                    mod.HEAPU8.set(data, buf);\n                    return data.byteLength;\n                }\n            }\n            return 0;\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    writeFile: (mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.HTTP:\n                failWith(mod, 'Cannot write to HTTP file');\n                return 0;\n\n            case DuckDBDataProtocol.NATIVE:\n                failWith(mod, 'writefile not implemented');\n                return 0;\n        }\n        return 0;\n    },\n    getLastFileModificationTime: (mod: DuckDBModule, fileId: number) => {\n        const file = BROWSER_RUNTIME.getFileInfo(mod, fileId);\n        switch (file?.dataProtocol) {\n            case DuckDBDataProtocol.NATIVE: {\n                const handle = BROWSER_RUNTIME._files?.get(file.fileName);\n                if (!handle) {\n                    throw Error(`No handle available for file: ${file.fileName}`);\n                }\n                return 0;\n            }\n\n            case DuckDBDataProtocol.HTTP:\n                return new Date().getTime();\n        }\n        return 0;\n    },\n    checkDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`checkDirectory: ${path}`);\n        return false;\n    },\n    createDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`createDirectory: ${path}`);\n    },\n    removeDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`removeDirectory: ${path}`);\n    },\n    listDirectoryEntries: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        const path = readString(mod, pathPtr, pathLen);\n        console.log(`listDirectoryEntries: ${path}`);\n        return false;\n    },\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number) => {},\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number) => {},\n};\n\nexport default BROWSER_RUNTIME;\n", "import * as arrow from 'apache-arrow';\nimport * as utils from '../utils';\nimport { AsyncDuckDB } from './async_bindings';\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\n\n/** A thin helper to memoize the connection id */\nexport class AsyncDuckDBConnection {\n    /** The async duckdb */\n    protected readonly _bindings: AsyncDuckDB;\n    /** The conn handle */\n    protected readonly _conn: number;\n\n    constructor(bindings: AsyncDuckDB, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Access the database bindings */\n    public get bindings(): AsyncDuckDB {\n        return this._bindings;\n    }\n\n    /** Disconnect from the database */\n    public async close(): Promise<void> {\n        return this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const buffer = await this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a query */\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const header = await this._bindings.sendQuery(this._conn, text);\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n\n    /** Create a prepared statement */\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<AsyncPreparedStatement> {\n        const stmt = await this._bindings.createPrepared(this._conn, text);\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert arrow vectors */\n    public async insertArrowVectors<T extends { [key: string]: arrow.Vector } = any>(\n        children: T,\n        options: ArrowInsertOptions,\n    ): Promise<void> {\n        await this.insertArrowTable(arrow.Table.new(children), options);\n    }\n    /** Insert an arrow table */\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\n        if (table.schema.fields.length == 0) {\n            console.warn(\n                'The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually',\n            );\n        }\n        await this.insertArrowBatches(table.schema, table.chunks, options);\n    }\n    /** Insert record batches */\n    public async insertArrowBatches(\n        schema: arrow.Schema,\n        batches: Iterable<arrow.RecordBatch>,\n        options: ArrowInsertOptions,\n    ): Promise<void> {\n        // Prepare the IPC stream writer\n        const buffer = new utils.IPCBuffer();\n        const writer = new arrow.RecordBatchStreamWriter().reset(buffer, schema);\n\n        // Write all batches to the ipc buffer\n        let first = true;\n        for (const batch of batches) {\n            if (!first) {\n                await this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n            }\n            first = false;\n            writer.write(batch);\n        }\n        writer.finish();\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n\n    /** Insert csv file from path */\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\n    }\n    /** Insert json file from path */\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\n    }\n}\n\n/** An async result stream iterator */\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\n    /** First chunk? */\n    protected _first: boolean;\n    /** Reached end of stream? */\n    protected _depleted: boolean;\n    /** In-flight */\n    protected _inFlight: Promise<Uint8Array> | null;\n\n    constructor(\n        protected readonly db: AsyncDuckDB,\n        protected readonly conn: number,\n        protected readonly header: Uint8Array,\n    ) {\n        this._first = true;\n        this._depleted = false;\n        this._inFlight = null;\n    }\n\n    async next(): Promise<IteratorResult<Uint8Array>> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        let buffer: Uint8Array;\n        if (this._inFlight != null) {\n            buffer = await this._inFlight;\n            this._inFlight = null;\n        } else {\n            buffer = await this.db.fetchQueryResults(this.conn);\n        }\n        this._depleted = buffer.length == 0;\n        if (!this._depleted) {\n            this._inFlight = this.db.fetchQueryResults(this.conn);\n        }\n        return {\n            done: this._depleted,\n            value: buffer,\n        };\n    }\n\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id */\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: AsyncDuckDB;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public async close() {\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n}\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { LogEntryVariant } from '../log';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { WebFile } from '../bindings/web_file';\n\nexport type ConnectionID = number;\nexport type StatementID = number;\n\nexport enum WorkerRequestType {\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\n    CONNECT = 'CONNECT',\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\n    CREATE_PREPARED = 'CREATE_PREPARED',\n    DISCONNECT = 'DISCONNECT',\n    DROP_FILE = 'DROP_FILE',\n    DROP_FILES = 'DROP_FILES',\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\n    FLUSH_FILES = 'FLUSH_FILES',\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\n    GET_VERSION = 'GET_VERSION',\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\n    INSTANTIATE = 'INSTANTIATE',\n    OPEN = 'OPEN',\n    PING = 'PING',\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\n    RESET = 'RESET',\n    RUN_PREPARED = 'RUN_PREPARED',\n    RUN_QUERY = 'RUN_QUERY',\n    SEND_PREPARED = 'SEND_PREPARED',\n    SEND_QUERY = 'SEND_QUERY',\n    TOKENIZE = 'TOKENIZE',\n}\n\nexport enum WorkerResponseType {\n    CONNECTION_INFO = 'CONNECTION_INFO',\n    ERROR = 'ERROR',\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\n    FILE_BUFFER = 'FILE_BUFFER',\n    FILE_INFOS = 'FILE_INFOS',\n    FILE_SIZE = 'FILE_SIZE',\n    FILE_STATISTICS = 'FILE_STATISTICS',\n    LOG = 'LOG',\n    OK = 'OK',\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\n    QUERY_PLAN = 'QUERY_PLAN',\n    QUERY_RESULT = 'QUERY_RESULT',\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\n    QUERY_START = 'QUERY_START',\n    REGISTERED_FILE = 'REGISTERED_FILE',\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\n    SUCCESS = 'SUCCESS',\n    VERSION_STRING = 'VERSION_STRING',\n}\n\nexport type WorkerRequest<T, P> = {\n    readonly messageId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerResponse<T, P> = {\n    readonly messageId: number;\n    readonly requestId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\n\nexport class WorkerTask<T, D, P> {\n    readonly type: T;\n    readonly data: D;\n    promise: Promise<P>;\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\n    promiseRejecter: (value: any) => void = () => {};\n\n    constructor(type: T, data: D) {\n        this.type = type;\n        this.data = data;\n        this.promise = new Promise<P>(\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\n                this.promiseResolver = resolve;\n                this.promiseRejecter = reject;\n            },\n        );\n    }\n}\n\nexport type WorkerRequestVariant =\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\n    | WorkerRequest<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined]\n      >\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\n    | WorkerRequest<WorkerRequestType.PING, null>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string]>\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\n    | WorkerRequest<WorkerRequestType.RESET, null>\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.SEND_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\n\nexport type WorkerResponseVariant =\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\n    | WorkerResponse<WorkerResponseType.ERROR, any>\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\n    | WorkerResponse<WorkerResponseType.OK, null>\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_START, Uint8Array>\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\n\nexport type WorkerTaskVariant =\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, boolean>\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\n    | WorkerTask<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined],\n          null\n      >\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\n    | WorkerTask<WorkerRequestType.PING, null, null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\n    | WorkerTask<WorkerRequestType.RESET, null, null>\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\n", "import {\n    WorkerRequestType,\n    WorkerResponseType,\n    WorkerResponseVariant,\n    WorkerTaskVariant,\n    WorkerTask,\n    ConnectionID,\n    WorkerTaskReturnType,\n} from './worker_request';\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\nimport { Logger } from '../log';\nimport { AsyncDuckDBConnection } from './async_connection';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { flattenArrowField } from '../flat_arrow';\nimport { WebFile } from '../bindings/web_file';\n\nconst TEXT_ENCODER = new TextEncoder();\n\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\n    /** The message handler */\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\n    /** The error handler */\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\n    /** The close handler */\n    protected readonly _onCloseHandler: () => void;\n\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** The worker */\n    protected _worker: Worker | null = null;\n    /** The promise for the worker shutdown */\n    protected _workerShutdownPromise: Promise<null> | null = null;\n    /** Make the worker as terminated */\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\n\n    /** The next message id */\n    protected _nextMessageId = 0;\n    /** The pending requests */\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\n\n    constructor(logger: Logger, worker: Worker | null = null) {\n        this._logger = logger;\n        this._onMessageHandler = this.onMessage.bind(this);\n        this._onErrorHandler = this.onError.bind(this);\n        this._onCloseHandler = this.onClose.bind(this);\n        if (worker != null) this.attach(worker);\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n\n    /** Attach to worker */\n    protected attach(worker: Worker): void {\n        this._worker = worker;\n        this._worker.addEventListener('message', this._onMessageHandler);\n        this._worker.addEventListener('error', this._onErrorHandler);\n        this._worker.addEventListener('close', this._onCloseHandler);\n        this._workerShutdownPromise = new Promise<null>(\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\n                this._workerShutdownResolver = resolve;\n            },\n        );\n    }\n\n    /** Detach from worker */\n    public detach(): void {\n        if (!this._worker) return;\n        this._worker.removeEventListener('message', this._onMessageHandler);\n        this._worker.removeEventListener('error', this._onErrorHandler);\n        this._worker.removeEventListener('close', this._onCloseHandler);\n        this._worker = null;\n        this._workerShutdownResolver(null);\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Kill the worker */\n    public async terminate(): Promise<void> {\n        if (!this._worker) return;\n        this._worker.terminate();\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\n        this._worker = null;\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Post a task */\n    protected async postTask<W extends WorkerTaskVariant>(\n        task: W,\n        transfer: ArrayBuffer[] = [],\n    ): Promise<WorkerTaskReturnType<W>> {\n        if (!this._worker) {\n            console.error('cannot send a message since the worker is not set!');\n            return undefined as any;\n        }\n        const mid = this._nextMessageId++;\n        this._pendingRequests.set(mid, task);\n        this._worker.postMessage({\n            messageId: mid,\n            type: task.type,\n            data: task.data,\n        });\n        return (await task.promise) as WorkerTaskReturnType<W>;\n    }\n\n    /** Received a message */\n    protected onMessage(event: MessageEvent): void {\n        const response = event.data as WorkerResponseVariant;\n\n        // Short-circuit unassociated log entries\n        if (response.type == WorkerResponseType.LOG) {\n            this._logger.log(response.data);\n        }\n\n        // Get associated task\n        const task = this._pendingRequests.get(response.requestId);\n        if (!task) {\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\n            return;\n        }\n        this._pendingRequests.delete(response.requestId);\n\n        // Request failed?\n        if (response.type == WorkerResponseType.ERROR) {\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n            const e = new Error(response.data.message);\n            e.name = response.data.name;\n            e.stack = response.data.stack;\n\n            task.promiseRejecter(e);\n            return;\n        }\n\n        // Otherwise differentiate between the tasks first\n        switch (task.type) {\n            case WorkerRequestType.CLOSE_PREPARED:\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\n            case WorkerRequestType.COPY_FILE_TO_PATH:\n            case WorkerRequestType.DISCONNECT:\n            case WorkerRequestType.DROP_FILES:\n            case WorkerRequestType.FLUSH_FILES:\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\n            case WorkerRequestType.INSTANTIATE:\n            case WorkerRequestType.OPEN:\n            case WorkerRequestType.PING:\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\n            case WorkerRequestType.REGISTER_FILE_URL:\n            case WorkerRequestType.RESET:\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GLOB_FILE_INFOS:\n                if (response.type == WorkerResponseType.FILE_INFOS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_VERSION:\n                if (response.type == WorkerResponseType.VERSION_STRING) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_FEATURE_FLAGS:\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.TOKENIZE:\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.DROP_FILE:\n                if (response.type == WorkerResponseType.SUCCESS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CONNECT:\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.RUN_PREPARED:\n            case WorkerRequestType.RUN_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.SEND_PREPARED:\n            case WorkerRequestType.SEND_QUERY:\n                if (response.type == WorkerResponseType.QUERY_START) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CREATE_PREPARED:\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n        }\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\n    }\n\n    /** Received an error */\n    protected onError(event: ErrorEvent): void {\n        console.error(event);\n        console.error(`error in duckdb worker: ${event.message}`);\n        this._pendingRequests.clear();\n    }\n\n    /** The worker was closed */\n    protected onClose(): void {\n        this._workerShutdownResolver(null);\n        if (this._pendingRequests.size != 0) {\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\n            return;\n        }\n        this._pendingRequests.clear();\n    }\n\n    /** Reset the duckdb */\n    public async reset(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\n        return await this.postTask(task);\n    }\n\n    /** Ping the worker thread */\n    public async ping(): Promise<any> {\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\n        await this.postTask(task);\n    }\n    /** Try to drop a file */\n    public async dropFile(name: string): Promise<boolean> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, boolean>(WorkerRequestType.DROP_FILE, name);\n        return await this.postTask(task);\n    }\n    /** Try to drop files */\n    public async dropFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\n        return await this.postTask(task);\n    }\n    /** Flush all files */\n    public async flushFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\n        return await this.postTask(task);\n    }\n\n    /** Open the database */\n    public async instantiate(mainModuleURL: string, pthreadWorkerURL: string | null = null): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\n            WorkerRequestType.INSTANTIATE,\n            [mainModuleURL, pthreadWorkerURL],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get the version */\n    public async getVersion(): Promise<string> {\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\n        const version = await this.postTask(task);\n        return version;\n    }\n\n    /** Get the feature flags */\n    public async getFeatureFlags(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\n            WorkerRequestType.GET_FEATURE_FLAGS,\n            null,\n        );\n        const feature = await this.postTask(task);\n        return feature;\n    }\n\n    /** Open a new database */\n    public async open(config: DuckDBConfig): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\n        await this.postTask(task);\n    }\n\n    /** Tokenize a script text */\n    public async tokenize(text: string): Promise<ScriptTokens> {\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\n        const tokens = await this.postTask(task);\n        return tokens;\n    }\n\n    /** Connect to the database */\n    public async connectInternal(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\n        return await this.postTask(task);\n    }\n\n    /** Connect to the database */\n    public async connect(): Promise<AsyncDuckDBConnection> {\n        const cid = await this.connectInternal();\n        return new AsyncDuckDBConnection(this, cid);\n    }\n\n    /** Disconnect from the database */\n    public async disconnect(conn: ConnectionID): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\n            WorkerRequestType.DISCONNECT,\n            conn,\n        );\n        await this.postTask(task);\n    }\n\n    /** Run a query */\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.RUN_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Send a query */\n    public async sendQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.SEND_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Fetch query results */\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\n            WorkerRequestType.FETCH_QUERY_RESULTS,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Prepare a statement and return its identifier */\n    public async createPrepared(conn: number, text: string): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\n            WorkerRequestType.CREATE_PREPARED,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n    /** Close a prepared statement */\n    public async closePrepared(conn: number, statement: number): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\n            WorkerRequestType.CLOSE_PREPARED,\n            [conn, statement],\n        );\n        await this.postTask(task);\n    }\n    /** Execute a prepared statement and return the full result */\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.RUN_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Execute a prepared statement and stream the result */\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.SEND_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Glob file infos */\n    public async globFiles(path: string): Promise<WebFile[]> {\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\n            WorkerRequestType.GLOB_FILE_INFOS,\n            path,\n        );\n        return await this.postTask(task);\n    }\n    /** Register file text */\n    public async registerFileText(name: string, text: string): Promise<void> {\n        const buffer = TEXT_ENCODER.encode(text);\n        await this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file path. */\n    public async registerFileURL(name: string, url: string): Promise<void> {\n        if (url === undefined) {\n            url = name;\n        }\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>(\n            WorkerRequestType.REGISTER_FILE_URL,\n            [name, url],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register an empty file buffer. */\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, new Uint8Array()],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register a file buffer. */\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, buffer],\n        );\n        await this.postTask(task, [buffer.buffer]);\n    }\n\n    /** Register a file handle. */\n    public async registerFileHandle<HandleType>(name: string, handle: HandleType): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>(\n            WorkerRequestType.REGISTER_FILE_HANDLE,\n            [name, handle],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Enable file statistics */\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\n            [name, enable],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Export file statistics */\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\n            name,\n        );\n        return await this.postTask(task, []);\n    }\n\n    /** Copy a file to a buffer. */\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\n            name,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Copy a file to a path. */\n    public async copyFileToPath(name: string, path: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\n            WorkerRequestType.COPY_FILE_TO_PATH,\n            [name, path],\n        );\n        await this.postTask(task);\n    }\n\n    /** Insert arrow from an ipc stream */\n    public async insertArrowFromIPCStream(\n        conn: ConnectionID,\n        buffer: Uint8Array,\n        options?: ArrowInsertOptions,\n    ): Promise<void> {\n        // Pass to the worker\n        const task = new WorkerTask<\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n            [number, Uint8Array, ArrowInsertOptions | undefined],\n            null\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\n        await this.postTask(task, [buffer.buffer]);\n    }\n    /** Insert a csv file */\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(flattenArrowField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n    /** Insert a json file */\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(flattenArrowField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n}\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "import config from '../package.json';\n\nexport const PACKAGE_NAME = config.name;\nexport const PACKAGE_VERSION = config.version;\n\nconst VERSION_PARTS = config.version.split('.');\nexport const PACKAGE_VERSION_MAJOR = VERSION_PARTS[0];\nexport const PACKAGE_VERSION_MINOR = VERSION_PARTS[1];\nexport const PACKAGE_VERSION_PATCH = VERSION_PARTS[2];\n", "import * as check from 'wasm-feature-detect';\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nexport interface DuckDBBundles {\n    asyncDefault: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    asyncNext?: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    asyncNextCOI?: {\n        mainModule: string;\n        mainWorker: string;\n        pthreadWorker: string;\n    };\n}\n\nfunction getWorkerURL(url: string) {\n    const content = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([content], { type: 'text/javascript' }));\n}\n\nexport function getJsDelivrBundles(): DuckDBBundles {\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\n    return {\n        asyncDefault: {\n            mainModule: `${jsdelivr_dist_url}duckdb.wasm`,\n            mainWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async.worker.js`),\n        },\n        asyncNext: {\n            mainModule: `${jsdelivr_dist_url}duckdb-next.wasm`,\n            mainWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async-next.worker.js`),\n        },\n        asyncNextCOI: {\n            mainModule: `${jsdelivr_dist_url}duckdb-next-coi.wasm`,\n            mainWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async-next-coi.worker.js`),\n            pthreadWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async-next-coi.pthread.worker.js`),\n        },\n    };\n}\n\nexport interface DuckDBBundle {\n    mainModule: string;\n    mainWorker: string | null;\n    pthreadWorker: string | null;\n}\n\nexport interface PlatformFeatures {\n    bigInt64Array: boolean;\n    crossOriginIsolated: boolean;\n    wasmExceptions: boolean;\n    wasmSIMD: boolean;\n    wasmBulkMemory: boolean;\n    wasmThreads: boolean;\n}\n\nlet bigInt64Array: boolean | null = null;\nlet wasmExceptions: boolean | null = null;\nlet wasmThreads: boolean | null = null;\nlet wasmSIMD: boolean | null = null;\nlet wasmBulkMemory: boolean | null = null;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace globalThis {\n    let crossOriginIsolated: boolean;\n}\n\nfunction isNode(): boolean {\n    return typeof process !== 'undefined' && process.release.name === 'node';\n}\n\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\n    if (bigInt64Array == null) {\n        bigInt64Array = typeof BigInt64Array != 'undefined';\n    }\n    if (wasmExceptions == null) {\n        wasmExceptions = await check.exceptions();\n    }\n    if (wasmThreads == null) {\n        wasmThreads = await check.threads();\n    }\n    if (wasmSIMD == null) {\n        wasmSIMD = await check.simd();\n    }\n    if (wasmBulkMemory == null) {\n        wasmBulkMemory = await check.bulkMemory();\n    }\n    return {\n        bigInt64Array: bigInt64Array!,\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\n        wasmExceptions: wasmExceptions!,\n        wasmSIMD: wasmSIMD!,\n        wasmThreads: wasmThreads!,\n        wasmBulkMemory: wasmBulkMemory!,\n    };\n}\n\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\n    const platform = await getPlatformFeatures();\n    if (platform.wasmExceptions && platform.wasmSIMD) {\n        if (platform.wasmThreads && platform.crossOriginIsolated && bundles.asyncNextCOI) {\n            return {\n                mainModule: bundles.asyncNextCOI.mainModule,\n                mainWorker: bundles.asyncNextCOI.mainWorker,\n                pthreadWorker: bundles.asyncNextCOI.pthreadWorker,\n            };\n        }\n        if (bundles.asyncNext) {\n            return {\n                mainModule: bundles.asyncNext.mainModule,\n                mainWorker: bundles.asyncNext.mainWorker,\n                pthreadWorker: null,\n            };\n        }\n    }\n    return {\n        mainModule: bundles.asyncDefault.mainModule,\n        mainWorker: bundles.asyncDefault.mainWorker,\n        pthreadWorker: null,\n    };\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\n\nexport function testBindings(db: () => duckdb.DuckDBBindings, baseURL: string): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(() => {\n        conn = db().connect();\n    });\n\n    afterEach(() => {\n        conn.close();\n        db().flushFiles();\n        db().dropFiles();\n    });\n\n    describe('DuckDBBindings', () => {\n        describe('error handling', () => {\n            it('INVALID SQL', async () => {\n                let error: Error | null = null;\n                try {\n                    conn.send('INVALID');\n                } catch (e: any) {\n                    error = e;\n                }\n                expect(error).not.toBe(null);\n            });\n        });\n\n        describe('Open', () => {\n            // XXX apparently synchronous XHR on the main thread does not allow for arraybuffer response type?\n            // it('Remote TPCH 0_01', async () => {\n            //     await db().registerFileURL('tpch_0_01.db', `${baseURL}/tpch/0_01/duckdb/db`);\n            //     db().open('tpch_0_01.db');\n            // });\n        });\n\n        describe('Reset', () => {\n            it('table must disappear', async () => {\n                await db().reset();\n                conn = db().connect();\n                conn.query('CREATE TABLE foo (a int)');\n                let table = conn.query<{ name: arrow.Utf8 }>('PRAGMA show_tables;');\n                let rows = table.toArray();\n                expect(rows.length).toEqual(1);\n                expect(rows[0].name).toEqual('foo');\n                await db().reset();\n                conn = db().connect();\n                table = conn.query<{ name: arrow.Utf8 }>('PRAGMA show_tables;');\n                rows = table.toArray();\n                expect(rows.length).toEqual(0);\n            });\n        });\n\n        describe('Prepared Statement', () => {\n            it('Materialized', async () => {\n                const stmt = conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\n                const result = stmt.query(234);\n                expect(result.length).toBe(10001);\n                stmt.close();\n            });\n\n            it('Streaming', async () => {\n                const stmt = conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\n                const stream = stmt.send(234);\n                let size = 0;\n                for (const batch of stream) {\n                    size += batch.length;\n                }\n                expect(size).toBe(10001);\n                conn.close();\n            });\n            it('Typecheck', async () => {\n                conn.query(`CREATE TABLE typecheck (\n                    a BOOLEAN DEFAULT NULL,\n                    b TINYINT DEFAULT NULL,\n                    c SMALLINT DEFAULT NULL,\n                    d INTEGER DEFAULT NULL,\n                    e BIGINT DEFAULT NULL,\n                    f FLOAT DEFAULT NULL,\n                    g DOUBLE DEFAULT NULL,\n                    h CHAR(11) DEFAULT NULL,\n                    i VARCHAR(11) DEFAULT NULL\n                )`);\n\n                const stmt = conn.prepare('INSERT INTO typecheck VALUES(?,?,?,?,?,?,?,?,?)');\n                expect(() =>\n                    stmt.query(true, 100, 10_000, 1_000_000, 5_000_000_000, 0.5, Math.PI, 'hello world', 'hi'),\n                ).not.toThrow();\n                expect(() =>\n                    stmt.query(\n                        'test', // varchar for bool\n                        100,\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                expect(() =>\n                    stmt.query(\n                        true,\n                        10_000, // smallint for tinyint\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                expect(() =>\n                    stmt.query(\n                        true,\n                        100,\n                        1_000_000, // int for smallint\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                expect(() =>\n                    stmt.query(\n                        true,\n                        100,\n                        10_000,\n                        5_000_000_000, // bigint for int\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                conn.close();\n            });\n        });\n    });\n}\n\nexport function testAsyncBindings(adb: () => duckdb.AsyncDuckDB, baseURL: string): void {\n    beforeEach(async () => {});\n\n    afterEach(async () => {\n        await adb().flushFiles();\n        await adb().dropFiles();\n        await adb().open({\n            path: ':memory:',\n        });\n    });\n\n    describe('Bindings', () => {\n        describe('Open', () => {\n            it('Remote TPCH 0_01', async () => {\n                await adb().registerFileURL('tpch_0_01.db', `${baseURL}/tpch/0_01/duckdb/db`);\n                await adb().open({\n                    path: 'tpch_0_01.db',\n                });\n                const conn = await adb().connect();\n                const table = await conn.query<{\n                    a: arrow.Int;\n                }>('select count(*)::INTEGER as a from lineitem');\n                const rows = table.toArray();\n                expect(rows.length).toEqual(1);\n                expect(rows[0].a).toEqual(60175);\n            });\n        });\n\n        describe('Patching', () => {\n            it('Count(*) Default', async () => {\n                await adb().open({\n                    path: ':memory:',\n                    emitBigInt: true,\n                });\n                const conn = await adb().connect();\n                const table = await conn.query('select 1::BIGINT');\n                expect(table.schema.fields.length).toEqual(1);\n                expect(table.schema.fields[0].typeId).toEqual(arrow.Type.Int);\n            });\n\n            it('Count(*) No BigInt', async () => {\n                await adb().open({\n                    path: ':memory:',\n                    emitBigInt: false,\n                });\n                const conn = await adb().connect();\n                const table = await conn.query('select 1::BIGINT');\n                expect(table.schema.fields.length).toEqual(1);\n                expect(table.schema.fields[0].typeId).toEqual(arrow.Type.Float);\n            });\n        });\n\n        describe('Prepared Statement', () => {\n            it('Materialized', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare('SELECT v + ? FROM generate_series(0, 10000) as t(v);');\n                const result = await stmt.query(234);\n                expect(result.length).toBe(10001);\n                await stmt.close();\n            });\n\n            it('Streaming', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\n                const stream = await stmt.send(234);\n                let size = 0;\n                for await (const batch of stream) {\n                    size += batch.length;\n                }\n                expect(size).toBe(10001);\n                await conn.close();\n            });\n            it('Typecheck', async () => {\n                const conn = await adb().connect();\n                await conn.query(`CREATE TABLE typecheck (\n                    a BOOLEAN DEFAULT NULL,\n                    b TINYINT DEFAULT NULL,\n                    c SMALLINT DEFAULT NULL,\n                    d INTEGER DEFAULT NULL,\n                    e BIGINT DEFAULT NULL,\n                    f FLOAT DEFAULT NULL,\n                    g DOUBLE DEFAULT NULL,\n                    h CHAR(11) DEFAULT NULL,\n                    i VARCHAR(11) DEFAULT NULL\n                )`);\n\n                const stmt = await conn.prepare('INSERT INTO typecheck VALUES(?,?,?,?,?,?,?,?,?)');\n\n                const expectToThrow = async (fn: () => Promise<void>) => {\n                    let throwed = false;\n                    try {\n                        await fn();\n                    } catch (e) {\n                        throwed = true;\n                    }\n                    expect(throwed).toBe(true);\n                };\n                expectToThrow(async () => {\n                    await stmt.query(\n                        'test', // varchar for bool\n                        100,\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                expectToThrow(async () => {\n                    await stmt.query(\n                        true,\n                        10_000, // smallint for tinyint\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                expectToThrow(async () => {\n                    await stmt.query(\n                        true,\n                        100,\n                        1_000_000, // int for smallint\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                expectToThrow(async () => {\n                    await stmt.query(\n                        true,\n                        100,\n                        10_000,\n                        5_000_000_000, // bigint for int\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                await conn.close();\n            });\n        });\n    });\n}\n", "import * as duckdb from '../src/';\nimport * as arrow from 'apache-arrow';\n\nconst testRows = 10000;\n\nexport function testBatchStream(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(() => {\n        conn = db().connect();\n    });\n\n    afterEach(() => {\n        conn.close();\n        db().flushFiles();\n        db().dropFiles();\n    });\n\n    describe('Arrow Record-Batches Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Record-Batches Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n}\n", "import * as duckdb from '../src/';\nimport * as arrow from 'apache-arrow';\n\nconst testRows = 10000;\n\nexport function testAsyncBatchStream(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        conn = await db().connect();\n    });\n\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n\n    describe('AsyncDuckDB', () => {\n        it('ping', async () => {\n            await db().ping();\n        });\n    });\n\n    describe('Arrow Record-Batches Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = await conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n\n        describe('scripts', () => {\n            it('test1', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS x, (sin(v) * 100 + 100)::INTEGER AS y FROM generate_series(0, ${testRows}) as t(v)\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(2);\n                    for (const row of batch) {\n                        expect(row!.x).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Record-Batches Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = await conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = await conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n}\n", "import * as duckdb from '../src/';\nimport * as arrow from 'apache-arrow';\n\nconst decoder = new TextDecoder();\n\nexport function testFilesystem(\n    db: () => duckdb.AsyncDuckDB,\n    resolveData: (url: string) => Promise<Uint8Array | null>,\n    baseDir: string,\n): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        conn = await db().connect();\n    });\n\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n\n    describe('File buffer registration', () => {\n        const test = async () => {\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        };\n        it('File buffer used once', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n        });\n        it('File buffer registered twice', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n        });\n        it('File buffer used twice', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n            await test();\n        });\n    });\n\n    describe('Parquet Scans', () => {\n        it('single table from buffer', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        });\n\n        it('simple join', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            const hoeren = await resolveData('/uni/hoeren.parquet');\n            const vorlesungen = await resolveData('/uni/vorlesungen.parquet');\n            expect(students).not.toBeNull();\n            expect(hoeren).not.toBeNull();\n            expect(vorlesungen).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerFileBuffer('hoeren.parquet', hoeren!);\n            await db().registerFileBuffer('vorlesungen.parquet', vorlesungen!);\n\n            const result = await conn.send(`\n                    SELECT students.matrnr, vorlesungen.titel\n                    FROM parquet_scan('studenten.parquet') students\n                    INNER JOIN parquet_scan('hoeren.parquet') hoeren ON (students.matrnr = hoeren.matrnr)\n                    INNER JOIN parquet_scan('vorlesungen.parquet') vorlesungen ON (vorlesungen.vorlnr = hoeren.vorlnr);\n                `);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int; titel: arrow.Utf8 }>(result);\n            expect(table.numCols).toBe(2);\n            const flat = [];\n            for (const row of table) {\n                flat.push({\n                    matrnr: row.matrnr,\n                    titel: row.titel?.toString(),\n                });\n            }\n            expect(flat).toEqual([\n                { matrnr: 26120, titel: 'Grundz\u00FCge' },\n                { matrnr: 27550, titel: 'Grundz\u00FCge' },\n                { matrnr: 27550, titel: 'Logik' },\n                { matrnr: 28106, titel: 'Ethik' },\n                { matrnr: 28106, titel: 'Wissenschaftstheorie' },\n                { matrnr: 28106, titel: 'Bioethik' },\n                { matrnr: 28106, titel: 'Der Wiener Kreis' },\n                { matrnr: 29120, titel: 'Grundz\u00FCge' },\n                { matrnr: 29120, titel: 'Ethik' },\n                { matrnr: 29120, titel: 'M\u00E4eutik' },\n                { matrnr: 29555, titel: 'Glaube und Wissen' },\n                { matrnr: 25403, titel: 'Glaube und Wissen' },\n            ]);\n        });\n    });\n\n    describe('Writing', () => {\n        it('Copy To CSV Buffer', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerEmptyFileBuffer('students.csv');\n            await conn.query(`CREATE TABLE students AS SELECT * FROM parquet_scan('studenten.parquet');`);\n            await conn.query(`COPY students TO 'students.csv' WITH (HEADER 1, DELIMITER ';', FORMAT CSV);`);\n            await conn.query(`DROP TABLE IF EXISTS students`);\n            const outBuffer = await db().copyFileToBuffer('students.csv');\n            expect(outBuffer).not.toBeNull();\n            const text = decoder.decode(outBuffer!);\n            expect(text).toBe(`matrnr;name;semester\n24002;Xenokrates;18\n25403;Jonas;12\n26120;Fichte;10\n26830;Aristoxenos;8\n27550;Schopenhauer;6\n28106;Carnap;3\n29120;Theophrastos;2\n29555;Feuerbach;2\n`);\n        });\n\n        it('Copy To Parquet', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerEmptyFileBuffer('students2.parquet');\n            await conn.query(`CREATE TABLE students2 AS SELECT * FROM parquet_scan('studenten.parquet');`);\n            await conn.query(`COPY students2 TO 'students2.parquet' (FORMAT PARQUET);`);\n            const url = await db().copyFileToBuffer('students2.parquet');\n            expect(url).not.toBeNull();\n        });\n\n        it('Copy To Parquet And Load Again', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerEmptyFileBuffer('students3.parquet');\n            await conn.query(`CREATE TABLE students3 AS SELECT * FROM parquet_scan('studenten.parquet');`);\n            await conn.query(`COPY students3 TO 'students3.parquet' (FORMAT PARQUET);`);\n            const url = await db().copyFileToBuffer('students3.parquet');\n            expect(url).not.toBeNull();\n            await conn.query(`CREATE TABLE students4 AS SELECT * FROM parquet_scan('students3.parquet');`);\n            const result = await conn.send(`SELECT matrnr FROM students4;`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        });\n    });\n\n    describe('File access', () => {\n        it('Small Parquet file', async () => {\n            await db().registerFileURL('studenten.parquet', `${baseDir}/uni/studenten.parquet`);\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        });\n\n        it('Large Parquet file', async () => {\n            await db().registerFileURL('lineitem.parquet', `${baseDir}/tpch/0_01/parquet/lineitem.parquet`);\n            const result = await conn.send(`SELECT count(*)::INTEGER as cnt FROM parquet_scan('lineitem.parquet');`);\n            const table = await arrow.Table.from<{ cnt: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.get(0)).toBeGreaterThan(60_000);\n        });\n    });\n\n    describe('Export', () => {\n        it('Generate Series as CSV', async () => {\n            await conn.query('CREATE TABLE foo AS SELECT * FROM generate_series(1, 5) t(v)');\n            await conn.query(`EXPORT DATABASE '/tmp/duckdbexportcsv'`);\n\n            const results = await db().globFiles('/tmp/duckdbexportcsv/*');\n            expect(results).not.toEqual([]);\n            expect(results.length).toEqual(3);\n            const filenames = results.map(file => file.fileName).sort();\n            expect(filenames).toEqual([\n                '/tmp/duckdbexportcsv/0_foo.csv',\n                '/tmp/duckdbexportcsv/load.sql',\n                '/tmp/duckdbexportcsv/schema.sql',\n            ]);\n\n            const csv_buffer_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/0_foo.csv');\n            const load_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/load.sql');\n            const schema_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/schema.sql');\n            expect(load_script_utf8.length).not.toEqual(0);\n            expect(schema_script_utf8.length).not.toEqual(0);\n            expect(csv_buffer_utf8.length).not.toEqual(0);\n\n            const load_script = decoder.decode(load_script_utf8);\n            const schema_script = decoder.decode(schema_script_utf8);\n            const csv_buffer = decoder.decode(csv_buffer_utf8);\n            expect(load_script.trim()).toEqual(\n                `COPY foo FROM '/tmp/duckdbexportcsv/0_foo.csv' (FORMAT 'csv', quote '\"', delimiter ',', header 0);`,\n            );\n            expect(schema_script.trim()).toEqual(`CREATE TABLE foo(v BIGINT);`);\n            expect(csv_buffer.trim()).toEqual(`1\\n2\\n3\\n4\\n5`);\n        });\n\n        it('Generate Series as Parquet', async () => {\n            await conn.query('CREATE TABLE foo AS SELECT * FROM generate_series(1, 5) t(v)');\n            await conn.query(`EXPORT DATABASE '/tmp/duckdbexportparquet' (FORMAT PARQUET)`);\n\n            const results = await db().globFiles('/tmp/duckdbexportparquet/*');\n            expect(results).not.toEqual([]);\n            expect(results.length).toEqual(3);\n            const filenames = results.map(file => file.fileName).sort();\n            expect(filenames).toEqual([\n                '/tmp/duckdbexportparquet/0_foo.parquet',\n                '/tmp/duckdbexportparquet/load.sql',\n                '/tmp/duckdbexportparquet/schema.sql',\n            ]);\n\n            const parquet_buffer_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/0_foo.parquet');\n            const load_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/load.sql');\n            const schema_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/schema.sql');\n            expect(load_script_utf8.length).not.toEqual(0);\n            expect(schema_script_utf8.length).not.toEqual(0);\n            expect(parquet_buffer_utf8.length).not.toEqual(0);\n\n            const content = await conn.query(\n                `SELECT v::integer FROM parquet_scan('/tmp/duckdbexportparquet/0_foo.parquet')`,\n            );\n            expect(content.length).toEqual(5);\n            expect(content.getColumnAt(0)?.toArray()).toEqual(new Int32Array([1, 2, 3, 4, 5]));\n        });\n    });\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\nimport { Column, compareTable } from './table_test';\n\n/// Unfortunately, arrow.Table.from does not build a proper Schema.\n/// When it does, we might want to switch back to arrow.Table here instead\n/// of arrow Schema + ArrowBatch.\ninterface ArrowInsertTest {\n    name: string;\n    schema: arrow.Schema;\n    batches: ArrowBatch[];\n    options: duckdb.ArrowInsertOptions;\n    query: string;\n    expectedColumns: Column[];\n}\n\ninterface ArrowBatch {\n    numRows: number;\n    columns: arrow.Vector[];\n}\n\nexport function generateXInt32(n: number, cols: number): number[][] {\n    const columns = [];\n    for (let j = 0; j < cols; ++j) {\n        const column = [];\n        for (let i = 0; i < n; ++i) {\n            column.push(i);\n        }\n        columns.push(column);\n    }\n    return columns;\n}\n\nexport function generateArrowXInt32(n: number, cols: number): [arrow.Schema, arrow.RecordBatch[]] {\n    const columns = generateXInt32(n, cols);\n    const fields = [];\n    for (let j = 0; j < cols; ++j) {\n        fields.push(new arrow.Field(`v${j}`, new arrow.Int32()));\n    }\n    const schema = new arrow.Schema(fields);\n    const batches = [];\n    for (let i = 0; i < n; ) {\n        const rows = Math.min(1000, n - i);\n        batches.push(\n            new arrow.RecordBatch(\n                schema,\n                rows,\n                columns.map(c => arrow.Int32Vector.from(c.slice(i, i + n))),\n            ),\n        );\n        i += rows;\n    }\n    return [schema, batches];\n}\n\nconst ARROW_INSERT_TESTS: ArrowInsertTest[] = [\n    {\n        name: 'integers_1',\n        schema: arrow.Schema.new({\n            a: new arrow.Int32(),\n            b: new arrow.Int32(),\n            c: new arrow.Int32(),\n        }),\n        batches: [\n            {\n                numRows: 3,\n                columns: [\n                    arrow.Int32Vector.from([1, 4, 7]),\n                    arrow.Int32Vector.from([2, 5, 8]),\n                    arrow.Int32Vector.from([3, 6, 9]),\n                ],\n            },\n        ],\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'combined_1',\n        schema: arrow.Schema.new({\n            a: new arrow.Int32(),\n            b: new arrow.Int16(),\n            c: new arrow.Utf8(),\n        }),\n        batches: [\n            {\n                numRows: 3,\n                columns: [\n                    arrow.Int32Vector.from([1, 4, 7]),\n                    arrow.Int16Vector.from([2, 5, 8]),\n                    arrow.Utf8Vector.from(['3', '6', '9']),\n                ],\n            },\n        ],\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: ['3', '6', '9'] },\n        ],\n    },\n    {\n        name: 'combined_2',\n        schema: arrow.Schema.new({\n            a: new arrow.Int32(),\n            b: new arrow.Int16(),\n            c: new arrow.Utf8(),\n        }),\n        batches: [\n            {\n                numRows: 3,\n                columns: [\n                    arrow.Int32Vector.from([1, 4, 7]),\n                    arrow.Int16Vector.from([2, 5, 8]),\n                    arrow.Utf8Vector.from(['3', '6', '9']),\n                ],\n            },\n            {\n                numRows: 2,\n                columns: [\n                    arrow.Int32Vector.from([10, 13]),\n                    arrow.Int16Vector.from([11, 14]),\n                    arrow.Utf8Vector.from(['12', '15']),\n                ],\n            },\n        ],\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7, 10, 13] },\n            { name: 'b', values: [2, 5, 8, 11, 14] },\n            { name: 'c', values: ['3', '6', '9', '12', '15'] },\n        ],\n    },\n];\n\nexport function testArrowInsert(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(async () => {\n        db().flushFiles();\n        conn = db().connect();\n    });\n    afterEach(async () => {\n        conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('Arrow insert from iterable', () => {\n        for (const test of ARROW_INSERT_TESTS) {\n            it(test.name, () => {\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                conn.insertArrowBatches(\n                    test.schema,\n                    test.batches.map(b => new arrow.RecordBatch(test.schema, b.numRows, b.columns)),\n                    test.options,\n                );\n                const results = conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n    describe('Arrow insert from vectors', () => {\n        it('simple integers', () => {\n            conn.query(`DROP TABLE IF EXISTS insert_from_vectors`);\n            conn.insertArrowVectors(\n                {\n                    a: arrow.Int32Vector.from([1, 4, 7]),\n                    b: arrow.Int32Vector.from([2, 5, 8]),\n                    c: arrow.Utf8Vector.from(['3', '6', '9']),\n                },\n                {\n                    name: 'insert_from_vectors',\n                },\n            );\n            const results = conn.query('select * from insert_from_vectors');\n            compareTable(results, [\n                { name: 'a', values: [1, 4, 7] },\n                { name: 'b', values: [2, 5, 8] },\n                { name: 'c', values: ['3', '6', '9'] },\n            ]);\n            conn.query(`DROP TABLE IF EXISTS insert_from_vectors`);\n        });\n    });\n    describe('Arrow benchmark inserts', () => {\n        it('generated integer batches', () => {\n            conn.query(`DROP TABLE IF EXISTS insert_generated_batches`);\n            const [schema, batches] = generateArrowXInt32(10000, 2);\n            conn.insertArrowBatches(schema, batches, {\n                schema: 'main',\n                name: 'insert_generated_batches',\n            });\n            conn.query(`DROP TABLE IF EXISTS insert_generated_batches`);\n        });\n    });\n}\n\nexport function testArrowInsertAsync(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('Arrow insert from iterable', () => {\n        for (const test of ARROW_INSERT_TESTS) {\n            it(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                await conn.insertArrowBatches(\n                    test.schema,\n                    test.batches.map(b => new arrow.RecordBatch(test.schema, b.numRows, b.columns)),\n                    test.options,\n                );\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n    describe('Arrow insert from vectors', () => {\n        it('simple integers', async () => {\n            await conn.query(`DROP TABLE IF EXISTS insert_from_vectors`);\n            await conn.insertArrowVectors(\n                {\n                    a: arrow.Int32Vector.from([1, 4, 7]),\n                    b: arrow.Int32Vector.from([2, 5, 8]),\n                    c: arrow.Utf8Vector.from(['3', '6', '9']),\n                },\n                {\n                    name: 'insert_from_vectors',\n                },\n            );\n            const results = await conn.query('select * from insert_from_vectors');\n            compareTable(results, [\n                { name: 'a', values: [1, 4, 7] },\n                { name: 'b', values: [2, 5, 8] },\n                { name: 'c', values: ['3', '6', '9'] },\n            ]);\n        });\n    });\n}\n", "import * as arrow from 'apache-arrow';\n\nexport interface Column {\n    name: string;\n    values: any[];\n}\n\nexport function compareTable(table: arrow.Table, expected: Column[]): void {\n    // Check column count\n    const colCount = expected.length;\n    expect(table.numCols).toEqual(colCount);\n    if (colCount == 0) return;\n\n    // Check columns\n    const rowCount = expected[0].values.length;\n    for (let i = 0; i < colCount; ++i) {\n        expect(expected[i].values.length).toEqual(rowCount);\n        expect(table.getColumnAt(i)?.length).toEqual(rowCount);\n        expect(table.getColumnAt(i)?.name).toEqual(expected[i].name);\n    }\n\n    // Compare the actual values\n    for (let i = 0; i < colCount; ++i) {\n        const col = table.getColumnAt(i)!;\n        const have = [];\n        for (let j = 0; j < rowCount; ++j) {\n            have.push(col.get(j));\n        }\n        expect(have).toEqual(expected[i].values);\n    }\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\nimport { Column, compareTable } from './table_test';\n\nfunction itBrowser(expectation: string, assertion?: jasmine.ImplementationCallback, timeout?: number): void {\n    if (typeof window !== 'undefined') {\n        it(expectation, assertion, timeout);\n    }\n}\n\nconst encoder = new TextEncoder();\n\ninterface JSONInsertTest {\n    name: string;\n    input: string;\n    options: duckdb.JSONInsertOptions;\n    query: string;\n    expectedColumns: Column[];\n}\n\nconst JSON_INSERT_TESTS: JSONInsertTest[] = [\n    {\n        name: 'rows_integers',\n        input: `[\n            {\"a\":1, \"b\":2, \"c\":3},\n            {\"a\":4, \"b\":5, \"c\":6},\n            {\"a\":7, \"b\":8, \"c\":9},\n        ]`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'cols_integers',\n        input: `{\n            \"a\": [1, 4, 7],\n            \"b\": [2, 5, 8],\n            \"c\": [3, 6, 9]\n        }`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'options_1',\n        input: `[\n            {\"a\":1, \"b\":2, \"c\":3},\n            {\"a\":4, \"b\":5, \"c\":6},\n            {\"a\":7, \"b\":8, \"c\":9},\n        ]`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n            shape: duckdb.JSONTableShape.ROW_ARRAY,\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.Utf8(),\n            },\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: ['3', '6', '9'] },\n        ],\n    },\n];\n\nconst TEST_FILE = 'TEST';\n\nexport function testJSONInsert(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(async () => {\n        db().flushFiles();\n        conn = db().connect();\n    });\n    afterEach(async () => {\n        conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('JSON Insert Sync', () => {\n        for (const test of JSON_INSERT_TESTS) {\n            it(test.name, () => {\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                db().registerFileBuffer(TEST_FILE, buffer);\n                conn.insertJSONFromPath(TEST_FILE, test.options);\n                const results = conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n\nexport function testJSONInsertAsync(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('JSON Insert Buffer Async', () => {\n        for (const test of JSON_INSERT_TESTS) {\n            it(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                await db().registerFileBuffer(TEST_FILE, buffer);\n                await conn.insertJSONFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n\n    describe('JSON Insert Blob Async', () => {\n        for (const test of JSON_INSERT_TESTS) {\n            itBrowser(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                const blob = new Blob([buffer]);\n                await db().registerFileHandle(TEST_FILE, blob);\n                await conn.insertJSONFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\nimport { Column, compareTable } from './table_test';\n\nfunction itBrowser(expectation: string, assertion?: jasmine.ImplementationCallback, timeout?: number): void {\n    if (typeof window !== 'undefined') {\n        it(expectation, assertion, timeout);\n    }\n}\n\nconst encoder = new TextEncoder();\n\ninterface CSVInsertTest {\n    name: string;\n    input: string;\n    options: duckdb.CSVInsertOptions;\n    query: string;\n    expectedColumns: Column[];\n}\n\nconst CSV_INSERT_TESTS: CSVInsertTest[] = [\n    {\n        name: 'integers_auto_1',\n        input: `\"a\",\"b\",\"c\"\n1,2,3\n4,5,6\n7,8,9\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'integers_auto_2',\n        input: `a,b,c\n1,2,3\n4,5,6\n7,8,9\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'integers_auto_3',\n        input: `a,b,c`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'column0', values: ['a'] },\n            { name: 'column1', values: ['b'] },\n            { name: 'column2', values: ['c'] },\n        ],\n    },\n    {\n        name: 'integers_auto_2',\n        input: `a\n1\n4\n7\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [{ name: 'a', values: [1, 4, 7] }],\n    },\n    {\n        name: 'options_1',\n        input: `1,2,3\n4,5,6\n7,8,9\n`,\n        options: {\n            schema: 'main',\n            name: 'foo2',\n            header: false,\n            detect: false,\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.Utf8(),\n            },\n        },\n        query: 'SELECT * FROM main.foo2',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: ['3', '6', '9'] },\n        ],\n    },\n    {\n        name: 'options_2',\n        input: `1|2|01/02/2020\n4|5|01/03/2020\n7|8|01/04/2020\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n            detect: false,\n            header: false,\n            delimiter: '|',\n            dateFormat: '%m/%d/%Y',\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.DateDay(),\n            },\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            {\n                name: 'c',\n                values: [\n                    new Date(Date.UTC(2020, 0, 2)),\n                    new Date(Date.UTC(2020, 0, 3)),\n                    new Date(Date.UTC(2020, 0, 4)),\n                ],\n            },\n        ],\n    },\n    {\n        name: 'options_3',\n        input: `1|2|20:32:45 1992-03-02\n4|5|20:32:50 1992-03-02\n7|8|20:32:55 1992-03-02\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n            detect: false,\n            header: false,\n            delimiter: '|',\n            quote: \"'\",\n            timestampFormat: '%H:%M:%S %Y-%m-%d',\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.TimestampSecond(),\n            },\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            {\n                name: 'c',\n                values: [\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 45)).getTime(),\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 50)).getTime(),\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 55)).getTime(),\n                ],\n            },\n        ],\n    },\n];\n\nconst TEST_FILE = 'TEST';\n\nexport function testCSVInsert(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(async () => {\n        db().flushFiles();\n        conn = db().connect();\n    });\n    afterEach(async () => {\n        conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('CSV Insert Sync', () => {\n        for (const test of CSV_INSERT_TESTS) {\n            it(test.name, () => {\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                db().registerFileBuffer(TEST_FILE, buffer);\n                conn.insertCSVFromPath(TEST_FILE, test.options);\n                const results = conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n\nexport function testCSVInsertAsync(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('CSV Insert Buffer Async', () => {\n        for (const test of CSV_INSERT_TESTS) {\n            it(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                await db().registerFileBuffer(TEST_FILE, buffer);\n                await conn.insertCSVFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n\n    describe('CSV Insert Blob Async', () => {\n        for (const test of CSV_INSERT_TESTS) {\n            itBrowser(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                const blob = new Blob([buffer]);\n                await db().registerFileHandle(TEST_FILE, blob);\n                await conn.insertCSVFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n", "import * as duckdb from '../src/';\n\nexport function testTokenization(db: () => duckdb.DuckDBBindings): void {\n    describe('Tokenizer', () => {\n        it('SELECT 1', async () => {\n            expect(db().tokenize('SELECT 1')).toEqual({\n                offsets: [0, 7],\n                types: [4, 1],\n            });\n        });\n        it('SELECT * FROM region', async () => {\n            expect(db().tokenize('SELECT * FROM region')).toEqual({\n                offsets: [0, 7, 9, 14],\n                types: [4, 3, 4, 0],\n            });\n        });\n    });\n}\n\nexport function testTokenizationAsync(db: () => duckdb.AsyncDuckDB): void {\n    describe('Tokenizer', () => {\n        it('SELECT 1', async () => {\n            expect(await db().tokenize('SELECT 1')).toEqual({\n                offsets: [0, 7],\n                types: [4, 1],\n            });\n        });\n        it('SELECT * FROM region', async () => {\n            expect(await db().tokenize('SELECT * FROM region')).toEqual({\n                offsets: [0, 7, 9, 14],\n                types: [4, 3, 4, 0],\n            });\n        });\n    });\n}\n", "import * as duckdb from '../../src';\nimport * as arrow from 'apache-arrow';\n\n// https://github.com/duckdb/duckdb-wasm/issues/332\nexport function testGitHubIssue332(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('GitHub issues', () => {\n        it('332', async () => {\n            await db().registerFileText(\n                'Products.csv',\n                `ProductGroup,Product,Year,Quarter,Revenue,Units,Count,Product Key,Reseller,Product Info,QuarterAsNumber\nElectronics,Phone,2018,Q1,103,7,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2018,Q1,102,4,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2019,Q1,98,12,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2018,Q1,104,3,1,2018-Q1,Samsung,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2019,Q1,83,7,1,2019-Q1,Google,Format=XML; <Properties>\u2026,1\nMedia,Theater,2018,Q1,17,4,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Theater,2019,Q1,20,7,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Movies,2018,Q1,25,12,1,2018-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nMedia,Movies,2019,Q1,26,13,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2018,Q2,105,5,1,2018-Q2,Samsung,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2019,Q2,82,15,1,2019-Q2,LG,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2018,Q2,99,4,1,2018-Q2,LG,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2019,Q2,84,20,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Theater,2018,Q2,17,4,1,2018-Q2,Microsoft,Format=XML; <Properties>\u2026,2\nMedia,Theater,2019,Q2,22,5,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Movies,2018,Q2,25,12,1,2018-Q2,Samsung,Format=XML; <Properties>\u2026,2\nMedia,Movies,2019,Q2,26,14,1,2019-Q2,Google,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2000,Q1,103,7,1,2000-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2001,Q1,102,4,1,2001-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2002,Q1,98,12,1,2002-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2003,Q1,104,3,1,2003-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2004,Q1,83,7,1,2004-Q1,Samsung,Format=XML; <Properties>\u2026,1\nMedia,Theater,2005,Q1,17,4,1,2005-Q1,Google,Format=XML; <Properties>\u2026,1\nMedia,Theater,2006,Q1,20,7,1,2006-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Movies,2007,Q1,25,12,1,2007-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Movies,2008,Q1,26,13,1,2008-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2009,Q2,105,5,1,2009-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2010,Q2,82,15,1,2010-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2011,Q2,99,4,1,2011-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2012,Q2,84,20,1,2012-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Theater,2013,Q2,17,4,1,2013-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Theater,2014,Q2,22,5,1,2014-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Movies,2015,Q2,25,12,1,2015-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Movies,2016,Q2,26,14,1,2016-Q2,Samsung,Format=XML; <Properties>\u2026,2\nMedia,Movies,2017,Q1,26,13,1,2017-Q1,Google,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2018,Q2,105,5,1,2018-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2019,Q2,82,15,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2020,Q2,99,4,1,2020-Q2,Microsoft,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2020,Q1,103,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2020,Q2,102,4,1,2020-Q2,Samsung,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2020,Q3,98,12,1,2020-Q3,LG,Format=XML; <Properties>\u2026,3\nElectronics,Computer,2020,Q4,104,3,1,2020-Q4,LG,Format=XML; <Properties>\u2026,4\nElectronics,Computer,2020,Q1,83,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Theater,2020,Q1,17,4,1,2020-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nMedia,Theater,2020,Q1,20,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\n`,\n            );\n            await conn.query(\"CREATE TABLE products AS SELECT * FROM 'Products.csv'\");\n            const all = await conn.query('SELECT * FROM products');\n            expect(all.schema.fields.length).toBe(11);\n            expect(all.schema.fields[0].name).toBe('ProductGroup');\n            const insensitive = await conn.query<{\n                ProductGroup: arrow.Utf8;\n            }>('SELECT productgroup FROM products GROUP BY productgroup');\n            expect(insensitive.schema.fields.length).toBe(1);\n            expect(insensitive.schema.fields[0].name).toBe('ProductGroup');\n            expect(insensitive.toArray().length).toEqual(2);\n            await conn.query('DROP TABLE products');\n        });\n    });\n}\n", "import * as duckdb from '../../src';\nimport * as arrow from 'apache-arrow';\n\n// https://github.com/duckdb/duckdb-wasm/issues/334\nexport function testGitHubIssue334(adb: () => duckdb.AsyncDuckDB): void {\n    describe('GitHub issues', () => {\n        describe('334', () => {\n            it('CSV insert', async () => {\n                await adb().registerFileText(`data.csv`, '1|foo\\n2|bar\\n');\n                const conn = await adb().connect();\n                await conn.insertCSVFromPath('data.csv', {\n                    schema: 'main',\n                    name: 'foo',\n                    detect: false,\n                    header: false,\n                    delimiter: '|',\n                    columns: {\n                        col1: new arrow.Int32(),\n                        col2: new arrow.Utf8(),\n                    },\n                });\n                await conn.query('DROP TABLE IF EXISTS foo');\n                await conn.close();\n                await adb().dropFile('data.csv');\n            });\n            it('JSON row insert', async () => {\n                await adb().registerFileText(\n                    'rows.json',\n                    `[\n                    { \"col1\": 1, \"col2\": \"foo\" },\n                    { \"col1\": 2, \"col2\": \"bar\" },\n                ]`,\n                );\n                const conn = await adb().connect();\n                await conn.insertJSONFromPath('rows.json', { name: 'rows' });\n                await conn.query('DROP TABLE IF EXISTS rows');\n                await conn.close();\n                await adb().dropFile('rows.json');\n            });\n            it('JSON column insert', async () => {\n                await adb().registerFileText(\n                    'columns.json',\n                    `{\n                    \"col1\": [1, 2],\n                    \"col2\": [\"foo\", \"bar\"]\n                }`,\n                );\n                const conn = await adb().connect();\n                await conn.insertJSONFromPath('columns.json', { name: 'columns' });\n                await conn.query('DROP TABLE IF EXISTS columns');\n                await conn.close();\n                await adb().dropFile('columns.json');\n            });\n            it('Query result materialized', async () => {\n                const conn = await adb().connect();\n                await conn.query<{ v: arrow.Int }>(`\n                SELECT * FROM generate_series(1, 100) t(v)\n            `);\n                await conn.close();\n            });\n            it('Query result streamed', async () => {\n                const conn = await adb().connect();\n                for await (const batch of await conn.send<{ v: arrow.Int }>(`\n                SELECT * FROM generate_series(1, 100) t(v)\n            `)) {\n                    expect(batch.length).toBeGreaterThan(0);\n                }\n                await conn.close();\n            });\n            it('Prepared statement materialized', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare(`SELECT v + ? FROM generate_series(0, 10000) as t(v);`);\n                await stmt.query(234);\n                await stmt.close();\n                await conn.close();\n            });\n            it('Prepared statement streamed', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare(`SELECT v + ? FROM generate_series(0, 10000) as t(v);`);\n                for await (const batch of await stmt.send(234)) {\n                    expect(batch.length).toBeGreaterThan(0);\n                }\n                await stmt.close();\n                await conn.close();\n            });\n        });\n    });\n}\n", "import * as duckdb from '../../src/';\nimport { testGitHubIssue332 } from './github_332.test';\nimport { testGitHubIssue334 } from './github_334.test';\n\nexport function testRegressionAsync(adb: () => duckdb.AsyncDuckDB): void {\n    testGitHubIssue332(adb);\n    testGitHubIssue334(adb);\n}\n", "import * as duckdb_sync from '../src/targets/duckdb-browser-sync';\nimport * as duckdb_async from '../src/targets/duckdb-browser-async';\nimport * as check from 'wasm-feature-detect';\nimport { DuckDBBundle, getPlatformFeatures } from '../src/targets/duckdb-browser-async';\n\n// Configure the worker\nconst DUCKDB_BUNDLES: duckdb_async.DuckDBBundles = {\n    asyncDefault: {\n        mainModule: '/static/duckdb.wasm',\n        mainWorker: '/static/duckdb-browser-async.worker.js',\n    },\n    asyncNext: {\n        mainModule: '/static/duckdb-next.wasm',\n        mainWorker: '/static/duckdb-browser-async-next.worker.js',\n    },\n    asyncNextCOI: {\n        mainModule: '/static/duckdb-next-coi.wasm',\n        mainWorker: '/static/duckdb-browser-async-next-coi.worker.js',\n        pthreadWorker: '/static/duckdb-browser-async-next-coi.pthread.worker.js',\n    },\n};\nlet DUCKDB_BUNDLE: DuckDBBundle | null = null;\n\ndescribe('wasm check', () => {\n    it('worker and wasm urls', async () => {\n        if (\n            (await getPlatformFeatures()).crossOriginIsolated &&\n            (await check.exceptions()) &&\n            (await check.threads())\n        ) {\n            expect(DUCKDB_BUNDLE!.mainModule).toEqual(DUCKDB_BUNDLES.asyncNextCOI!.mainModule);\n            expect(DUCKDB_BUNDLE!.mainWorker).toEqual(DUCKDB_BUNDLES.asyncNextCOI!.mainWorker);\n            expect(DUCKDB_BUNDLE!.pthreadWorker).toEqual(DUCKDB_BUNDLES.asyncNextCOI!.pthreadWorker);\n        }\n        if ((await check.exceptions()) && !(await check.threads())) {\n            expect(DUCKDB_BUNDLE!.mainModule).toEqual(DUCKDB_BUNDLES.asyncNext!.mainModule);\n            expect(DUCKDB_BUNDLE!.mainWorker).toEqual(DUCKDB_BUNDLES.asyncNext!.mainWorker);\n            expect(DUCKDB_BUNDLE!.pthreadWorker).toEqual(null);\n        }\n        if (!(await check.exceptions())) {\n            expect(DUCKDB_BUNDLE!.mainModule).toEqual(DUCKDB_BUNDLES.asyncDefault!.mainModule);\n            expect(DUCKDB_BUNDLE!.mainWorker).toEqual(DUCKDB_BUNDLES.asyncDefault!.mainWorker);\n            expect(DUCKDB_BUNDLE!.pthreadWorker).toEqual(null);\n        }\n    });\n});\n\n// Loading debug symbols, especially for WASM take insanely long so we just disable the test timeout\njasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\n\n// Resolve a buffer by fetching from disk\nconst resolveBuffer = async (url: string) => {\n    const req = await fetch(`/data${url}`);\n    if (!req.ok) return null;\n    return new Uint8Array(await req.arrayBuffer());\n};\n\n// Resolve test data\nconst resolveData = async (url: string) => {\n    switch (url) {\n        case '/uni/all.zip':\n            return await resolveBuffer('/uni/all.zip');\n        case '/uni/assistenten.parquet':\n            return await resolveBuffer('/uni/assistenten.parquet');\n        case '/uni/studenten.parquet':\n            return await resolveBuffer('/uni/studenten.parquet');\n        case '/uni/hoeren.parquet':\n            return await resolveBuffer('/uni/hoeren.parquet');\n        case '/uni/vorlesungen.parquet':\n            return await resolveBuffer('/uni/vorlesungen.parquet');\n        default:\n            return null;\n    }\n};\n\n// Test environment\nlet db: duckdb_sync.DuckDB | null = null;\nlet adb: duckdb_async.AsyncDuckDB | null = null;\nlet worker: Worker | null = null;\n\nbeforeAll(async () => {\n    DUCKDB_BUNDLE = await duckdb_async.selectBundle(DUCKDB_BUNDLES);\n    const logger = new duckdb_sync.VoidLogger();\n    db = new duckdb_sync.DuckDB(logger, duckdb_sync.BROWSER_RUNTIME, '/static/duckdb.wasm');\n    await db.instantiate();\n\n    worker = new Worker(DUCKDB_BUNDLE!.mainWorker!);\n    adb = new duckdb_async.AsyncDuckDB(logger, worker);\n    await adb.instantiate(DUCKDB_BUNDLE!.mainModule, DUCKDB_BUNDLE!.pthreadWorker);\n});\n\nafterAll(async () => {\n    if (worker) worker.terminate();\n});\n\nimport { testBindings, testAsyncBindings } from './bindings.test';\nimport { testBatchStream } from './batch_stream.test';\nimport { testAsyncBatchStream } from './batch_stream_async.test';\nimport { testFilesystem } from './filesystem.test';\nimport { testArrowInsert, testArrowInsertAsync } from './insert_arrow.test';\nimport { testJSONInsert, testJSONInsertAsync } from './insert_json.test';\nimport { testCSVInsert, testCSVInsertAsync } from './insert_csv.test';\nimport { testTokenization, testTokenizationAsync } from './tokenizer.test';\nimport { testRegressionAsync } from './regression';\n\nconst baseURL = window.location.origin;\nconst dataURL = `${baseURL}/data`;\n\ntestRegressionAsync(() => adb!);\ntestBindings(() => db!, dataURL);\ntestAsyncBindings(() => adb!, dataURL);\ntestBatchStream(() => db!);\ntestAsyncBatchStream(() => adb!);\ntestFilesystem(() => adb!, resolveData, dataURL);\ntestArrowInsert(() => db!);\ntestArrowInsertAsync(() => adb!);\ntestJSONInsert(() => db!);\ntestJSONInsertAsync(() => adb!);\ntestCSVInsert(() => db!);\ntestCSVInsertAsync(() => adb!);\ntestTokenization(() => db!);\ntestTokenizationAsync(() => adb!);\n"],
  "mappings": "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",
  "names": []
}
