{
  "version": 3,
  "sources": ["../src/log.ts", "../src/status.ts", "../src/bindings/connection.ts", "../src/utils/ipc_buffer.ts", "../src/bindings/runtime.ts", "../src/bindings/file_stats.ts", "../src/flat_arrow.ts", "../src/bindings/bindings_base.ts", "../src/bindings/insert_options.ts", "../src/bindings/insert.ts", "../src/bindings/duckdb_wasm.js", "../src/bindings/bindings_node_base.ts", "../src/bindings/bindings_node.ts", "../src/bindings/runtime_node.ts", "../src/parallel/async_connection.ts", "../src/parallel/worker_request.ts", "../src/parallel/async_bindings.ts", "../src/platform.ts", "../src/version.ts", "../test/index_node.ts", "../test/bindings.test.ts", "../test/batch_stream.test.ts", "../test/filesystem.test.ts", "../test/batch_stream_async.test.ts", "../test/insert_arrow.test.ts", "../test/table_test.ts", "../test/insert_json.test.ts", "../test/insert_csv.test.ts", "../test/tokenizer.test.ts", "../test/regression/github_332.test.ts", "../test/regression/github_334.test.ts", "../test/regression/index.ts"],
  "sourcesContent": ["export enum LogLevel {\n    NONE = 0,\n    DEBUG = 1,\n    INFO = 2,\n    WARNING = 3,\n    ERROR = 4,\n}\n\nexport enum LogTopic {\n    NONE = 0,\n    CONNECT = 1,\n    DISCONNECT = 2,\n    OPEN = 3,\n    QUERY = 4,\n}\n\nexport enum LogEvent {\n    NONE = 0,\n    OK = 1,\n    ERROR = 2,\n    START = 3,\n    RUN = 4,\n    CAPTURE = 5,\n}\n\nexport enum LogOrigin {\n    NONE = 0,\n    WEB_WORKER = 1,\n    NODE_WORKER = 2,\n    BINDINGS = 3,\n    ASYNC_DUCKDB = 4,\n}\n\nexport type LogEntry<O, T, E, V> = {\n    readonly timestamp: Date;\n    readonly level: LogLevel;\n    readonly origin: O;\n    readonly topic: T;\n    readonly event: E;\n    readonly value: V;\n};\n\nexport type LogEntryVariant =\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\n\nexport interface Logger {\n    log(entry: LogEntryVariant): void;\n}\n\nexport class VoidLogger implements Logger {\n    public log(_entry: LogEntryVariant): void {}\n}\n\nexport class ConsoleLogger implements Logger {\n    public log(entry: LogEntryVariant): void {\n        console.log(entry);\n    }\n}\n\nexport function getLogLevelLabel(level: LogLevel): string {\n    switch (level) {\n        case LogLevel.NONE:\n            return 'NONE';\n        case LogLevel.DEBUG:\n            return 'DEBUG';\n        case LogLevel.INFO:\n            return 'INFO';\n        case LogLevel.WARNING:\n            return 'WARNING';\n        case LogLevel.ERROR:\n            return 'ERROR';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogEventLabel(event: LogEvent): string {\n    switch (event) {\n        case LogEvent.NONE:\n            return 'NONE';\n        case LogEvent.OK:\n            return 'OK';\n        case LogEvent.ERROR:\n            return 'ERROR';\n        case LogEvent.START:\n            return 'START';\n        case LogEvent.RUN:\n            return 'RUN';\n        case LogEvent.CAPTURE:\n            return 'CAPTURE';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogTopicLabel(topic: LogTopic): string {\n    switch (topic) {\n        case LogTopic.CONNECT:\n            return 'CONNECT';\n        case LogTopic.DISCONNECT:\n            return 'DISCONNECT';\n        case LogTopic.OPEN:\n            return 'OPEN';\n        case LogTopic.QUERY:\n            return 'QUERY';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogOriginLabel(origin: LogOrigin): string {\n    switch (origin) {\n        case LogOrigin.NONE:\n            return 'NONE';\n        case LogOrigin.WEB_WORKER:\n            return 'WEB WORKER';\n        case LogOrigin.NODE_WORKER:\n            return 'NODE WORKER';\n        case LogOrigin.BINDINGS:\n            return 'DUCKDB BINDINGS';\n        case LogOrigin.ASYNC_DUCKDB:\n            return 'DUCKDB';\n        default:\n            return '?';\n    }\n}\n", "export enum StatusCode {\n    SUCCESS = 0,\n}\n", "import * as arrow from 'apache-arrow';\nimport * as utils from '../utils';\nimport { DuckDBBindings } from './bindings_interface';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from './insert_options';\n\n/** A thin helper to bind the connection id and talk record batches */\nexport class DuckDBConnection {\n    /** The bindings */\n    protected _bindings: DuckDBBindings;\n    /** The connection handle */\n    protected _conn: number;\n\n    /** Constructor */\n    constructor(bindings: DuckDBBindings, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Close a connection */\n    public close(): void {\n        this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: DuckDBBindings, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public query<T extends { [key: string]: arrow.DataType } = any>(text: string): arrow.Table<T> {\n        const buffer = this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader);\n    }\n\n    /** Send a query */\n    public send<T extends { [key: string]: arrow.DataType } = any>(text: string): arrow.RecordBatchStreamReader<T> {\n        const header = this._bindings.sendQuery(this._conn, text);\n        const iter = new ResultStreamIterator(this._bindings, this._conn, header);\n        const reader = arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isSync());\n        console.assert(reader.isStream());\n        return reader;\n    }\n\n    /** Create a prepared statement */\n    public prepare<T extends { [key: string]: arrow.DataType } = any>(text: string): PreparedStatement {\n        const stmt = this._bindings.createPrepared(this._conn, text);\n        return new PreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert arrow vectors */\n    public insertArrowVectors<T extends { [key: string]: arrow.Vector } = any>(\n        children: T,\n        options: ArrowInsertOptions,\n    ): void {\n        this.insertArrowTable(arrow.Table.new(children), options);\n    }\n    /** Insert an arrow table */\n    public insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): void {\n        if (table.schema.fields.length == 0) {\n            console.warn(\n                'The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually',\n            );\n        }\n        this.insertArrowBatches(table.schema, table.chunks, options);\n    }\n    /** Insert record batches */\n    public insertArrowBatches(\n        schema: arrow.Schema,\n        batches: Iterable<arrow.RecordBatch>,\n        options: ArrowInsertOptions,\n    ): void {\n        /// Warn the user about an empty schema.\n        if (schema.fields.length == 0) {\n            console.warn(\n                'The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually',\n            );\n        }\n\n        // Prepare the IPC stream writer\n        const buffer = new utils.IPCBuffer();\n        const writer = new arrow.RecordBatchStreamWriter().reset(buffer, schema);\n\n        // Write all batches to the ipc buffer\n        let first = true;\n        for (const batch of batches) {\n            if (!first) {\n                this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n            }\n            first = false;\n            writer.write(batch);\n        }\n        writer.finish();\n        this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): void {\n        this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n\n    /** Inesrt csv file from path */\n    public insertCSVFromPath(path: string, options: CSVInsertOptions): void {\n        this._bindings.insertCSVFromPath(this._conn, path, options);\n    }\n    /** Insert json file from path */\n    public insertJSONFromPath(path: string, options: JSONInsertOptions): void {\n        this._bindings.insertJSONFromPath(this._conn, path, options);\n    }\n}\n\n/** A result stream iterator */\nexport class ResultStreamIterator implements Iterable<Uint8Array> {\n    /** First chunk? */\n    _first: boolean;\n    /** Reached end of stream? */\n    _depleted: boolean;\n\n    constructor(protected bindings: DuckDBBindings, protected conn: number, protected header: Uint8Array) {\n        this._first = true;\n        this._depleted = false;\n    }\n\n    next(): IteratorResult<Uint8Array> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        const bufferI8 = this.bindings.fetchQueryResults(this.conn);\n        this._depleted = bufferI8.length == 0;\n        return {\n            done: this._depleted,\n            value: bufferI8,\n        };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id*/\nexport class PreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: DuckDBBindings;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: DuckDBBindings, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public close() {\n        this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public query(...params: any[]): arrow.Table<T> {\n        const buffer = this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public send(...params: any[]): arrow.RecordBatchStreamReader<T> {\n        const header = this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new ResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isSync());\n        console.assert(reader.isStream());\n        return reader as arrow.RecordBatchStreamReader;\n    }\n}\n", "import * as arrow from 'apache-arrow';\n\nexport class IPCBuffer extends arrow.AsyncByteQueue<Uint8Array> {\n    /// Flush the buffer\n    flush(): Uint8Array {\n        const buffer = super.toUint8Array(true);\n        this._values.length = 0;\n        return buffer;\n    }\n}\n", "import { DuckDBModule } from './duckdb_module';\n\n/** Wrapper for TextDecoder to support shared array buffers */\nfunction TextDecoderWrapper(): (input?: BufferSource) => string {\n    const decoder = new TextDecoder();\n    return (data: any) => {\n        if (typeof SharedArrayBuffer !== 'undefined' && data.buffer instanceof SharedArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        return decoder.decode(data);\n    };\n}\n/** Helper to decode text */\nexport const decodeText = TextDecoderWrapper();\n\n/** Copy a buffer */\nexport function failWith(mod: DuckDBModule, msg: string): void {\n    mod.ccall('duckdb_web_fail_with', null, ['string'], [msg]);\n}\n\n/** Copy a buffer */\nexport function copyBuffer(mod: DuckDBModule, begin: number, length: number): Uint8Array {\n    const buffer = mod.HEAPU8.subarray(begin, begin + length);\n    const copy = new Uint8Array(new ArrayBuffer(buffer.byteLength));\n    copy.set(buffer);\n    return copy;\n}\n\n/** Decode a string */\nexport function readString(mod: DuckDBModule, begin: number, length: number): string {\n    return decodeText(mod.HEAPU8.subarray(begin, begin + length));\n}\n\n/** The data protocol */\nexport enum DuckDBDataProtocol {\n    BUFFER = 0,\n    NATIVE = 1,\n    HTTP = 3,\n}\n\n/** An info for a file registered with DuckDB */\nexport interface DuckDBFileInfo {\n    fileId: number;\n    fileName: string;\n    dataProtocol: DuckDBDataProtocol;\n    dataUrl: string | null;\n    dataNativeFd: number | null;\n    allowFullHttpReads?: boolean;\n}\n\n/** Call a function with packed response buffer */\nexport function callSRet(\n    mod: DuckDBModule,\n    funcName: string,\n    argTypes: Array<Emscripten.JSType>,\n    args: Array<any>,\n): [number, number, number] {\n    const stackPointer = mod.stackSave();\n\n    // Allocate the packed response buffer\n    const response = mod.stackAlloc(3 * 8);\n    argTypes.unshift('number');\n    args.unshift(response);\n\n    // Do the call\n    mod.ccall(funcName, null, argTypes, args);\n\n    // Read the response\n    const status = mod.HEAPF64[(response >> 3) + 0];\n    const data = mod.HEAPF64[(response >> 3) + 1];\n    const dataSize = mod.HEAPF64[(response >> 3) + 2];\n\n    // Restore the stack\n    mod.stackRestore(stackPointer);\n    return [status, data, dataSize];\n}\n\n/** Drop response buffers */\nexport function dropResponseBuffers(mod: DuckDBModule): void {\n    mod.ccall('duckdb_web_clear_response', null, [], []);\n}\n\n/** The duckdb runtime */\nexport interface DuckDBRuntime {\n    _files?: Map<string, any>;\n\n    // Test a platform feature\n    testPlatformFeature(mod: DuckDBModule, feature: number): boolean;\n\n    // File APIs with dedicated file identifier\n    openFile(mod: DuckDBModule, fileId: number): void;\n    syncFile(mod: DuckDBModule, fileId: number): void;\n    closeFile(mod: DuckDBModule, fileId: number): void;\n    getLastFileModificationTime(mod: DuckDBModule, fileId: number): number;\n    truncateFile(mod: DuckDBModule, fileId: number, newSize: number): void;\n    readFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n    writeFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\n\n    // File APIs with path parameter\n    removeDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    checkDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    createDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    listDirectoryEntries(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    glob(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n    moveFile(mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number): void;\n    checkFile(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\n    removeFile(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\n}\n\nexport const DEFAULT_RUNTIME: DuckDBRuntime = {\n    testPlatformFeature: (_mod: DuckDBModule, _feature: number): boolean => false,\n    openFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    syncFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    closeFile: (_mod: DuckDBModule, _fileId: number): void => {},\n    getLastFileModificationTime: (_mod: DuckDBModule, _fileId: number): number => {\n        return 0;\n    },\n    truncateFile: (_mod: DuckDBModule, _fileId: number, _newSize: number): void => {},\n    readFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n    writeFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\n        return 0;\n    },\n\n    removeDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    checkDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    createDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    listDirectoryEntries: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    glob: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number): void => {},\n    checkFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\n        return false;\n    },\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\n};\n", "export interface FileBlockStatistics {\n    /** The file reads cold */\n    file_reads_cold: number;\n    /** The file reads aheads */\n    file_reads_ahead: number;\n    /** The file reads cached */\n    file_reads_cached: number;\n    /** The file writes */\n    file_writes: number;\n    /** The page accesses */\n    page_accesses: number;\n    /** The page loads */\n    page_loads: number;\n}\n\n/** The file block statistics */\nexport class FileStatistics {\n    /** The cold file reads */\n    public totalFileReadsCold: number;\n    /** The file readaheads */\n    public totalFileReadsAhead: number;\n    /** The cached file reads */\n    public totalFileReadsCached: number;\n    /** The file writes */\n    public totalFileWrites: number;\n    /** The page accesses */\n    public totalPageAccesses: number;\n    /** The page loads */\n    public totalPageLoads: number;\n    /** The blocks */\n    public blockSize: number;\n    /** The blocks */\n    public blockStats: Uint8Array;\n\n    constructor(u8array: Uint8Array) {\n        const f64 = new Float64Array(u8array.buffer, u8array.byteOffset, u8array.byteLength / 8);\n        const blocks = new Uint8Array(new ArrayBuffer(u8array.byteLength));\n        blocks.set(u8array.subarray(7 * 8));\n        this.totalFileReadsCold = f64[0];\n        this.totalFileReadsAhead = f64[1];\n        this.totalFileReadsCached = f64[2];\n        this.totalFileWrites = f64[3];\n        this.totalPageAccesses = f64[4];\n        this.totalPageLoads = f64[5];\n        this.blockSize = f64[6];\n        this.blockStats = blocks;\n    }\n\n    /** The block stats */\n    public getBlockStats(index: number, out?: FileBlockStatistics): FileBlockStatistics {\n        out = out || {\n            file_reads_cold: 0,\n            file_reads_ahead: 0,\n            file_reads_cached: 0,\n            file_writes: 0,\n            page_accesses: 0,\n            page_loads: 0,\n        };\n        out.file_writes = this.blockStats[index * 3 + 0] & 0b1111;\n        out.file_reads_cold = this.blockStats[index * 3 + 0] >> 4;\n        out.file_reads_ahead = this.blockStats[index * 3 + 1] & 0b1111;\n        out.file_reads_cached = this.blockStats[index * 3 + 1] >> 4;\n        out.page_accesses = this.blockStats[index * 3 + 1] & 0b1111;\n        out.page_loads = this.blockStats[index * 3 + 1] >> 4;\n        return out;\n    }\n}\n", "import * as arrow from 'apache-arrow';\n\nexport interface FlatArrowType {\n    /// The type\n    type: string;\n    /// Is nullable?\n    nullable?: boolean;\n    /// Decimal precision\n    precision?: number;\n    /// Decimal scaling\n    scale?: number;\n    /// Timezone\n    timezone?: string;\n    /// Byte width (FixedSizeBinary)\n    byteWidth?: number;\n    /// Fields\n    children?: FlatArrowField[];\n}\n\nexport type FlatArrowField = FlatArrowType & { name: string };\n\nexport function flattenArrowField(name: string, type: arrow.DataType): FlatArrowField {\n    switch (type.typeId) {\n        case arrow.Type.Binary:\n            return { name, type: 'binary' };\n        case arrow.Type.Bool:\n            return { name, type: 'bool' };\n        case arrow.Type.Date:\n            return { name, type: 'date' };\n        case arrow.Type.DateDay:\n            return { name, type: 'date32[d]' };\n        case arrow.Type.DateMillisecond:\n            return { name, type: 'date64[ms]' };\n        case arrow.Type.Decimal: {\n            const dec = type as arrow.Decimal;\n            return { name, type: 'decimal', precision: dec.precision, scale: dec.scale };\n        }\n        case arrow.Type.Float:\n            return { name, type: 'float' };\n        case arrow.Type.Float16:\n            return { name, type: 'float16' };\n        case arrow.Type.Float32:\n            return { name, type: 'float32' };\n        case arrow.Type.Float64:\n            return { name, type: 'float64' };\n        case arrow.Type.Int:\n            return { name, type: 'int32' };\n        case arrow.Type.Int16:\n            return { name, type: 'int16' };\n        case arrow.Type.Int32:\n            return { name, type: 'int32' };\n        case arrow.Type.Int64:\n            return { name, type: 'int64' };\n        case arrow.Type.Uint16:\n            return { name, type: 'uint16' };\n        case arrow.Type.Uint32:\n            return { name, type: 'uint32' };\n        case arrow.Type.Uint64:\n            return { name, type: 'uint64' };\n        case arrow.Type.Uint8:\n            return { name, type: 'uint8' };\n        case arrow.Type.IntervalDayTime:\n            return { name, type: 'interval[dt]' };\n        case arrow.Type.IntervalYearMonth:\n            return { name, type: 'interval[m]' };\n        case arrow.Type.List: {\n            const list = type as arrow.List;\n            return { name, type: 'list', children: [flattenArrowField(list.valueField.name, list.valueField.type)] };\n        }\n        case arrow.Type.FixedSizeBinary: {\n            const bin = type as arrow.FixedSizeBinary;\n            return { name, type: 'fixedsizebinary', byteWidth: bin.byteWidth };\n        }\n        case arrow.Type.Null:\n            return { name, type: 'null' };\n        case arrow.Type.Utf8:\n            return { name, type: 'utf8' };\n        case arrow.Type.Struct: {\n            const struct_ = type as arrow.Struct;\n            return {\n                name,\n                type: 'struct',\n                children: struct_.children.map(c => flattenArrowField(c.name, c.type)),\n            };\n        }\n        case arrow.Type.Time:\n            return { name, type: 'time[s]' };\n        case arrow.Type.TimeMicrosecond:\n            return { name, type: 'time[us]' };\n        case arrow.Type.TimeMillisecond:\n            return { name, type: 'time[ms]' };\n        case arrow.Type.TimeNanosecond:\n            return { name, type: 'time[ns]' };\n        case arrow.Type.TimeSecond:\n            return { name, type: 'time[s]' };\n        case arrow.Type.Timestamp: {\n            const ts = type as arrow.Timestamp;\n            return { name, type: 'timestamp', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampSecond: {\n            const ts = type as arrow.TimestampSecond;\n            return { name, type: 'timestamp[s]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMicrosecond: {\n            const ts = type as arrow.TimestampMicrosecond;\n            return { name, type: 'timestamp[us]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampNanosecond: {\n            const ts = type as arrow.TimestampNanosecond;\n            return { name, type: 'timestamp[ns]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMillisecond: {\n            const ts = type as arrow.TimestampMillisecond;\n            return { name, type: 'timestamp[ms]', timezone: ts.timezone || undefined };\n        }\n    }\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\n}\n", "import { DuckDBModule, PThread } from './duckdb_module';\nimport { DuckDBConfig } from './config';\nimport { Logger } from '../log';\nimport { DuckDBBindings } from './bindings_interface';\nimport { DuckDBConnection } from './connection';\nimport { StatusCode } from '../status';\nimport { dropResponseBuffers, DuckDBRuntime, readString, callSRet, copyBuffer } from './runtime';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from './insert_options';\nimport { ScriptTokens } from './tokens';\nimport { FileStatistics } from './file_stats';\nimport { flattenArrowField } from '../flat_arrow';\nimport { WebFile } from './web_file';\n\nconst TEXT_ENCODER = new TextEncoder();\n\ndeclare global {\n    // eslint-disable-next-line no-var\n    var DUCKDB_RUNTIME: any;\n}\n\n/** A DuckDB Feature */\nexport enum DuckDBFeature {\n    WASM_EXCEPTIONS = 1 << 0,\n    WASM_THREADS = 1 << 1,\n    WASM_SIMD = 1 << 2,\n    WASM_BULK_MEMORY = 1 << 3,\n    EMIT_BIGINT = 1 << 4,\n}\n\n/** The proxy for either the browser- order node-based DuckDB API */\nexport abstract class DuckDBBindingsBase implements DuckDBBindings {\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** Backend-dependent native-glue code for DuckDB */\n    protected readonly _runtime: DuckDBRuntime;\n    /** The instance */\n    protected _instance: DuckDBModule | null = null;\n    /** The loading promise */\n    protected _initPromise: Promise<void> | null = null;\n    /** The resolver for the open promise (called by onRuntimeInitialized) */\n    protected _initPromiseResolver: () => void = () => {};\n\n    constructor(logger: Logger, runtime: DuckDBRuntime) {\n        this._logger = logger;\n        this._runtime = runtime;\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n    /** Get the instance */\n    public get mod(): DuckDBModule {\n        return this._instance!;\n    }\n    /** Get the instance */\n    public get pthread(): PThread | null {\n        return this.mod.PThread || null;\n    }\n\n    /** Instantiate the module */\n    protected abstract instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule>;\n    /** Instantiate the database */\n    public async instantiate(): Promise<this> {\n        // Already opened?\n        if (this._instance != null) {\n            return this;\n        }\n        // Open in progress?\n        if (this._initPromise != null) {\n            await this._initPromise;\n        }\n\n        // Create a promise that we can await\n        this._initPromise = new Promise(resolve => {\n            this._initPromiseResolver = resolve;\n        });\n\n        // Initialize duckdb\n        this._instance = await this.instantiateImpl({\n            print: console.log.bind(console),\n            printErr: console.log.bind(console),\n            onRuntimeInitialized: this._initPromiseResolver,\n        });\n\n        // Wait for onRuntimeInitialized\n        await this._initPromise;\n        this._initPromise = null;\n\n        return this;\n    }\n    /** Open a database at a path */\n    public open(config: DuckDBConfig): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_open', ['string'], [JSON.stringify(config)]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n\n    /** Reset the database */\n    public reset(): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_reset', [], []);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n\n    /** Get the version */\n    public getVersion(): string {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_get_version', [], []);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const version = readString(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return version;\n    }\n    /** Get the feature flags */\n    public getFeatureFlags(): number {\n        return this.mod.ccall('duckdb_web_get_feature_flags', 'number', [], []);\n    }\n\n    /** Tokenize a script */\n    public tokenize(text: string): ScriptTokens {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_tokenize', ['string'], [text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = readString(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return JSON.parse(res) as ScriptTokens;\n    }\n\n    /** Connect to database */\n    public connect(): DuckDBConnection {\n        const conn = this.mod.ccall('duckdb_web_connect', 'number', [], []);\n        return new DuckDBConnection(this, conn);\n    }\n    /** Disconnect from database */\n    public disconnect(conn: number): void {\n        this.mod.ccall('duckdb_web_disconnect', null, ['number'], [conn]);\n    }\n\n    /** Send a query and return the full result */\n    public runQuery(conn: number, text: string): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_run', ['number', 'string'], [conn, text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n    /** Send a query asynchronously. Results have to be fetched with `fetchQueryResults` */\n    public sendQuery(conn: number, text: string): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_send', ['number', 'string'], [conn, text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n    /** Fetch query results */\n    public fetchQueryResults(conn: number): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_fetch_results', ['number'], [conn]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n\n    /** Prepare a statement and return its identifier */\n    public createPrepared(conn: number, text: string): number {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_prepared_create', ['number', 'string'], [conn, text]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n        return d;\n    }\n\n    /** Close a prepared statement */\n    public closePrepared(conn: number, statement: number): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_prepared_close', ['number', 'number'], [conn, statement]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n\n    /** Execute a prepared statement and return the full result */\n    public runPrepared(conn: number, statement: number, params: any[]): Uint8Array {\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_prepared_run',\n            ['number', 'number', 'string'],\n            [conn, statement, JSON.stringify(params)],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n\n    /** Execute a prepared statement and stream the result */\n    public sendPrepared(conn: number, statement: number, params: any[]): Uint8Array {\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_prepared_send',\n            ['number', 'number', 'string'],\n            [conn, statement, JSON.stringify(params)],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const res = copyBuffer(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        return res;\n    }\n\n    /** Insert record batches from an arrow ipc stream */\n    public insertArrowFromIPCStream(conn: number, buffer: Uint8Array, options?: ArrowInsertOptions): void {\n        // Store buffer\n        const bufferPtr = this.mod._malloc(buffer.length);\n        const bufferOfs = this.mod.HEAPU8.subarray(bufferPtr, bufferPtr + buffer.length);\n        bufferOfs.set(buffer);\n        const optJSON = options ? JSON.stringify(options) : '';\n\n        // Call wasm function\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_insert_arrow_from_ipc_stream',\n            ['number', 'number', 'number', 'string'],\n            [conn, bufferPtr, buffer.length, optJSON],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n\n    /** Insert csv from path */\n    public insertCSVFromPath(conn: number, path: string, options: CSVInsertOptions): void {\n        // Stringify options\n        if (options.columns !== undefined) {\n            options.columnsFlat = [];\n            for (const k in options.columns) {\n                options.columnsFlat.push(flattenArrowField(k, options.columns[k]));\n            }\n        }\n        const opt = { ...options } as any;\n        opt.columns = opt.columnsFlat;\n        delete opt.columnsFlat;\n        const optJSON = JSON.stringify(opt);\n\n        // Call wasm function\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_insert_csv_from_path',\n            ['number', 'string', 'string'],\n            [conn, path, optJSON],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n    /** Insert json from path */\n    public insertJSONFromPath(conn: number, path: string, options: JSONInsertOptions): void {\n        // Stringify options\n        if (options.columns !== undefined) {\n            options.columnsFlat = [];\n            for (const k in options.columns) {\n                options.columnsFlat.push(flattenArrowField(k, options.columns[k]));\n            }\n        }\n        const opt = { ...options } as any;\n        opt.columns = opt.columnsFlat;\n        delete opt.columnsFlat;\n        const optJSON = JSON.stringify(opt);\n\n        // Call wasm function\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_insert_json_from_path',\n            ['number', 'string', 'string'],\n            [conn, path, optJSON],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n    /** Glob file infos */\n    public globFiles(path: string): WebFile[] {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_glob_file_infos', ['string'], [path]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const infoStr = readString(this.mod, d, n);\n        dropResponseBuffers(this.mod);\n        const info = JSON.parse(infoStr) as WebFile[];\n        if (info == null) {\n            return [];\n        }\n        return info;\n    }\n    /** Register a file object URL */\n    public registerFileURL(name: string, url?: string): void {\n        if (url === undefined) {\n            url = name;\n        }\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_register_file_url', ['string', 'string'], [name, url]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Register file text */\n    public registerFileText(name: string, text: string): void {\n        const buffer = TEXT_ENCODER.encode(text);\n        this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file buffer */\n    public registerFileBuffer(name: string, buffer: Uint8Array): void {\n        const ptr = this.mod._malloc(buffer.length);\n        const dst = this.mod.HEAPU8.subarray(ptr, ptr + buffer.length);\n        dst.set(buffer);\n        const [s, d, n] = callSRet(\n            this.mod,\n            'duckdb_web_fs_register_file_buffer',\n            ['string', 'number', 'number'],\n            [name, ptr, buffer.length],\n        );\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Register a file object URL */\n    public registerFileHandle<HandleType>(name: string, handle: HandleType): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_register_file_url', ['string', 'string'], [name, name]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n        globalThis.DUCKDB_RUNTIME._files = (globalThis.DUCKDB_RUNTIME._files || new Map()).set(name, handle);\n        if (this.pthread) {\n            for (const worker of this.pthread.runningWorkers) {\n                worker.postMessage({\n                    cmd: 'registerFileHandle',\n                    fileName: name,\n                    fileHandle: handle,\n                });\n            }\n            for (const worker of this.pthread.unusedWorkers) {\n                worker.postMessage({\n                    cmd: 'dropFileHandle',\n                    fileName: name,\n                });\n            }\n        }\n    }\n    /** Drop file */\n    public dropFile(name: string): boolean {\n        return this.mod.ccall('duckdb_web_fs_drop_file', 'boolean', ['string'], [name]);\n    }\n    /** Drop files */\n    public dropFiles(): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_drop_files', [], []);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Flush all files */\n    public flushFiles(): void {\n        this.mod.ccall('duckdb_web_flush_files', null, [], []);\n    }\n    /** Write a file to a path */\n    public copyFileToPath(name: string, path: string): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_copy_file_to_path', ['string', 'string'], [name, path]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        dropResponseBuffers(this.mod);\n    }\n    /** Write a file to a buffer */\n    public copyFileToBuffer(name: string): Uint8Array {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_copy_file_to_buffer', ['string'], [name]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        const buffer = this.mod.HEAPU8.subarray(d, d + n);\n        const copy = new Uint8Array(buffer.length);\n        copy.set(buffer);\n        dropResponseBuffers(this.mod);\n        return copy;\n    }\n\n    /** Enable tracking of file statistics */\n    public collectFileStatistics(file: string, enable: boolean): void {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_collect_file_stats', ['string', 'boolean'], [file, enable]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n    }\n    /** Export file statistics */\n    public exportFileStatistics(file: string): FileStatistics {\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_export_file_stats', ['string'], [file]);\n        if (s !== StatusCode.SUCCESS) {\n            throw new Error(readString(this.mod, d, n));\n        }\n        return new FileStatistics(this.mod.HEAPU8.subarray(d, d + n));\n    }\n}\n", "import * as arrow from 'apache-arrow';\nimport { FlatArrowField } from '../flat_arrow';\n\nexport enum JSONTableShape {\n    ROW_ARRAY = 'row-array',\n    COLUMN_OBJECT = 'column-object',\n}\n\nexport interface JSONInsertOptions {\n    name: string;\n    schema?: string;\n    create?: boolean;\n    shape?: JSONTableShape;\n    columns?: {\n        [key: string]: arrow.DataType;\n    };\n    columnsFlat?: FlatArrowField[];\n}\n\nexport interface CSVInsertOptions {\n    name: string;\n    schema?: string;\n    create?: boolean;\n    header?: boolean;\n    delimiter?: string;\n    quote?: string;\n    escape?: string;\n    skip?: number;\n    detect?: boolean;\n    dateFormat?: string;\n    timestampFormat?: string;\n    columns?: {\n        [key: string]: arrow.DataType;\n    };\n    columnsFlat?: FlatArrowField[];\n}\n\nexport interface ArrowInsertOptions {\n    name: string;\n    schema?: string;\n    create?: boolean;\n}\n", "export enum InsertMode {\n    APPEND,\n    IMPORT,\n}\n\nexport interface InsertOptions {\n    mode: InsertMode;\n}\n", "\nvar DuckDB = (function() {\n  var _scriptDir = import.meta.url;\n  \n  return (\nfunction(DuckDB) {\n  DuckDB = DuckDB || {};\n\nvar Module=typeof DuckDB!==\"undefined\"?DuckDB:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=typeof window===\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";var ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;var toLog=e;err(\"exiting due to exception: \"+toLog)}var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};readAsync=function readAsync(filename,onload,onerror){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);nodeFS[\"readFile\"](filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",function(reason){throw reason});quit_=function(status,toThrow){if(keepRuntimeAlive()){process[\"exitCode\"]=status;throw toThrow}logExceptionOnExit(toThrow);process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);function onDone(ret){if(stack!==0)stackRestore(stack);return convertReturnValue(ret)}ret=onDone(ret);return ret}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){{if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}var wasmBinaryFile;if(Module[\"locateFile\"]){wasmBinaryFile=\"duckdb_wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}}else{wasmBinaryFile=new URL(\"duckdb_wasm.wasm\",import.meta.url).toString()}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"Ae\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"De\"];addOnInit(Module[\"asm\"][\"Be\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function handleException(e){if(e instanceof ExitStatus||e==\"unwind\"){return EXITSTATUS}quit_(1,e)}function ___cxa_allocate_exception(size){return _malloc(size+16)+16}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-16;this.set_type=function(type){HEAP32[this.ptr+4>>2]=type};this.get_type=function(){return HEAP32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1}}function CatchInfo(ptr){this.free=function(){_free(this.ptr);this.ptr=0};this.set_base_ptr=function(basePtr){HEAP32[this.ptr>>2]=basePtr};this.get_base_ptr=function(){return HEAP32[this.ptr>>2]};this.set_adjusted_ptr=function(adjustedPtr){HEAP32[this.ptr+4>>2]=adjustedPtr};this.get_adjusted_ptr_addr=function(){return this.ptr+4};this.get_adjusted_ptr=function(){return HEAP32[this.ptr+4>>2]};this.get_exception_ptr=function(){var isPointer=___cxa_is_pointer_type(this.get_exception_info().get_type());if(isPointer){return HEAP32[this.get_base_ptr()>>2]}var adjusted=this.get_adjusted_ptr();if(adjusted!==0)return adjusted;return this.get_base_ptr()};this.get_exception_info=function(){return new ExceptionInfo(this.get_base_ptr())};if(ptr===undefined){this.ptr=_malloc(8);this.set_adjusted_ptr(0)}else{this.ptr=ptr}}var exceptionCaught=[];function exception_addRef(info){info.add_ref()}var uncaughtExceptionCount=0;function ___cxa_begin_catch(ptr){var catchInfo=new CatchInfo(ptr);var info=catchInfo.get_exception_info();if(!info.get_caught()){info.set_caught(true);uncaughtExceptionCount--}info.set_rethrown(false);exceptionCaught.push(catchInfo);exception_addRef(info);return catchInfo.get_exception_ptr()}var exceptionLast=0;function ___cxa_free_exception(ptr){return _free(new ExceptionInfo(ptr).ptr)}function exception_decRef(info){if(info.release_ref()&&!info.get_rethrown()){var destructor=info.get_destructor();if(destructor){wasmTable.get(destructor)(info.excPtr)}___cxa_free_exception(info.excPtr)}}function ___cxa_end_catch(){_setThrew(0);var catchInfo=exceptionCaught.pop();exception_decRef(catchInfo.get_exception_info());catchInfo.free();exceptionLast=0}function ___resumeException(catchInfoPtr){var catchInfo=new CatchInfo(catchInfoPtr);var ptr=catchInfo.get_base_ptr();if(!exceptionLast){exceptionLast=ptr}catchInfo.free();throw ptr}function ___cxa_find_matching_catch_2(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_find_matching_catch_3(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_find_matching_catch_4(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_find_matching_catch_5(){var thrown=exceptionLast;if(!thrown){setTempRet0(0);return 0|0}var info=new ExceptionInfo(thrown);var thrownType=info.get_type();var catchInfo=new CatchInfo;catchInfo.set_base_ptr(thrown);catchInfo.set_adjusted_ptr(thrown);if(!thrownType){setTempRet0(0);return catchInfo.ptr|0}var typeArray=Array.prototype.slice.call(arguments);for(var i=0;i<typeArray.length;i++){var caughtType=typeArray[i];if(caughtType===0||caughtType===thrownType){break}if(___cxa_can_catch(caughtType,thrownType,catchInfo.get_adjusted_ptr_addr())){setTempRet0(caughtType);return catchInfo.ptr|0}}setTempRet0(thrownType);return catchInfo.ptr|0}function ___cxa_rethrow(){var catchInfo=exceptionCaught.pop();if(!catchInfo){abort(\"no exception to throw\")}var info=catchInfo.get_exception_info();var ptr=catchInfo.get_base_ptr();if(!info.get_rethrown()){exceptionCaught.push(catchInfo);info.set_rethrown(true);info.set_caught(false);uncaughtExceptionCount++}else{catchInfo.free()}exceptionLast=ptr;throw ptr}function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function ___cxa_uncaught_exceptions(){return uncaughtExceptionCount}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_access(path,amode){path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_fstat64(fd,buf){}function ___sys_ftruncate64(fd,zero,low,high){}function ___sys_getdents64(fd,dirp,count){}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_madvise1(addr,length,advice){return 0}function ___sys_mkdir(path,mode){path=SYSCALLS.getStr(path);return SYSCALLS.doMkdir(path,mode)}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs}function ___sys_rename(old_path,new_path){}function ___sys_rmdir(path){}function ___sys_stat64(path,buf){}function ___sys_unlink(path){}function __dlopen_js(filename,flag){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function __dlsym_js(handle,symbol){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _abort(){abort(\"\")}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else _emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now()}else{setErrNo(28);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _duckdb_web_fs_directory_create(path,pathLen){return globalThis.DUCKDB_RUNTIME.createDirectory(Module,path,pathLen)}function _duckdb_web_fs_directory_exists(path,pathLen){return globalThis.DUCKDB_RUNTIME.checkDirectory(Module,path,pathLen)}function _duckdb_web_fs_directory_list_files(path,pathLen){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(Module,path,pathLen)}function _duckdb_web_fs_directory_remove(path,pathLen){return globalThis.DUCKDB_RUNTIME.removeDirectory(Module,path,pathLen)}function _duckdb_web_fs_file_close(fileId){return globalThis.DUCKDB_RUNTIME.closeFile(Module,fileId)}function _duckdb_web_fs_file_exists(path,pathLen){return globalThis.DUCKDB_RUNTIME.checkFile(Module,path,pathLen)}function _duckdb_web_fs_file_get_last_modified_time(fileId){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(Module,fileId)}function _duckdb_web_fs_file_move(from,fromLen,to,toLen){return globalThis.DUCKDB_RUNTIME.moveFile(Module,from,fromLen,to,toLen)}function _duckdb_web_fs_file_open(fileId){return globalThis.DUCKDB_RUNTIME.openFile(Module,fileId)}function _duckdb_web_fs_file_read(fileId,buf,size,location){return globalThis.DUCKDB_RUNTIME.readFile(Module,fileId,buf,size,location)}function _duckdb_web_fs_file_truncate(fileId,newSize){return globalThis.DUCKDB_RUNTIME.truncateFile(Module,fileId,newSize)}function _duckdb_web_fs_file_write(fileId,buf,size,location){return globalThis.DUCKDB_RUNTIME.writeFile(Module,fileId,buf,size,location)}function _duckdb_web_fs_glob(path,pathLen){return globalThis.DUCKDB_RUNTIME.glob(Module,path,pathLen)}function _duckdb_web_test_platform_feature(feature){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(Module,feature)}function _emscripten_get_heap_max(){return 2147483648}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){return 0}function _fd_fdstat_get(fd,pbuf){var type=fd==1||fd==2?2:abort();HEAP8[pbuf>>0]=type;return 0}function _fd_pread(fd,iov,iovcnt,offset_low,offset_high,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt,offset_low);HEAP32[pnum>>2]=num;return 0}function _fd_pwrite(fd,iov,iovcnt,offset_low,offset_high,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt,offset_low);HEAP32[pnum>>2]=num;return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_sync(fd){var stream=SYSCALLS.getStreamFromFD(fd);if(stream.stream_ops&&stream.stream_ops.fsync){return-stream.stream_ops.fsync(stream)}return 0}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _getTempRet0(){return getTempRet0()}function getRandomDevice(){if(typeof crypto===\"object\"&&typeof crypto[\"getRandomValues\"]===\"function\"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=require(\"crypto\");return function(){return crypto_module[\"randomBytes\"](1)[0]}}catch(e){}}return function(){abort(\"randomDevice\")}}function _getentropy(buffer,size){if(!_getentropy.randomDevice){_getentropy.randomDevice=getRandomDevice()}for(var i=0;i<size;i++){HEAP8[buffer+i>>0]=_getentropy.randomDevice()}return 0}function _llvm_eh_typeid_for(type){return type}function _setTempRet0(val){setTempRet0(val)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={\"i\":___cxa_allocate_exception,\"A\":___cxa_begin_catch,\"G\":___cxa_end_catch,\"b\":___cxa_find_matching_catch_2,\"n\":___cxa_find_matching_catch_3,\"I\":___cxa_find_matching_catch_4,\"pa\":___cxa_find_matching_catch_5,\"j\":___cxa_free_exception,\"ua\":___cxa_rethrow,\"u\":___cxa_throw,\"E\":___cxa_uncaught_exceptions,\"c\":___resumeException,\"Ga\":___sys_access,\"ea\":___sys_fcntl64,\"Ia\":___sys_fstat64,\"Ha\":___sys_ftruncate64,\"Ea\":___sys_getdents64,\"ia\":___sys_getpid,\"Na\":___sys_ioctl,\"Aa\":___sys_madvise1,\"Fa\":___sys_mkdir,\"sa\":___sys_open,\"Ca\":___sys_rename,\"ja\":___sys_rmdir,\"la\":___sys_stat64,\"ka\":___sys_unlink,\"La\":__dlopen_js,\"Ka\":__dlsym_js,\"ga\":_abort,\"qa\":_clock_gettime,\"xe\":_duckdb_web_fs_directory_create,\"ye\":_duckdb_web_fs_directory_exists,\"ve\":_duckdb_web_fs_directory_list_files,\"we\":_duckdb_web_fs_directory_remove,\"ha\":_duckdb_web_fs_file_close,\"te\":_duckdb_web_fs_file_exists,\"wa\":_duckdb_web_fs_file_get_last_modified_time,\"ue\":_duckdb_web_fs_file_move,\"ya\":_duckdb_web_fs_file_open,\"$\":_duckdb_web_fs_file_read,\"ze\":_duckdb_web_fs_file_truncate,\"xa\":_duckdb_web_fs_file_write,\"se\":_duckdb_web_fs_glob,\"re\":_duckdb_web_test_platform_feature,\"Oa\":_emscripten_get_heap_max,\"Sa\":_emscripten_memcpy_big,\"Kc\":_emscripten_resize_heap,\"Qa\":_environ_get,\"Ra\":_environ_sizes_get,\"Y\":_fd_close,\"Ma\":_fd_fdstat_get,\"mb\":_fd_pread,\"lb\":_fd_pwrite,\"ra\":_fd_read,\"Md\":_fd_seek,\"Da\":_fd_sync,\"da\":_fd_write,\"a\":_getTempRet0,\"Ja\":_getentropy,\"W\":invoke_ddd,\"K\":invoke_di,\"R\":invoke_diii,\"sc\":invoke_diijii,\"X\":invoke_fff,\"M\":invoke_fi,\"va\":invoke_fiii,\"tc\":invoke_fiijii,\"t\":invoke_i,\"U\":invoke_id,\"rb\":invoke_idd,\"Z\":invoke_idiii,\"V\":invoke_if,\"Cb\":invoke_iff,\"e\":invoke_ii,\"aa\":invoke_iid,\"C\":invoke_iidii,\"Hb\":invoke_iidj,\"d\":invoke_iii,\"fa\":invoke_iiid,\"ma\":invoke_iiif,\"h\":invoke_iiii,\"Fb\":invoke_iiiidjj,\"l\":invoke_iiiii,\"ta\":invoke_iiiiid,\"o\":invoke_iiiiii,\"z\":invoke_iiiiiii,\"w\":invoke_iiiiiiii,\"Q\":invoke_iiiiiiiii,\"x\":invoke_iiiiiiiiiii,\"v\":invoke_iiiiiiiiiiii,\"p\":invoke_iiiiiiiiiiiiiiii,\"L\":invoke_iiiiiiiiiiiiiiiiiiii,\"J\":invoke_iiiiiiiiiiiiiiiiiiiii,\"Vb\":invoke_iiiiiiiiiiiij,\"Yb\":invoke_iiiiiiiiiiji,\"$b\":invoke_iiiiiiiij,\"hc\":invoke_iiiiiiiiji,\"Wb\":invoke_iiiiiiij,\"Gb\":invoke_iiiiiiiji,\"rc\":invoke_iiiiiiijii,\"Zb\":invoke_iiiiiij,\"ic\":invoke_iiiiiiji,\"ne\":invoke_iiiiij,\"Kd\":invoke_iiiiiji,\"Dd\":invoke_iiiiijii,\"be\":invoke_iiiiijj,\"Mb\":invoke_iiiiijji,\"cd\":invoke_iiiiijjiijj,\"Ua\":invoke_iiiiijjj,\"Ta\":invoke_iiiiijjji,\"Ud\":invoke_iiiij,\"Jd\":invoke_iiiiji,\"vb\":invoke_iiiijii,\"Sc\":invoke_iiiijiii,\"Td\":invoke_iiiijj,\"yc\":invoke_iiiijji,\"Nb\":invoke_iiiijjii,\"Eb\":invoke_iiiijjj,\"ie\":invoke_iiij,\"Qd\":invoke_iiiji,\"uc\":invoke_iiijii,\"Ed\":invoke_iiijiii,\"od\":invoke_iiijiiii,\"Bd\":invoke_iiijiij,\"hb\":invoke_iiijiijj,\"Rd\":invoke_iiijij,\"ec\":invoke_iiijj,\"Od\":invoke_iiijji,\"bd\":invoke_iiijjii,\"cb\":invoke_iiijjji,\"Va\":invoke_iiijjjii,\"ed\":invoke_iiijjjj,\"Vd\":invoke_iij,\"xd\":invoke_iiji,\"$a\":invoke_iijii,\"tb\":invoke_iijiii,\"Fd\":invoke_iijiiii,\"db\":invoke_iijiijj,\"Db\":invoke_iijiji,\"Pd\":invoke_iijj,\"yd\":invoke_iijji,\"ad\":invoke_iijjii,\"Ad\":invoke_iijjiii,\"zd\":invoke_iijjiiii,\"ud\":invoke_iijjijj,\"dc\":invoke_iijjjj,\"Tb\":invoke_ij,\"ge\":invoke_iji,\"_d\":invoke_ijj,\"jc\":invoke_ijji,\"Zd\":invoke_ijjiii,\"Ld\":invoke_j,\"mc\":invoke_jd,\"lc\":invoke_jf,\"fe\":invoke_ji,\"$d\":invoke_jii,\"Id\":invoke_jiii,\"qe\":invoke_jiiii,\"Ac\":invoke_jiiiii,\"kc\":invoke_jiiiiii,\"Xb\":invoke_jiiiiiii,\"zc\":invoke_jiiiiiijii,\"pc\":invoke_jiiiiijiiii,\"Pc\":invoke_jiiiij,\"sb\":invoke_jiiiiji,\"vc\":invoke_jiiiijii,\"qc\":invoke_jiiiijiiiiiiii,\"ld\":invoke_jiiij,\"xc\":invoke_jiiijii,\"oc\":invoke_jiiijiii,\"xb\":invoke_jiiijj,\"gd\":invoke_jiiijji,\"Sb\":invoke_jiij,\"id\":invoke_jiiji,\"Yc\":invoke_jiijii,\"Jc\":invoke_jiijiiiii,\"Ic\":invoke_jiijiijiii,\"Gc\":invoke_jiijijii,\"Hc\":invoke_jiijjiii,\"md\":invoke_jij,\"Ab\":invoke_jiji,\"Vc\":invoke_jijiii,\"Wa\":invoke_jijiiii,\"bc\":invoke_jijijjij,\"jb\":invoke_jijj,\"Tc\":invoke_jijjij,\"nc\":invoke_jj,\"Pb\":invoke_jjj,\"s\":invoke_v,\"k\":invoke_vi,\"B\":invoke_vid,\"ba\":invoke_vidi,\"ob\":invoke_vidiijj,\"D\":invoke_vif,\"ca\":invoke_vifi,\"pb\":invoke_vifiijj,\"f\":invoke_vii,\"T\":invoke_viid,\"P\":invoke_viidii,\"fc\":invoke_viif,\"g\":invoke_viii,\"m\":invoke_viiii,\"Ba\":invoke_viiiidiiii,\"q\":invoke_viiiii,\"r\":invoke_viiiiii,\"na\":invoke_viiiiiidiii,\"y\":invoke_viiiiiii,\"O\":invoke_viiiiiiii,\"N\":invoke_viiiiiiiii,\"S\":invoke_viiiiiiiiii,\"za\":invoke_viiiiiiiiiii,\"oa\":invoke_viiiiiiiiiiiii,\"_\":invoke_viiiiiiiiiiiiiii,\"wd\":invoke_viiiiiij,\"nb\":invoke_viiiiij,\"dd\":invoke_viiiiiji,\"Ub\":invoke_viiiiijiii,\"wc\":invoke_viiiiijiiii,\"gc\":invoke_viiiiijj,\"Ib\":invoke_viiiiijji,\"gb\":invoke_viiiiijjji,\"le\":invoke_viiiij,\"Sd\":invoke_viiiiji,\"ub\":invoke_viiiijii,\"ab\":invoke_viiiijiii,\"sd\":invoke_viiiijiiii,\"td\":invoke_viiiijiiiii,\"Qb\":invoke_viiiijiiiiiiii,\"pd\":invoke_viiiijj,\"Kb\":invoke_viiiijji,\"Jb\":invoke_viiiijjii,\"Lc\":invoke_viiiijjjj,\"ke\":invoke_viiij,\"qd\":invoke_viiiji,\"vd\":invoke_viiijii,\"Rc\":invoke_viiijiii,\"Dc\":invoke_viiijiiiijjj,\"yb\":invoke_viiijij,\"zb\":invoke_viiijijiji,\"eb\":invoke_viiijijjj,\"ee\":invoke_viiijj,\"nd\":invoke_viiijji,\"Lb\":invoke_viiijjii,\"Bc\":invoke_viiijjiij,\"Oc\":invoke_viiijjij,\"je\":invoke_viiijjj,\"bb\":invoke_viiijjjji,\"oe\":invoke_viij,\"Xd\":invoke_viiji,\"Yd\":invoke_viijii,\"Cd\":invoke_viijiii,\"wb\":invoke_viijiiii,\"Xc\":invoke_viijiiiii,\"Fc\":invoke_viijiiiiij,\"Ec\":invoke_viijiiiijj,\"Wc\":invoke_viijiiij,\"fb\":invoke_viijiijj,\"hd\":invoke_viijiijji,\"$c\":invoke_viijij,\"Xa\":invoke_viijiji,\"Cc\":invoke_viijijiiiijjj,\"ib\":invoke_viijijj,\"pe\":invoke_viijj,\"Nd\":invoke_viijji,\"Zc\":invoke_viijjii,\"Mc\":invoke_viijjij,\"ce\":invoke_viijjj,\"_b\":invoke_viijjji,\"me\":invoke_vij,\"ae\":invoke_viji,\"_c\":invoke_vijii,\"Hd\":invoke_vijiii,\"Gd\":invoke_vijiiii,\"Uc\":invoke_vijiiiji,\"qb\":invoke_vijiijj,\"fd\":invoke_vijij,\"cc\":invoke_vijijiiiijjj,\"he\":invoke_vijijj,\"_a\":invoke_vijijjiiiii,\"Nc\":invoke_vijijjiij,\"kb\":invoke_vijijjji,\"Wd\":invoke_vijj,\"Qc\":invoke_vijji,\"Ya\":invoke_vijjiiii,\"Za\":invoke_vijjiiiii,\"ac\":invoke_vijjij,\"de\":invoke_vijjj,\"kd\":invoke_vijjji,\"Ob\":invoke_vjii,\"Rb\":invoke_vjiiii,\"Bb\":invoke_vjiiiji,\"rd\":invoke_vjjii,\"jd\":invoke_vjjijij,\"H\":_llvm_eh_typeid_for,\"F\":_setTempRet0,\"Pa\":_strftime_l};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"Be\"]).apply(null,arguments)};var _main=Module[\"_main\"]=function(){return(_main=Module[\"_main\"]=Module[\"asm\"][\"Ce\"]).apply(null,arguments)};var _duckdb_web_fs_glob_add_path=Module[\"_duckdb_web_fs_glob_add_path\"]=function(){return(_duckdb_web_fs_glob_add_path=Module[\"_duckdb_web_fs_glob_add_path\"]=Module[\"asm\"][\"Ee\"]).apply(null,arguments)};var _duckdb_web_clear_response=Module[\"_duckdb_web_clear_response\"]=function(){return(_duckdb_web_clear_response=Module[\"_duckdb_web_clear_response\"]=Module[\"asm\"][\"Fe\"]).apply(null,arguments)};var _duckdb_web_fail_with=Module[\"_duckdb_web_fail_with\"]=function(){return(_duckdb_web_fail_with=Module[\"_duckdb_web_fail_with\"]=Module[\"asm\"][\"Ge\"]).apply(null,arguments)};var _duckdb_web_reset=Module[\"_duckdb_web_reset\"]=function(){return(_duckdb_web_reset=Module[\"_duckdb_web_reset\"]=Module[\"asm\"][\"He\"]).apply(null,arguments)};var _duckdb_web_connect=Module[\"_duckdb_web_connect\"]=function(){return(_duckdb_web_connect=Module[\"_duckdb_web_connect\"]=Module[\"asm\"][\"Ie\"]).apply(null,arguments)};var _duckdb_web_disconnect=Module[\"_duckdb_web_disconnect\"]=function(){return(_duckdb_web_disconnect=Module[\"_duckdb_web_disconnect\"]=Module[\"asm\"][\"Je\"]).apply(null,arguments)};var _duckdb_web_flush_files=Module[\"_duckdb_web_flush_files\"]=function(){return(_duckdb_web_flush_files=Module[\"_duckdb_web_flush_files\"]=Module[\"asm\"][\"Ke\"]).apply(null,arguments)};var _duckdb_web_flush_file=Module[\"_duckdb_web_flush_file\"]=function(){return(_duckdb_web_flush_file=Module[\"_duckdb_web_flush_file\"]=Module[\"asm\"][\"Le\"]).apply(null,arguments)};var _duckdb_web_open=Module[\"_duckdb_web_open\"]=function(){return(_duckdb_web_open=Module[\"_duckdb_web_open\"]=Module[\"asm\"][\"Me\"]).apply(null,arguments)};var _duckdb_web_collect_file_stats=Module[\"_duckdb_web_collect_file_stats\"]=function(){return(_duckdb_web_collect_file_stats=Module[\"_duckdb_web_collect_file_stats\"]=Module[\"asm\"][\"Ne\"]).apply(null,arguments)};var _duckdb_web_export_file_stats=Module[\"_duckdb_web_export_file_stats\"]=function(){return(_duckdb_web_export_file_stats=Module[\"_duckdb_web_export_file_stats\"]=Module[\"asm\"][\"Oe\"]).apply(null,arguments)};var _duckdb_web_fs_drop_file=Module[\"_duckdb_web_fs_drop_file\"]=function(){return(_duckdb_web_fs_drop_file=Module[\"_duckdb_web_fs_drop_file\"]=Module[\"asm\"][\"Pe\"]).apply(null,arguments)};var _duckdb_web_fs_drop_files=Module[\"_duckdb_web_fs_drop_files\"]=function(){return(_duckdb_web_fs_drop_files=Module[\"_duckdb_web_fs_drop_files\"]=Module[\"asm\"][\"Qe\"]).apply(null,arguments)};var _duckdb_web_fs_glob_file_infos=Module[\"_duckdb_web_fs_glob_file_infos\"]=function(){return(_duckdb_web_fs_glob_file_infos=Module[\"_duckdb_web_fs_glob_file_infos\"]=Module[\"asm\"][\"Re\"]).apply(null,arguments)};var _duckdb_web_fs_get_file_info_by_id=Module[\"_duckdb_web_fs_get_file_info_by_id\"]=function(){return(_duckdb_web_fs_get_file_info_by_id=Module[\"_duckdb_web_fs_get_file_info_by_id\"]=Module[\"asm\"][\"Se\"]).apply(null,arguments)};var _duckdb_web_fs_get_file_info_by_name=Module[\"_duckdb_web_fs_get_file_info_by_name\"]=function(){return(_duckdb_web_fs_get_file_info_by_name=Module[\"_duckdb_web_fs_get_file_info_by_name\"]=Module[\"asm\"][\"Te\"]).apply(null,arguments)};var _duckdb_web_fs_set_file_descriptor=Module[\"_duckdb_web_fs_set_file_descriptor\"]=function(){return(_duckdb_web_fs_set_file_descriptor=Module[\"_duckdb_web_fs_set_file_descriptor\"]=Module[\"asm\"][\"Ue\"]).apply(null,arguments)};var _duckdb_web_fs_register_file_url=Module[\"_duckdb_web_fs_register_file_url\"]=function(){return(_duckdb_web_fs_register_file_url=Module[\"_duckdb_web_fs_register_file_url\"]=Module[\"asm\"][\"Ve\"]).apply(null,arguments)};var _duckdb_web_fs_register_file_buffer=Module[\"_duckdb_web_fs_register_file_buffer\"]=function(){return(_duckdb_web_fs_register_file_buffer=Module[\"_duckdb_web_fs_register_file_buffer\"]=Module[\"asm\"][\"We\"]).apply(null,arguments)};var _duckdb_web_copy_file_to_buffer=Module[\"_duckdb_web_copy_file_to_buffer\"]=function(){return(_duckdb_web_copy_file_to_buffer=Module[\"_duckdb_web_copy_file_to_buffer\"]=Module[\"asm\"][\"Xe\"]).apply(null,arguments)};var _duckdb_web_copy_file_to_path=Module[\"_duckdb_web_copy_file_to_path\"]=function(){return(_duckdb_web_copy_file_to_path=Module[\"_duckdb_web_copy_file_to_path\"]=Module[\"asm\"][\"Ye\"]).apply(null,arguments)};var _duckdb_web_get_version=Module[\"_duckdb_web_get_version\"]=function(){return(_duckdb_web_get_version=Module[\"_duckdb_web_get_version\"]=Module[\"asm\"][\"Ze\"]).apply(null,arguments)};var _duckdb_web_get_feature_flags=Module[\"_duckdb_web_get_feature_flags\"]=function(){return(_duckdb_web_get_feature_flags=Module[\"_duckdb_web_get_feature_flags\"]=Module[\"asm\"][\"_e\"]).apply(null,arguments)};var _duckdb_web_tokenize=Module[\"_duckdb_web_tokenize\"]=function(){return(_duckdb_web_tokenize=Module[\"_duckdb_web_tokenize\"]=Module[\"asm\"][\"$e\"]).apply(null,arguments)};var _duckdb_web_prepared_create=Module[\"_duckdb_web_prepared_create\"]=function(){return(_duckdb_web_prepared_create=Module[\"_duckdb_web_prepared_create\"]=Module[\"asm\"][\"af\"]).apply(null,arguments)};var _duckdb_web_prepared_close=Module[\"_duckdb_web_prepared_close\"]=function(){return(_duckdb_web_prepared_close=Module[\"_duckdb_web_prepared_close\"]=Module[\"asm\"][\"bf\"]).apply(null,arguments)};var _duckdb_web_prepared_run=Module[\"_duckdb_web_prepared_run\"]=function(){return(_duckdb_web_prepared_run=Module[\"_duckdb_web_prepared_run\"]=Module[\"asm\"][\"cf\"]).apply(null,arguments)};var _duckdb_web_prepared_send=Module[\"_duckdb_web_prepared_send\"]=function(){return(_duckdb_web_prepared_send=Module[\"_duckdb_web_prepared_send\"]=Module[\"asm\"][\"df\"]).apply(null,arguments)};var _duckdb_web_query_run=Module[\"_duckdb_web_query_run\"]=function(){return(_duckdb_web_query_run=Module[\"_duckdb_web_query_run\"]=Module[\"asm\"][\"ef\"]).apply(null,arguments)};var _duckdb_web_query_send=Module[\"_duckdb_web_query_send\"]=function(){return(_duckdb_web_query_send=Module[\"_duckdb_web_query_send\"]=Module[\"asm\"][\"ff\"]).apply(null,arguments)};var _duckdb_web_query_fetch_results=Module[\"_duckdb_web_query_fetch_results\"]=function(){return(_duckdb_web_query_fetch_results=Module[\"_duckdb_web_query_fetch_results\"]=Module[\"asm\"][\"gf\"]).apply(null,arguments)};var _duckdb_web_insert_arrow_from_ipc_stream=Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"]=function(){return(_duckdb_web_insert_arrow_from_ipc_stream=Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"]=Module[\"asm\"][\"hf\"]).apply(null,arguments)};var _duckdb_web_insert_csv_from_path=Module[\"_duckdb_web_insert_csv_from_path\"]=function(){return(_duckdb_web_insert_csv_from_path=Module[\"_duckdb_web_insert_csv_from_path\"]=Module[\"asm\"][\"jf\"]).apply(null,arguments)};var _duckdb_web_insert_json_from_path=Module[\"_duckdb_web_insert_json_from_path\"]=function(){return(_duckdb_web_insert_json_from_path=Module[\"_duckdb_web_insert_json_from_path\"]=Module[\"asm\"][\"kf\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"lf\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"mf\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"nf\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"of\"]).apply(null,arguments)};var _setThrew=Module[\"_setThrew\"]=function(){return(_setThrew=Module[\"_setThrew\"]=Module[\"asm\"][\"pf\"]).apply(null,arguments)};var ___cxa_can_catch=Module[\"___cxa_can_catch\"]=function(){return(___cxa_can_catch=Module[\"___cxa_can_catch\"]=Module[\"asm\"][\"qf\"]).apply(null,arguments)};var ___cxa_is_pointer_type=Module[\"___cxa_is_pointer_type\"]=function(){return(___cxa_is_pointer_type=Module[\"___cxa_is_pointer_type\"]=Module[\"asm\"][\"rf\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"sf\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"tf\"]).apply(null,arguments)};var dynCall_viiij=Module[\"dynCall_viiij\"]=function(){return(dynCall_viiij=Module[\"dynCall_viiij\"]=Module[\"asm\"][\"uf\"]).apply(null,arguments)};var dynCall_viiijjj=Module[\"dynCall_viiijjj\"]=function(){return(dynCall_viiijjj=Module[\"dynCall_viiijjj\"]=Module[\"asm\"][\"vf\"]).apply(null,arguments)};var dynCall_iiij=Module[\"dynCall_iiij\"]=function(){return(dynCall_iiij=Module[\"dynCall_iiij\"]=Module[\"asm\"][\"wf\"]).apply(null,arguments)};var dynCall_vijijj=Module[\"dynCall_vijijj\"]=function(){return(dynCall_vijijj=Module[\"dynCall_vijijj\"]=Module[\"asm\"][\"xf\"]).apply(null,arguments)};var dynCall_iji=Module[\"dynCall_iji\"]=function(){return(dynCall_iji=Module[\"dynCall_iji\"]=Module[\"asm\"][\"yf\"]).apply(null,arguments)};var dynCall_vij=Module[\"dynCall_vij\"]=function(){return(dynCall_vij=Module[\"dynCall_vij\"]=Module[\"asm\"][\"zf\"]).apply(null,arguments)};var dynCall_viijj=Module[\"dynCall_viijj\"]=function(){return(dynCall_viijj=Module[\"dynCall_viijj\"]=Module[\"asm\"][\"Af\"]).apply(null,arguments)};var dynCall_ji=Module[\"dynCall_ji\"]=function(){return(dynCall_ji=Module[\"dynCall_ji\"]=Module[\"asm\"][\"Bf\"]).apply(null,arguments)};var dynCall_viiijj=Module[\"dynCall_viiijj\"]=function(){return(dynCall_viiijj=Module[\"dynCall_viiijj\"]=Module[\"asm\"][\"Cf\"]).apply(null,arguments)};var dynCall_vijjj=Module[\"dynCall_vijjj\"]=function(){return(dynCall_vijjj=Module[\"dynCall_vijjj\"]=Module[\"asm\"][\"Df\"]).apply(null,arguments)};var dynCall_jii=Module[\"dynCall_jii\"]=function(){return(dynCall_jii=Module[\"dynCall_jii\"]=Module[\"asm\"][\"Ef\"]).apply(null,arguments)};var dynCall_jiiii=Module[\"dynCall_jiiii\"]=function(){return(dynCall_jiiii=Module[\"dynCall_jiiii\"]=Module[\"asm\"][\"Ff\"]).apply(null,arguments)};var dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=function(){return(dynCall_iiiiij=Module[\"dynCall_iiiiij\"]=Module[\"asm\"][\"Gf\"]).apply(null,arguments)};var dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=function(){return(dynCall_iiiiijj=Module[\"dynCall_iiiiijj\"]=Module[\"asm\"][\"Hf\"]).apply(null,arguments)};var dynCall_viijii=Module[\"dynCall_viijii\"]=function(){return(dynCall_viijii=Module[\"dynCall_viijii\"]=Module[\"asm\"][\"If\"]).apply(null,arguments)};var dynCall_viiji=Module[\"dynCall_viiji\"]=function(){return(dynCall_viiji=Module[\"dynCall_viiji\"]=Module[\"asm\"][\"Jf\"]).apply(null,arguments)};var dynCall_vijj=Module[\"dynCall_vijj\"]=function(){return(dynCall_vijj=Module[\"dynCall_vijj\"]=Module[\"asm\"][\"Kf\"]).apply(null,arguments)};var dynCall_viji=Module[\"dynCall_viji\"]=function(){return(dynCall_viji=Module[\"dynCall_viji\"]=Module[\"asm\"][\"Lf\"]).apply(null,arguments)};var dynCall_iij=Module[\"dynCall_iij\"]=function(){return(dynCall_iij=Module[\"dynCall_iij\"]=Module[\"asm\"][\"Mf\"]).apply(null,arguments)};var dynCall_viij=Module[\"dynCall_viij\"]=function(){return(dynCall_viij=Module[\"dynCall_viij\"]=Module[\"asm\"][\"Nf\"]).apply(null,arguments)};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){return(dynCall_jiji=Module[\"dynCall_jiji\"]=Module[\"asm\"][\"Of\"]).apply(null,arguments)};var dynCall_viiiij=Module[\"dynCall_viiiij\"]=function(){return(dynCall_viiiij=Module[\"dynCall_viiiij\"]=Module[\"asm\"][\"Pf\"]).apply(null,arguments)};var dynCall_iiiij=Module[\"dynCall_iiiij\"]=function(){return(dynCall_iiiij=Module[\"dynCall_iiiij\"]=Module[\"asm\"][\"Qf\"]).apply(null,arguments)};var dynCall_iiiiiji=Module[\"dynCall_iiiiiji\"]=function(){return(dynCall_iiiiiji=Module[\"dynCall_iiiiiji\"]=Module[\"asm\"][\"Rf\"]).apply(null,arguments)};var dynCall_iiiji=Module[\"dynCall_iiiji\"]=function(){return(dynCall_iiiji=Module[\"dynCall_iiiji\"]=Module[\"asm\"][\"Sf\"]).apply(null,arguments)};var dynCall_iiiiji=Module[\"dynCall_iiiiji\"]=function(){return(dynCall_iiiiji=Module[\"dynCall_iiiiji\"]=Module[\"asm\"][\"Tf\"]).apply(null,arguments)};var dynCall_jiii=Module[\"dynCall_jiii\"]=function(){return(dynCall_jiii=Module[\"dynCall_jiii\"]=Module[\"asm\"][\"Uf\"]).apply(null,arguments)};var dynCall_jij=Module[\"dynCall_jij\"]=function(){return(dynCall_jij=Module[\"dynCall_jij\"]=Module[\"asm\"][\"Vf\"]).apply(null,arguments)};var dynCall_j=Module[\"dynCall_j\"]=function(){return(dynCall_j=Module[\"dynCall_j\"]=Module[\"asm\"][\"Wf\"]).apply(null,arguments)};var dynCall_viijij=Module[\"dynCall_viijij\"]=function(){return(dynCall_viijij=Module[\"dynCall_viijij\"]=Module[\"asm\"][\"Xf\"]).apply(null,arguments)};var dynCall_iijjijj=Module[\"dynCall_iijjijj\"]=function(){return(dynCall_iijjijj=Module[\"dynCall_iijjijj\"]=Module[\"asm\"][\"Yf\"]).apply(null,arguments)};var dynCall_viiiijiiiii=Module[\"dynCall_viiiijiiiii\"]=function(){return(dynCall_viiiijiiiii=Module[\"dynCall_viiiijiiiii\"]=Module[\"asm\"][\"Zf\"]).apply(null,arguments)};var dynCall_viiiijiiii=Module[\"dynCall_viiiijiiii\"]=function(){return(dynCall_viiiijiiii=Module[\"dynCall_viiiijiiii\"]=Module[\"asm\"][\"_f\"]).apply(null,arguments)};var dynCall_viiijii=Module[\"dynCall_viiijii\"]=function(){return(dynCall_viiijii=Module[\"dynCall_viiijii\"]=Module[\"asm\"][\"$f\"]).apply(null,arguments)};var dynCall_viiiiiij=Module[\"dynCall_viiiiiij\"]=function(){return(dynCall_viiiiiij=Module[\"dynCall_viiiiiij\"]=Module[\"asm\"][\"ag\"]).apply(null,arguments)};var dynCall_iiijiii=Module[\"dynCall_iiijiii\"]=function(){return(dynCall_iiijiii=Module[\"dynCall_iiijiii\"]=Module[\"asm\"][\"bg\"]).apply(null,arguments)};var dynCall_iiiiijii=Module[\"dynCall_iiiiijii\"]=function(){return(dynCall_iiiiijii=Module[\"dynCall_iiiiijii\"]=Module[\"asm\"][\"cg\"]).apply(null,arguments)};var dynCall_viijiii=Module[\"dynCall_viijiii\"]=function(){return(dynCall_viijiii=Module[\"dynCall_viijiii\"]=Module[\"asm\"][\"dg\"]).apply(null,arguments)};var dynCall_iiijiij=Module[\"dynCall_iiijiij\"]=function(){return(dynCall_iiijiij=Module[\"dynCall_iiijiij\"]=Module[\"asm\"][\"eg\"]).apply(null,arguments)};var dynCall_vijiii=Module[\"dynCall_vijiii\"]=function(){return(dynCall_vijiii=Module[\"dynCall_vijiii\"]=Module[\"asm\"][\"fg\"]).apply(null,arguments)};var dynCall_iijjiii=Module[\"dynCall_iijjiii\"]=function(){return(dynCall_iijjiii=Module[\"dynCall_iijjiii\"]=Module[\"asm\"][\"gg\"]).apply(null,arguments)};var dynCall_iijjiiii=Module[\"dynCall_iijjiiii\"]=function(){return(dynCall_iijjiiii=Module[\"dynCall_iijjiiii\"]=Module[\"asm\"][\"hg\"]).apply(null,arguments)};var dynCall_iiji=Module[\"dynCall_iiji\"]=function(){return(dynCall_iiji=Module[\"dynCall_iiji\"]=Module[\"asm\"][\"ig\"]).apply(null,arguments)};var dynCall_iijji=Module[\"dynCall_iijji\"]=function(){return(dynCall_iijji=Module[\"dynCall_iijji\"]=Module[\"asm\"][\"jg\"]).apply(null,arguments)};var dynCall_vijiiii=Module[\"dynCall_vijiiii\"]=function(){return(dynCall_vijiiii=Module[\"dynCall_vijiiii\"]=Module[\"asm\"][\"kg\"]).apply(null,arguments)};var dynCall_iijiiii=Module[\"dynCall_iijiiii\"]=function(){return(dynCall_iijiiii=Module[\"dynCall_iijiiii\"]=Module[\"asm\"][\"lg\"]).apply(null,arguments)};var dynCall_vijij=Module[\"dynCall_vijij\"]=function(){return(dynCall_vijij=Module[\"dynCall_vijij\"]=Module[\"asm\"][\"mg\"]).apply(null,arguments)};var dynCall_iiijjjj=Module[\"dynCall_iiijjjj\"]=function(){return(dynCall_iiijjjj=Module[\"dynCall_iiijjjj\"]=Module[\"asm\"][\"ng\"]).apply(null,arguments)};var dynCall_iiijiiii=Module[\"dynCall_iiijiiii\"]=function(){return(dynCall_iiijiiii=Module[\"dynCall_iiijiiii\"]=Module[\"asm\"][\"og\"]).apply(null,arguments)};var dynCall_jiiij=Module[\"dynCall_jiiij\"]=function(){return(dynCall_jiiij=Module[\"dynCall_jiiij\"]=Module[\"asm\"][\"pg\"]).apply(null,arguments)};var dynCall_iiiiijjiijj=Module[\"dynCall_iiiiijjiijj\"]=function(){return(dynCall_iiiiijjiijj=Module[\"dynCall_iiiiijjiijj\"]=Module[\"asm\"][\"qg\"]).apply(null,arguments)};var dynCall_viijiijji=Module[\"dynCall_viijiijji\"]=function(){return(dynCall_viijiijji=Module[\"dynCall_viijiijji\"]=Module[\"asm\"][\"rg\"]).apply(null,arguments)};var dynCall_vjjijij=Module[\"dynCall_vjjijij\"]=function(){return(dynCall_vjjijij=Module[\"dynCall_vjjijij\"]=Module[\"asm\"][\"sg\"]).apply(null,arguments)};var dynCall_vijjji=Module[\"dynCall_vijjji\"]=function(){return(dynCall_vijjji=Module[\"dynCall_vijjji\"]=Module[\"asm\"][\"tg\"]).apply(null,arguments)};var dynCall_vjjii=Module[\"dynCall_vjjii\"]=function(){return(dynCall_vjjii=Module[\"dynCall_vjjii\"]=Module[\"asm\"][\"ug\"]).apply(null,arguments)};var dynCall_viiiiiji=Module[\"dynCall_viiiiiji\"]=function(){return(dynCall_viiiiiji=Module[\"dynCall_viiiiiji\"]=Module[\"asm\"][\"vg\"]).apply(null,arguments)};var dynCall_jiiijji=Module[\"dynCall_jiiijji\"]=function(){return(dynCall_jiiijji=Module[\"dynCall_jiiijji\"]=Module[\"asm\"][\"wg\"]).apply(null,arguments)};var dynCall_iijj=Module[\"dynCall_iijj\"]=function(){return(dynCall_iijj=Module[\"dynCall_iijj\"]=Module[\"asm\"][\"xg\"]).apply(null,arguments)};var dynCall_iiijjii=Module[\"dynCall_iiijjii\"]=function(){return(dynCall_iiijjii=Module[\"dynCall_iiijjii\"]=Module[\"asm\"][\"yg\"]).apply(null,arguments)};var dynCall_iijjii=Module[\"dynCall_iijjii\"]=function(){return(dynCall_iijjii=Module[\"dynCall_iijjii\"]=Module[\"asm\"][\"zg\"]).apply(null,arguments)};var dynCall_vijii=Module[\"dynCall_vijii\"]=function(){return(dynCall_vijii=Module[\"dynCall_vijii\"]=Module[\"asm\"][\"Ag\"]).apply(null,arguments)};var dynCall_viijjii=Module[\"dynCall_viijjii\"]=function(){return(dynCall_viijjii=Module[\"dynCall_viijjii\"]=Module[\"asm\"][\"Bg\"]).apply(null,arguments)};var dynCall_viiiijj=Module[\"dynCall_viiiijj\"]=function(){return(dynCall_viiiijj=Module[\"dynCall_viiiijj\"]=Module[\"asm\"][\"Cg\"]).apply(null,arguments)};var dynCall_jijjij=Module[\"dynCall_jijjij\"]=function(){return(dynCall_jijjij=Module[\"dynCall_jijjij\"]=Module[\"asm\"][\"Dg\"]).apply(null,arguments)};var dynCall_jiijii=Module[\"dynCall_jiijii\"]=function(){return(dynCall_jiijii=Module[\"dynCall_jiijii\"]=Module[\"asm\"][\"Eg\"]).apply(null,arguments)};var dynCall_jijiii=Module[\"dynCall_jijiii\"]=function(){return(dynCall_jijiii=Module[\"dynCall_jijiii\"]=Module[\"asm\"][\"Fg\"]).apply(null,arguments)};var dynCall_viijiiiii=Module[\"dynCall_viijiiiii\"]=function(){return(dynCall_viijiiiii=Module[\"dynCall_viijiiiii\"]=Module[\"asm\"][\"Gg\"]).apply(null,arguments)};var dynCall_viijiiij=Module[\"dynCall_viijiiij\"]=function(){return(dynCall_viijiiij=Module[\"dynCall_viijiiij\"]=Module[\"asm\"][\"Hg\"]).apply(null,arguments)};var dynCall_vijiiiji=Module[\"dynCall_vijiiiji\"]=function(){return(dynCall_vijiiiji=Module[\"dynCall_vijiiiji\"]=Module[\"asm\"][\"Ig\"]).apply(null,arguments)};var dynCall_jiiji=Module[\"dynCall_jiiji\"]=function(){return(dynCall_jiiji=Module[\"dynCall_jiiji\"]=Module[\"asm\"][\"Jg\"]).apply(null,arguments)};var dynCall_viiijij=Module[\"dynCall_viiijij\"]=function(){return(dynCall_viiijij=Module[\"dynCall_viiijij\"]=Module[\"asm\"][\"Kg\"]).apply(null,arguments)};var dynCall_viijiijj=Module[\"dynCall_viijiijj\"]=function(){return(dynCall_viijiijj=Module[\"dynCall_viijiijj\"]=Module[\"asm\"][\"Lg\"]).apply(null,arguments)};var dynCall_viiiiijj=Module[\"dynCall_viiiiijj\"]=function(){return(dynCall_viiiiijj=Module[\"dynCall_viiiiijj\"]=Module[\"asm\"][\"Mg\"]).apply(null,arguments)};var dynCall_viiijji=Module[\"dynCall_viiijji\"]=function(){return(dynCall_viiijji=Module[\"dynCall_viiijji\"]=Module[\"asm\"][\"Ng\"]).apply(null,arguments)};var dynCall_viiiji=Module[\"dynCall_viiiji\"]=function(){return(dynCall_viiiji=Module[\"dynCall_viiiji\"]=Module[\"asm\"][\"Og\"]).apply(null,arguments)};var dynCall_iiiijiii=Module[\"dynCall_iiiijiii\"]=function(){return(dynCall_iiiijiii=Module[\"dynCall_iiiijiii\"]=Module[\"asm\"][\"Pg\"]).apply(null,arguments)};var dynCall_iiijij=Module[\"dynCall_iiijij\"]=function(){return(dynCall_iiijij=Module[\"dynCall_iiijij\"]=Module[\"asm\"][\"Qg\"]).apply(null,arguments)};var dynCall_iiijji=Module[\"dynCall_iiijji\"]=function(){return(dynCall_iiijji=Module[\"dynCall_iiijji\"]=Module[\"asm\"][\"Rg\"]).apply(null,arguments)};var dynCall_viijji=Module[\"dynCall_viijji\"]=function(){return(dynCall_viijji=Module[\"dynCall_viijji\"]=Module[\"asm\"][\"Sg\"]).apply(null,arguments)};var dynCall_iiiijj=Module[\"dynCall_iiiijj\"]=function(){return(dynCall_iiiijj=Module[\"dynCall_iiiijj\"]=Module[\"asm\"][\"Tg\"]).apply(null,arguments)};var dynCall_viiijiii=Module[\"dynCall_viiijiii\"]=function(){return(dynCall_viiijiii=Module[\"dynCall_viiijiii\"]=Module[\"asm\"][\"Ug\"]).apply(null,arguments)};var dynCall_vijji=Module[\"dynCall_vijji\"]=function(){return(dynCall_vijji=Module[\"dynCall_vijji\"]=Module[\"asm\"][\"Vg\"]).apply(null,arguments)};var dynCall_jiiiij=Module[\"dynCall_jiiiij\"]=function(){return(dynCall_jiiiij=Module[\"dynCall_jiiiij\"]=Module[\"asm\"][\"Wg\"]).apply(null,arguments)};var dynCall_jiijiiiii=Module[\"dynCall_jiijiiiii\"]=function(){return(dynCall_jiijiiiii=Module[\"dynCall_jiijiiiii\"]=Module[\"asm\"][\"Xg\"]).apply(null,arguments)};var dynCall_jiijiijiii=Module[\"dynCall_jiijiijiii\"]=function(){return(dynCall_jiijiijiii=Module[\"dynCall_jiijiijiii\"]=Module[\"asm\"][\"Yg\"]).apply(null,arguments)};var dynCall_jiijjiii=Module[\"dynCall_jiijjiii\"]=function(){return(dynCall_jiijjiii=Module[\"dynCall_jiijjiii\"]=Module[\"asm\"][\"Zg\"]).apply(null,arguments)};var dynCall_jiijijii=Module[\"dynCall_jiijijii\"]=function(){return(dynCall_jiijijii=Module[\"dynCall_jiijijii\"]=Module[\"asm\"][\"_g\"]).apply(null,arguments)};var dynCall_viiijjij=Module[\"dynCall_viiijjij\"]=function(){return(dynCall_viiijjij=Module[\"dynCall_viiijjij\"]=Module[\"asm\"][\"$g\"]).apply(null,arguments)};var dynCall_vijijjiij=Module[\"dynCall_vijijjiij\"]=function(){return(dynCall_vijijjiij=Module[\"dynCall_vijijjiij\"]=Module[\"asm\"][\"ah\"]).apply(null,arguments)};var dynCall_viijjij=Module[\"dynCall_viijjij\"]=function(){return(dynCall_viijjij=Module[\"dynCall_viijjij\"]=Module[\"asm\"][\"bh\"]).apply(null,arguments)};var dynCall_viiijjiij=Module[\"dynCall_viiijjiij\"]=function(){return(dynCall_viiijjiij=Module[\"dynCall_viiijjiij\"]=Module[\"asm\"][\"ch\"]).apply(null,arguments)};var dynCall_viiiijjjj=Module[\"dynCall_viiiijjjj\"]=function(){return(dynCall_viiiijjjj=Module[\"dynCall_viiiijjjj\"]=Module[\"asm\"][\"dh\"]).apply(null,arguments)};var dynCall_viijiiiiij=Module[\"dynCall_viijiiiiij\"]=function(){return(dynCall_viijiiiiij=Module[\"dynCall_viijiiiiij\"]=Module[\"asm\"][\"eh\"]).apply(null,arguments)};var dynCall_viijiiiijj=Module[\"dynCall_viijiiiijj\"]=function(){return(dynCall_viijiiiijj=Module[\"dynCall_viijiiiijj\"]=Module[\"asm\"][\"fh\"]).apply(null,arguments)};var dynCall_viiijiiiijjj=Module[\"dynCall_viiijiiiijjj\"]=function(){return(dynCall_viiijiiiijjj=Module[\"dynCall_viiijiiiijjj\"]=Module[\"asm\"][\"gh\"]).apply(null,arguments)};var dynCall_viijijiiiijjj=Module[\"dynCall_viijijiiiijjj\"]=function(){return(dynCall_viijijiiiijjj=Module[\"dynCall_viijijiiiijjj\"]=Module[\"asm\"][\"hh\"]).apply(null,arguments)};var dynCall_jiiijii=Module[\"dynCall_jiiijii\"]=function(){return(dynCall_jiiijii=Module[\"dynCall_jiiijii\"]=Module[\"asm\"][\"ih\"]).apply(null,arguments)};var dynCall_viiiiijiiii=Module[\"dynCall_viiiiijiiii\"]=function(){return(dynCall_viiiiijiiii=Module[\"dynCall_viiiiijiiii\"]=Module[\"asm\"][\"jh\"]).apply(null,arguments)};var dynCall_iiijii=Module[\"dynCall_iiijii\"]=function(){return(dynCall_iiijii=Module[\"dynCall_iiijii\"]=Module[\"asm\"][\"kh\"]).apply(null,arguments)};var dynCall_fiijii=Module[\"dynCall_fiijii\"]=function(){return(dynCall_fiijii=Module[\"dynCall_fiijii\"]=Module[\"asm\"][\"lh\"]).apply(null,arguments)};var dynCall_diijii=Module[\"dynCall_diijii\"]=function(){return(dynCall_diijii=Module[\"dynCall_diijii\"]=Module[\"asm\"][\"mh\"]).apply(null,arguments)};var dynCall_iiiiiiijii=Module[\"dynCall_iiiiiiijii\"]=function(){return(dynCall_iiiiiiijii=Module[\"dynCall_iiiiiiijii\"]=Module[\"asm\"][\"nh\"]).apply(null,arguments)};var dynCall_viiiiji=Module[\"dynCall_viiiiji\"]=function(){return(dynCall_viiiiji=Module[\"dynCall_viiiiji\"]=Module[\"asm\"][\"oh\"]).apply(null,arguments)};var dynCall_jiiiijii=Module[\"dynCall_jiiiijii\"]=function(){return(dynCall_jiiiijii=Module[\"dynCall_jiiiijii\"]=Module[\"asm\"][\"ph\"]).apply(null,arguments)};var dynCall_jiiiijiiiiiiii=Module[\"dynCall_jiiiijiiiiiiii\"]=function(){return(dynCall_jiiiijiiiiiiii=Module[\"dynCall_jiiiijiiiiiiii\"]=Module[\"asm\"][\"qh\"]).apply(null,arguments)};var dynCall_jiiiiijiiii=Module[\"dynCall_jiiiiijiiii\"]=function(){return(dynCall_jiiiiijiiii=Module[\"dynCall_jiiiiijiiii\"]=Module[\"asm\"][\"rh\"]).apply(null,arguments)};var dynCall_jiiijiii=Module[\"dynCall_jiiijiii\"]=function(){return(dynCall_jiiijiii=Module[\"dynCall_jiiijiii\"]=Module[\"asm\"][\"sh\"]).apply(null,arguments)};var dynCall_jj=Module[\"dynCall_jj\"]=function(){return(dynCall_jj=Module[\"dynCall_jj\"]=Module[\"asm\"][\"th\"]).apply(null,arguments)};var dynCall_jd=Module[\"dynCall_jd\"]=function(){return(dynCall_jd=Module[\"dynCall_jd\"]=Module[\"asm\"][\"uh\"]).apply(null,arguments)};var dynCall_jf=Module[\"dynCall_jf\"]=function(){return(dynCall_jf=Module[\"dynCall_jf\"]=Module[\"asm\"][\"vh\"]).apply(null,arguments)};var dynCall_iijjjj=Module[\"dynCall_iijjjj\"]=function(){return(dynCall_iijjjj=Module[\"dynCall_iijjjj\"]=Module[\"asm\"][\"wh\"]).apply(null,arguments)};var dynCall_iiijj=Module[\"dynCall_iiijj\"]=function(){return(dynCall_iiijj=Module[\"dynCall_iiijj\"]=Module[\"asm\"][\"xh\"]).apply(null,arguments)};var dynCall_vijijiiiijjj=Module[\"dynCall_vijijiiiijjj\"]=function(){return(dynCall_vijijiiiijjj=Module[\"dynCall_vijijiiiijjj\"]=Module[\"asm\"][\"yh\"]).apply(null,arguments)};var dynCall_iiiiiiji=Module[\"dynCall_iiiiiiji\"]=function(){return(dynCall_iiiiiiji=Module[\"dynCall_iiiiiiji\"]=Module[\"asm\"][\"zh\"]).apply(null,arguments)};var dynCall_iiiiiiiiji=Module[\"dynCall_iiiiiiiiji\"]=function(){return(dynCall_iiiiiiiiji=Module[\"dynCall_iiiiiiiiji\"]=Module[\"asm\"][\"Ah\"]).apply(null,arguments)};var dynCall_jijijjij=Module[\"dynCall_jijijjij\"]=function(){return(dynCall_jijijjij=Module[\"dynCall_jijijjij\"]=Module[\"asm\"][\"Bh\"]).apply(null,arguments)};var dynCall_vijjij=Module[\"dynCall_vijjij\"]=function(){return(dynCall_vijjij=Module[\"dynCall_vijjij\"]=Module[\"asm\"][\"Ch\"]).apply(null,arguments)};var dynCall_viijjj=Module[\"dynCall_viijjj\"]=function(){return(dynCall_viijjj=Module[\"dynCall_viijjj\"]=Module[\"asm\"][\"Dh\"]).apply(null,arguments)};var dynCall_viijjji=Module[\"dynCall_viijjji\"]=function(){return(dynCall_viijjji=Module[\"dynCall_viijjji\"]=Module[\"asm\"][\"Eh\"]).apply(null,arguments)};var dynCall_iiiiiij=Module[\"dynCall_iiiiiij\"]=function(){return(dynCall_iiiiiij=Module[\"dynCall_iiiiiij\"]=Module[\"asm\"][\"Fh\"]).apply(null,arguments)};var dynCall_iiiiiiiiiiji=Module[\"dynCall_iiiiiiiiiiji\"]=function(){return(dynCall_iiiiiiiiiiji=Module[\"dynCall_iiiiiiiiiiji\"]=Module[\"asm\"][\"Gh\"]).apply(null,arguments)};var dynCall_jiiiiiii=Module[\"dynCall_jiiiiiii\"]=function(){return(dynCall_jiiiiiii=Module[\"dynCall_jiiiiiii\"]=Module[\"asm\"][\"Hh\"]).apply(null,arguments)};var dynCall_jijj=Module[\"dynCall_jijj\"]=function(){return(dynCall_jijj=Module[\"dynCall_jijj\"]=Module[\"asm\"][\"Ih\"]).apply(null,arguments)};var dynCall_viiiijiiiiiiii=Module[\"dynCall_viiiijiiiiiiii\"]=function(){return(dynCall_viiiijiiiiiiii=Module[\"dynCall_viiiijiiiiiiii\"]=Module[\"asm\"][\"Jh\"]).apply(null,arguments)};var dynCall_ij=Module[\"dynCall_ij\"]=function(){return(dynCall_ij=Module[\"dynCall_ij\"]=Module[\"asm\"][\"Kh\"]).apply(null,arguments)};var dynCall_jjj=Module[\"dynCall_jjj\"]=function(){return(dynCall_jjj=Module[\"dynCall_jjj\"]=Module[\"asm\"][\"Lh\"]).apply(null,arguments)};var dynCall_vjii=Module[\"dynCall_vjii\"]=function(){return(dynCall_vjii=Module[\"dynCall_vjii\"]=Module[\"asm\"][\"Mh\"]).apply(null,arguments)};var dynCall_vjiiii=Module[\"dynCall_vjiiii\"]=function(){return(dynCall_vjiiii=Module[\"dynCall_vjiiii\"]=Module[\"asm\"][\"Nh\"]).apply(null,arguments)};var dynCall_viiiiijiii=Module[\"dynCall_viiiiijiii\"]=function(){return(dynCall_viiiiijiii=Module[\"dynCall_viiiiijiii\"]=Module[\"asm\"][\"Oh\"]).apply(null,arguments)};var dynCall_jiij=Module[\"dynCall_jiij\"]=function(){return(dynCall_jiij=Module[\"dynCall_jiij\"]=Module[\"asm\"][\"Ph\"]).apply(null,arguments)};var dynCall_iiiijjii=Module[\"dynCall_iiiijjii\"]=function(){return(dynCall_iiiijjii=Module[\"dynCall_iiiijjii\"]=Module[\"asm\"][\"Qh\"]).apply(null,arguments)};var dynCall_iiiiijji=Module[\"dynCall_iiiiijji\"]=function(){return(dynCall_iiiiijji=Module[\"dynCall_iiiiijji\"]=Module[\"asm\"][\"Rh\"]).apply(null,arguments)};var dynCall_viiijjii=Module[\"dynCall_viiijjii\"]=function(){return(dynCall_viiijjii=Module[\"dynCall_viiijjii\"]=Module[\"asm\"][\"Sh\"]).apply(null,arguments)};var dynCall_viiiijji=Module[\"dynCall_viiiijji\"]=function(){return(dynCall_viiiijji=Module[\"dynCall_viiiijji\"]=Module[\"asm\"][\"Th\"]).apply(null,arguments)};var dynCall_viiiijjii=Module[\"dynCall_viiiijjii\"]=function(){return(dynCall_viiiijjii=Module[\"dynCall_viiiijjii\"]=Module[\"asm\"][\"Uh\"]).apply(null,arguments)};var dynCall_viiiiijji=Module[\"dynCall_viiiiijji\"]=function(){return(dynCall_viiiiijji=Module[\"dynCall_viiiiijji\"]=Module[\"asm\"][\"Vh\"]).apply(null,arguments)};var dynCall_iidj=Module[\"dynCall_iidj\"]=function(){return(dynCall_iidj=Module[\"dynCall_iidj\"]=Module[\"asm\"][\"Wh\"]).apply(null,arguments)};var dynCall_ijji=Module[\"dynCall_ijji\"]=function(){return(dynCall_ijji=Module[\"dynCall_ijji\"]=Module[\"asm\"][\"Xh\"]).apply(null,arguments)};var dynCall_iiiiiiiij=Module[\"dynCall_iiiiiiiij\"]=function(){return(dynCall_iiiiiiiij=Module[\"dynCall_iiiiiiiij\"]=Module[\"asm\"][\"Yh\"]).apply(null,arguments)};var dynCall_iiiiiiij=Module[\"dynCall_iiiiiiij\"]=function(){return(dynCall_iiiiiiij=Module[\"dynCall_iiiiiiij\"]=Module[\"asm\"][\"Zh\"]).apply(null,arguments)};var dynCall_iiiiiiiiiiiij=Module[\"dynCall_iiiiiiiiiiiij\"]=function(){return(dynCall_iiiiiiiiiiiij=Module[\"dynCall_iiiiiiiiiiiij\"]=Module[\"asm\"][\"_h\"]).apply(null,arguments)};var dynCall_iiiiiiiji=Module[\"dynCall_iiiiiiiji\"]=function(){return(dynCall_iiiiiiiji=Module[\"dynCall_iiiiiiiji\"]=Module[\"asm\"][\"$h\"]).apply(null,arguments)};var dynCall_iiiidjj=Module[\"dynCall_iiiidjj\"]=function(){return(dynCall_iiiidjj=Module[\"dynCall_iiiidjj\"]=Module[\"asm\"][\"ai\"]).apply(null,arguments)};var dynCall_iiiijjj=Module[\"dynCall_iiiijjj\"]=function(){return(dynCall_iiiijjj=Module[\"dynCall_iiiijjj\"]=Module[\"asm\"][\"bi\"]).apply(null,arguments)};var dynCall_jiiiii=Module[\"dynCall_jiiiii\"]=function(){return(dynCall_jiiiii=Module[\"dynCall_jiiiii\"]=Module[\"asm\"][\"ci\"]).apply(null,arguments)};var dynCall_jiiiiiijii=Module[\"dynCall_jiiiiiijii\"]=function(){return(dynCall_jiiiiiijii=Module[\"dynCall_jiiiiiijii\"]=Module[\"asm\"][\"di\"]).apply(null,arguments)};var dynCall_iiiijji=Module[\"dynCall_iiiijji\"]=function(){return(dynCall_iiiijji=Module[\"dynCall_iiiijji\"]=Module[\"asm\"][\"ei\"]).apply(null,arguments)};var dynCall_jiiiiii=Module[\"dynCall_jiiiiii\"]=function(){return(dynCall_jiiiiii=Module[\"dynCall_jiiiiii\"]=Module[\"asm\"][\"fi\"]).apply(null,arguments)};var dynCall_iijiji=Module[\"dynCall_iijiji\"]=function(){return(dynCall_iijiji=Module[\"dynCall_iijiji\"]=Module[\"asm\"][\"gi\"]).apply(null,arguments)};var dynCall_vjiiiji=Module[\"dynCall_vjiiiji\"]=function(){return(dynCall_vjiiiji=Module[\"dynCall_vjiiiji\"]=Module[\"asm\"][\"hi\"]).apply(null,arguments)};var dynCall_viiijijiji=Module[\"dynCall_viiijijiji\"]=function(){return(dynCall_viiijijiji=Module[\"dynCall_viiijijiji\"]=Module[\"asm\"][\"ii\"]).apply(null,arguments)};var dynCall_jiiijj=Module[\"dynCall_jiiijj\"]=function(){return(dynCall_jiiijj=Module[\"dynCall_jiiijj\"]=Module[\"asm\"][\"ji\"]).apply(null,arguments)};var dynCall_viijiiii=Module[\"dynCall_viijiiii\"]=function(){return(dynCall_viijiiii=Module[\"dynCall_viijiiii\"]=Module[\"asm\"][\"ki\"]).apply(null,arguments)};var dynCall_iiiijii=Module[\"dynCall_iiiijii\"]=function(){return(dynCall_iiiijii=Module[\"dynCall_iiiijii\"]=Module[\"asm\"][\"li\"]).apply(null,arguments)};var dynCall_viiiijii=Module[\"dynCall_viiiijii\"]=function(){return(dynCall_viiiijii=Module[\"dynCall_viiiijii\"]=Module[\"asm\"][\"mi\"]).apply(null,arguments)};var dynCall_iijiii=Module[\"dynCall_iijiii\"]=function(){return(dynCall_iijiii=Module[\"dynCall_iijiii\"]=Module[\"asm\"][\"ni\"]).apply(null,arguments)};var dynCall_jiiiiji=Module[\"dynCall_jiiiiji\"]=function(){return(dynCall_jiiiiji=Module[\"dynCall_jiiiiji\"]=Module[\"asm\"][\"oi\"]).apply(null,arguments)};var dynCall_vijiijj=Module[\"dynCall_vijiijj\"]=function(){return(dynCall_vijiijj=Module[\"dynCall_vijiijj\"]=Module[\"asm\"][\"pi\"]).apply(null,arguments)};var dynCall_vifiijj=Module[\"dynCall_vifiijj\"]=function(){return(dynCall_vifiijj=Module[\"dynCall_vifiijj\"]=Module[\"asm\"][\"qi\"]).apply(null,arguments)};var dynCall_vidiijj=Module[\"dynCall_vidiijj\"]=function(){return(dynCall_vidiijj=Module[\"dynCall_vidiijj\"]=Module[\"asm\"][\"ri\"]).apply(null,arguments)};var dynCall_viiiiij=Module[\"dynCall_viiiiij\"]=function(){return(dynCall_viiiiij=Module[\"dynCall_viiiiij\"]=Module[\"asm\"][\"si\"]).apply(null,arguments)};var dynCall_ijj=Module[\"dynCall_ijj\"]=function(){return(dynCall_ijj=Module[\"dynCall_ijj\"]=Module[\"asm\"][\"ti\"]).apply(null,arguments)};var dynCall_ijjiii=Module[\"dynCall_ijjiii\"]=function(){return(dynCall_ijjiii=Module[\"dynCall_ijjiii\"]=Module[\"asm\"][\"ui\"]).apply(null,arguments)};var dynCall_vijijjji=Module[\"dynCall_vijijjji\"]=function(){return(dynCall_vijijjji=Module[\"dynCall_vijijjji\"]=Module[\"asm\"][\"vi\"]).apply(null,arguments)};var dynCall_viiiiijjji=Module[\"dynCall_viiiiijjji\"]=function(){return(dynCall_viiiiijjji=Module[\"dynCall_viiiiijjji\"]=Module[\"asm\"][\"wi\"]).apply(null,arguments)};var dynCall_viijijj=Module[\"dynCall_viijijj\"]=function(){return(dynCall_viijijj=Module[\"dynCall_viijijj\"]=Module[\"asm\"][\"xi\"]).apply(null,arguments)};var dynCall_iiijiijj=Module[\"dynCall_iiijiijj\"]=function(){return(dynCall_iiijiijj=Module[\"dynCall_iiijiijj\"]=Module[\"asm\"][\"yi\"]).apply(null,arguments)};var dynCall_viiijijjj=Module[\"dynCall_viiijijjj\"]=function(){return(dynCall_viiijijjj=Module[\"dynCall_viiijijjj\"]=Module[\"asm\"][\"zi\"]).apply(null,arguments)};var dynCall_iijiijj=Module[\"dynCall_iijiijj\"]=function(){return(dynCall_iijiijj=Module[\"dynCall_iijiijj\"]=Module[\"asm\"][\"Ai\"]).apply(null,arguments)};var dynCall_viiijjjji=Module[\"dynCall_viiijjjji\"]=function(){return(dynCall_viiijjjji=Module[\"dynCall_viiijjjji\"]=Module[\"asm\"][\"Bi\"]).apply(null,arguments)};var dynCall_viiiijiii=Module[\"dynCall_viiiijiii\"]=function(){return(dynCall_viiiijiii=Module[\"dynCall_viiiijiii\"]=Module[\"asm\"][\"Ci\"]).apply(null,arguments)};var dynCall_iijii=Module[\"dynCall_iijii\"]=function(){return(dynCall_iijii=Module[\"dynCall_iijii\"]=Module[\"asm\"][\"Di\"]).apply(null,arguments)};var dynCall_vijjiiii=Module[\"dynCall_vijjiiii\"]=function(){return(dynCall_vijjiiii=Module[\"dynCall_vijjiiii\"]=Module[\"asm\"][\"Ei\"]).apply(null,arguments)};var dynCall_vijijjiiiii=Module[\"dynCall_vijijjiiiii\"]=function(){return(dynCall_vijijjiiiii=Module[\"dynCall_vijijjiiiii\"]=Module[\"asm\"][\"Fi\"]).apply(null,arguments)};var dynCall_vijjiiiii=Module[\"dynCall_vijjiiiii\"]=function(){return(dynCall_vijjiiiii=Module[\"dynCall_vijjiiiii\"]=Module[\"asm\"][\"Gi\"]).apply(null,arguments)};var dynCall_iiijjji=Module[\"dynCall_iiijjji\"]=function(){return(dynCall_iiijjji=Module[\"dynCall_iiijjji\"]=Module[\"asm\"][\"Hi\"]).apply(null,arguments)};var dynCall_iiiiijjj=Module[\"dynCall_iiiiijjj\"]=function(){return(dynCall_iiiiijjj=Module[\"dynCall_iiiiijjj\"]=Module[\"asm\"][\"Ii\"]).apply(null,arguments)};var dynCall_jijiiii=Module[\"dynCall_jijiiii\"]=function(){return(dynCall_jijiiii=Module[\"dynCall_jijiiii\"]=Module[\"asm\"][\"Ji\"]).apply(null,arguments)};var dynCall_iiijjjii=Module[\"dynCall_iiijjjii\"]=function(){return(dynCall_iiijjjii=Module[\"dynCall_iiijjjii\"]=Module[\"asm\"][\"Ki\"]).apply(null,arguments)};var dynCall_iiiiijjji=Module[\"dynCall_iiiiijjji\"]=function(){return(dynCall_iiiiijjji=Module[\"dynCall_iiiiijjji\"]=Module[\"asm\"][\"Li\"]).apply(null,arguments)};var dynCall_viijiji=Module[\"dynCall_viijiji\"]=function(){return(dynCall_viijiji=Module[\"dynCall_viijiji\"]=Module[\"asm\"][\"Mi\"]).apply(null,arguments)};function invoke_v(index){var sp=stackSave();try{wasmTable.get(index)()}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ii(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fiii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_diii(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viif(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viid(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iff(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_idd(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_i(index){var sp=stackSave();try{return wasmTable.get(index)()}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_idiii(index,a1,a2,a3,a4){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iidii(index,a1,a2,a3,a4){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viidii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vif(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vid(index,a1,a2){var sp=stackSave();try{wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_di(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiid(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiid(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vifi(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vidi(index,a1,a2,a3){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iid(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiidiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fi(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fff(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ddd(index,a1,a2){var sp=stackSave();try{return wasmTable.get(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiif(index,a1,a2,a3){var sp=stackSave();try{return wasmTable.get(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiidiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{wasmTable.get(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_if(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_id(index,a1){var sp=stackSave();try{return wasmTable.get(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiii(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiiii(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijj(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viijj(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viij(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_viij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiiiij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vij(index,a1,a2,a3){var sp=stackSave();try{dynCall_vij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viiiij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiij(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_viiij(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiij(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iiij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vijijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iji(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iji(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ji(index,a1){var sp=stackSave();try{return dynCall_ji(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiijj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_vijjj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijjj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viji(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_viji(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jii(index,a1,a2){var sp=stackSave();try{return dynCall_jii(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ijj(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_ijj(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ijjiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_ijjiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_viiji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijj(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_vijj(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iij(index,a1,a2,a3){var sp=stackSave();try{return dynCall_iij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiij(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iiiij(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiijj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiiiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiijij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iiiji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijj(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iijj(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiijji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viijji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_j(index){var sp=stackSave();try{return dynCall_j(index)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiiiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiiiji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiii(index,a1,a2,a3){var sp=stackSave();try{return dynCall_jiii(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vijiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_vijiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiijiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viijiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiijiij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iijji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiji(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iiji(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiijii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iijjijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viiiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjjii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vjjii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_viiiji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiijji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jij(index,a1,a2,a3){var sp=stackSave();try{return dynCall_jij(index,a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiij(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jiiij(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vijjji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjjijij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_vjjijij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jiiji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viijiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vijij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijjiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14){var sp=stackSave();try{return dynCall_iiiiijjiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijjii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viijij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{dynCall_vijii(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijjii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jiijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jijiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_vijiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijjij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jijjij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijji(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vijji(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiij(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jiiiij(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_vijijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiiijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_jiijiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_jiijiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_jiijjiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiijijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_jiijijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viijiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viijiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15){var sp=stackSave();try{dynCall_viiijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17){var sp=stackSave();try{dynCall_viijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viiijjiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jiiiii(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_jiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiijii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_viiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_fiijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_fiijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_diijii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_diijii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiiiiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14){var sp=stackSave();try{return dynCall_jiiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_jiiiiijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_jiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jj(index,a1,a2){var sp=stackSave();try{return dynCall_jj(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jd(index,a1){var sp=stackSave();try{return dynCall_jd(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jf(index,a1){var sp=stackSave();try{return dynCall_jf(index,a1)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_jiiiiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ijji(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_ijji(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiiiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijj(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iiijj(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iijjjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16){var sp=stackSave();try{dynCall_vijijiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_jijijjij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vijjij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiiiij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{return dynCall_iiiiiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiiiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13){var sp=stackSave();try{return dynCall_iiiiiiiiiiiij(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_ij(index,a1,a2){var sp=stackSave();try{return dynCall_ij(index,a1,a2)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiij(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiij(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjiiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{dynCall_vjiiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14){var sp=stackSave();try{dynCall_viiiijiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jjj(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jjj(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjii(index,a1,a2,a3,a4){var sp=stackSave();try{dynCall_vjii(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiijjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viiiiijji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iidj(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_iidj(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiiiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiidjj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{return dynCall_iiiidjj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iijiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vjiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vjiiiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiji(index,a1,a2,a3,a4){var sp=stackSave();try{return dynCall_jiji(index,a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijijiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiijijiji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijij(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiijij(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiijj(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiijj(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijiiii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiijii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_iiiijii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viiiijii(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiii(index,a1,a2,a3,a4,a5,a6){var sp=stackSave();try{return dynCall_iijiii(index,a1,a2,a3,a4,a5,a6)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jiiiiji(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jiiiiji(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_vijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vifiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vifiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vidiijj(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_vidiijj(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiij(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{dynCall_viiiiij(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{dynCall_vijijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijj(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_jijj(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viijijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_viijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiijijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iijiijj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{return dynCall_iiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiijjjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){var sp=stackSave();try{dynCall_viiijjjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_viiiijiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iijii(index,a1,a2,a3,a4,a5){var sp=stackSave();try{return dynCall_iijii(index,a1,a2,a3,a4,a5)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13){var sp=stackSave();try{dynCall_vijijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{dynCall_vijjiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_vijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){var sp=stackSave();try{dynCall_vijjiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_viijiji(index,a1,a2,a3,a4,a5,a6,a7,a8){var sp=stackSave();try{dynCall_viijiji(index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_jijiiii(index,a1,a2,a3,a4,a5,a6,a7){var sp=stackSave();try{return dynCall_jijiiii(index,a1,a2,a3,a4,a5,a6,a7)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiijjjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiijjjii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){var sp=stackSave();try{return dynCall_iiiiijjj(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}function invoke_iiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){var sp=stackSave();try{return dynCall_iiiiijjji(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){stackRestore(sp);if(e!==e+0&&e!==\"longjmp\")throw e;_setThrew(1,0)}}Module[\"ccall\"]=ccall;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}var calledMain=false;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function callMain(args){var entryFunction=Module[\"_main\"];var argc=0;var argv=0;try{var ret=entryFunction(argc,argv);exit(ret,true);return ret}catch(e){return handleException(e)}finally{calledMain=true}}function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();if(shouldRunNow)callMain(args);postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;function exit(status,implicit){EXITSTATUS=status;if(keepRuntimeAlive()){}else{exitRuntime()}procExit(status)}function procExit(code){EXITSTATUS=code;if(!keepRuntimeAlive()){if(Module[\"onExit\"])Module[\"onExit\"](code);ABORT=true}quit_(code,new ExitStatus(code))}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"])shouldRunNow=false;run();\n\n\n  return DuckDB.ready\n}\n);\n})();\nexport default DuckDB;", "import DuckDBWasm from './duckdb_wasm.js';\nimport { DuckDBModule } from './duckdb_module';\nimport { DuckDBBindingsBase } from './bindings_base';\nimport { DuckDBRuntime } from './runtime';\nimport { Logger } from '../log';\nimport fs from 'fs';\n\ndeclare global {\n    // eslint-disable-next-line no-var\n    var DUCKDB_RUNTIME: any;\n}\n\n/** DuckDB bindings for node.js */\nexport class DuckDBNodeBindings extends DuckDBBindingsBase {\n    /** The path of the wasm module */\n    protected readonly mainModulePath: string;\n    /** The path of the pthread worker script */\n    protected readonly pthreadWorkerPath: string | null;\n\n    /** Constructor */\n    public constructor(\n        logger: Logger,\n        runtime: DuckDBRuntime,\n        mainModulePath: string,\n        pthreadWorkerPath: string | null,\n    ) {\n        super(logger, runtime);\n        this.mainModulePath = mainModulePath;\n        this.pthreadWorkerPath = pthreadWorkerPath;\n    }\n\n    /** Locate a file */\n    protected locateFile(path: string, prefix: string): string {\n        if (path.endsWith('.wasm')) {\n            return this.mainModulePath;\n        }\n        if (path.endsWith('.worker.js')) {\n            if (!this.pthreadWorkerPath) {\n                throw new Error('Missing DuckDB worker path!');\n            }\n            return this.pthreadWorkerPath!;\n        }\n        throw new Error(`WASM instantiation requested unexpected file: prefix=${prefix} path=${path}`);\n    }\n\n    /** Instantiate the wasm module */\n    protected instantiateWasm(\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        imports: any,\n        success: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\n    ): Emscripten.WebAssemblyExports {\n        globalThis.DUCKDB_RUNTIME = {};\n        for (const func of Object.getOwnPropertyNames(this._runtime)) {\n            if (func == 'constructor') continue;\n            globalThis.DUCKDB_RUNTIME[func] = Object.getOwnPropertyDescriptor(this._runtime, func)!.value;\n        }\n        const buf = fs.readFileSync(this.mainModulePath);\n        WebAssembly.instantiate(buf, imports).then(output => {\n            success(output.instance, output.module);\n        });\n        return [];\n    }\n\n    /** Instantiate the bindings */\n    protected instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule> {\n        return DuckDBWasm({\n            ...moduleOverrides,\n            instantiateWasm: this.instantiateWasm.bind(this),\n        });\n    }\n}\n", "import DuckDBWasm from './duckdb_wasm.js';\nimport { DuckDBNodeBindings } from './bindings_node_base.js';\nimport { Logger } from '../log.js';\nimport { DuckDBModule } from './duckdb_module';\nimport { DuckDBRuntime } from './runtime';\n\n/** DuckDB bindings for node.js */\nexport class DuckDB extends DuckDBNodeBindings {\n    /** Constructor */\n    public constructor(\n        logger: Logger,\n        runtime: DuckDBRuntime,\n        mainModulePath: string,\n        pthreadWorkerPath: string | null = null,\n    ) {\n        super(logger, runtime, mainModulePath, pthreadWorkerPath);\n    }\n\n    /** Instantiate the bindings */\n    protected instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule> {\n        return DuckDBWasm({\n            ...moduleOverrides,\n            instantiateWasm: this.instantiateWasm.bind(this),\n            locateFile: this.locateFile.bind(this),\n        });\n    }\n}\n\nexport default DuckDB;\n", "import fs from 'fs';\nimport {\n    DuckDBRuntime,\n    DuckDBFileInfo,\n    callSRet,\n    dropResponseBuffers,\n    failWith,\n    readString,\n    decodeText,\n    DuckDBDataProtocol,\n} from './runtime';\nimport { StatusCode } from '../status';\nimport { DuckDBModule } from './duckdb_module';\nimport * as fg from 'fast-glob';\n\nexport const NODE_RUNTIME: DuckDBRuntime & {\n    fileInfoCache: Map<number, DuckDBFileInfo>;\n\n    resolveFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null;\n} = {\n    fileInfoCache: new Map<number, DuckDBFileInfo>(),\n\n    resolveFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null {\n        try {\n            const cached = NODE_RUNTIME.fileInfoCache.get(fileId);\n            if (cached) return cached;\n            const [s, d, n] = callSRet(mod, 'duckdb_web_fs_get_file_info_by_id', ['number'], [fileId]);\n            if (s !== StatusCode.SUCCESS) {\n                failWith(mod, readString(mod, d, n));\n                return null;\n            }\n            const infoStr = readString(mod, d, n);\n            dropResponseBuffers(mod);\n            const info = JSON.parse(infoStr) as DuckDBFileInfo;\n            if (info == null) return null;\n            NODE_RUNTIME.fileInfoCache.set(fileId, info);\n            return info as DuckDBFileInfo;\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return null;\n        }\n    },\n\n    testPlatformFeature: (_mod: DuckDBModule, feature: number): boolean => {\n        switch (feature) {\n            case 1:\n                return typeof BigInt64Array !== 'undefined';\n            default:\n                console.warn(`test for unknown feature: ${feature}`);\n                return false;\n        }\n    },\n\n    openFile(mod: DuckDBModule, fileId: number): number {\n        try {\n            NODE_RUNTIME.fileInfoCache.delete(fileId);\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                // Native file\n                case DuckDBDataProtocol.NATIVE: {\n                    file.dataNativeFd = fs.openSync(\n                        file.dataUrl!,\n                        fs.constants.O_CREAT | fs.constants.O_RDWR,\n                        fs.constants.S_IRUSR | fs.constants.S_IWUSR,\n                    );\n                    const [s, d, n] = callSRet(\n                        mod,\n                        'duckdb_web_fs_set_file_descriptor',\n                        ['number', 'number'],\n                        [fileId, file.dataNativeFd],\n                    );\n                    if (s !== StatusCode.SUCCESS) {\n                        failWith(mod, readString(mod, d, n));\n                    }\n                    const fileSize = fs.fstatSync(file.dataNativeFd!).size;\n                    const result = mod._malloc(2 * 8);\n                    mod.HEAPF64[(result >> 3) + 0] = +fileSize;\n                    mod.HEAPF64[(result >> 3) + 1] = 0;\n                    return result;\n                }\n                // HTTP file\n                case DuckDBDataProtocol.HTTP:\n                    failWith(mod, 'Not implemented');\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    syncFile: (_mod: DuckDBModule, _fileId: number) => {},\n    closeFile: (mod: DuckDBModule, fileId: number) => {\n        try {\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\n            NODE_RUNTIME.fileInfoCache.delete(fileId);\n            switch (file?.dataProtocol) {\n                case DuckDBDataProtocol.NATIVE: {\n                    if (!file.dataNativeFd) {\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\n                        return 0;\n                    }\n                    fs.closeSync(file.dataNativeFd);\n                    file.dataNativeFd = null;\n                    break;\n                }\n                case DuckDBDataProtocol.HTTP:\n                    failWith(mod, `Not implemented`);\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    truncateFile: (mod: DuckDBModule, fileId: number, newSize: number) => {\n        try {\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                case DuckDBDataProtocol.NATIVE: {\n                    if (!file.dataNativeFd) {\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\n                        return 0;\n                    }\n                    fs.truncateSync(file.dataUrl!, newSize);\n                    break;\n                }\n                case DuckDBDataProtocol.HTTP:\n                    failWith(mod, `Not implemented`);\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    readFile: (mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) => {\n        try {\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                case DuckDBDataProtocol.NATIVE: {\n                    if (!file.dataNativeFd) {\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\n                        return 0;\n                    }\n                    return fs.readSync(file.dataNativeFd!, mod.HEAPU8, buf, bytes, location);\n                }\n                case DuckDBDataProtocol.HTTP:\n                    failWith(mod, `Not implemented`);\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    writeFile: (mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) => {\n        try {\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                case DuckDBDataProtocol.NATIVE: {\n                    if (!file.dataNativeFd) {\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\n                        return 0;\n                    }\n                    const src = mod.HEAPU8.subarray(buf, buf + bytes);\n                    return fs.writeSync(file.dataNativeFd!, src, 0, src.length, location);\n                }\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n    getLastFileModificationTime: (mod: DuckDBModule, fileId: number) => {\n        try {\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\n            switch (file?.dataProtocol) {\n                case DuckDBDataProtocol.NATIVE: {\n                    if (!file.dataNativeFd) {\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\n                        return 0;\n                    }\n                    return fs.fstatSync(file.dataNativeFd!).mtime.getTime();\n                }\n                case DuckDBDataProtocol.HTTP:\n                    failWith(mod, 'Not implemented');\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n        }\n        return 0;\n    },\n\n    checkDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\n            return fs.existsSync(path);\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return false;\n        }\n    },\n    createDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\n            return fs.mkdirSync(path);\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    removeDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\n            return fs.rmdirSync(path);\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    listDirectoryEntries: (mod: DuckDBModule, _pathPtr: number, _pathLen: number) => {\n        failWith(mod, 'Not Implemented');\n        return false;\n    },\n    glob: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = readString(mod, pathPtr, pathLen);\n            const entries = fg.sync([path], { dot: true });\n            for (const entry of entries) {\n                mod.ccall('duckdb_web_fs_glob_add_path', null, ['string'], [entry]);\n            }\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    moveFile: (mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number) => {\n        try {\n            const from = decodeText(mod.HEAPU8.subarray(fromPtr, fromPtr + fromLen));\n            const to = decodeText(mod.HEAPU8.subarray(toPtr, toPtr + toLen));\n            return fs.renameSync(from, to);\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n    checkFile: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\n            return fs.existsSync(path);\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return false;\n        }\n    },\n    removeFile: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\n        try {\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\n            return fs.rmSync(path);\n        } catch (e: any) {\n            failWith(mod, e.toString());\n            return 0;\n        }\n    },\n};\n\nexport default NODE_RUNTIME;\n", "import * as arrow from 'apache-arrow';\nimport * as utils from '../utils';\nimport { AsyncDuckDB } from './async_bindings';\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\n\n/** A thin helper to memoize the connection id */\nexport class AsyncDuckDBConnection {\n    /** The async duckdb */\n    protected readonly _bindings: AsyncDuckDB;\n    /** The conn handle */\n    protected readonly _conn: number;\n\n    constructor(bindings: AsyncDuckDB, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Access the database bindings */\n    public get bindings(): AsyncDuckDB {\n        return this._bindings;\n    }\n\n    /** Disconnect from the database */\n    public async close(): Promise<void> {\n        return this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const buffer = await this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a query */\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const header = await this._bindings.sendQuery(this._conn, text);\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n\n    /** Create a prepared statement */\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<AsyncPreparedStatement> {\n        const stmt = await this._bindings.createPrepared(this._conn, text);\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert arrow vectors */\n    public async insertArrowVectors<T extends { [key: string]: arrow.Vector } = any>(\n        children: T,\n        options: ArrowInsertOptions,\n    ): Promise<void> {\n        await this.insertArrowTable(arrow.Table.new(children), options);\n    }\n    /** Insert an arrow table */\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\n        if (table.schema.fields.length == 0) {\n            console.warn(\n                'The schema is empty! If you used arrow.Table.from, consider constructing schema and batches manually',\n            );\n        }\n        await this.insertArrowBatches(table.schema, table.chunks, options);\n    }\n    /** Insert record batches */\n    public async insertArrowBatches(\n        schema: arrow.Schema,\n        batches: Iterable<arrow.RecordBatch>,\n        options: ArrowInsertOptions,\n    ): Promise<void> {\n        // Prepare the IPC stream writer\n        const buffer = new utils.IPCBuffer();\n        const writer = new arrow.RecordBatchStreamWriter().reset(buffer, schema);\n\n        // Write all batches to the ipc buffer\n        let first = true;\n        for (const batch of batches) {\n            if (!first) {\n                await this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n            }\n            first = false;\n            writer.write(batch);\n        }\n        writer.finish();\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer.flush(), options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n\n    /** Insert csv file from path */\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\n    }\n    /** Insert json file from path */\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\n    }\n}\n\n/** An async result stream iterator */\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\n    /** First chunk? */\n    protected _first: boolean;\n    /** Reached end of stream? */\n    protected _depleted: boolean;\n    /** In-flight */\n    protected _inFlight: Promise<Uint8Array> | null;\n\n    constructor(\n        protected readonly db: AsyncDuckDB,\n        protected readonly conn: number,\n        protected readonly header: Uint8Array,\n    ) {\n        this._first = true;\n        this._depleted = false;\n        this._inFlight = null;\n    }\n\n    async next(): Promise<IteratorResult<Uint8Array>> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        let buffer: Uint8Array;\n        if (this._inFlight != null) {\n            buffer = await this._inFlight;\n            this._inFlight = null;\n        } else {\n            buffer = await this.db.fetchQueryResults(this.conn);\n        }\n        this._depleted = buffer.length == 0;\n        if (!this._depleted) {\n            this._inFlight = this.db.fetchQueryResults(this.conn);\n        }\n        return {\n            done: this._depleted,\n            value: buffer,\n        };\n    }\n\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id */\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: AsyncDuckDB;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public async close() {\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n}\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { LogEntryVariant } from '../log';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { WebFile } from '../bindings/web_file';\n\nexport type ConnectionID = number;\nexport type StatementID = number;\n\nexport enum WorkerRequestType {\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\n    CONNECT = 'CONNECT',\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\n    CREATE_PREPARED = 'CREATE_PREPARED',\n    DISCONNECT = 'DISCONNECT',\n    DROP_FILE = 'DROP_FILE',\n    DROP_FILES = 'DROP_FILES',\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\n    FLUSH_FILES = 'FLUSH_FILES',\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\n    GET_VERSION = 'GET_VERSION',\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\n    INSTANTIATE = 'INSTANTIATE',\n    OPEN = 'OPEN',\n    PING = 'PING',\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\n    RESET = 'RESET',\n    RUN_PREPARED = 'RUN_PREPARED',\n    RUN_QUERY = 'RUN_QUERY',\n    SEND_PREPARED = 'SEND_PREPARED',\n    SEND_QUERY = 'SEND_QUERY',\n    TOKENIZE = 'TOKENIZE',\n}\n\nexport enum WorkerResponseType {\n    CONNECTION_INFO = 'CONNECTION_INFO',\n    ERROR = 'ERROR',\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\n    FILE_BUFFER = 'FILE_BUFFER',\n    FILE_INFOS = 'FILE_INFOS',\n    FILE_SIZE = 'FILE_SIZE',\n    FILE_STATISTICS = 'FILE_STATISTICS',\n    LOG = 'LOG',\n    OK = 'OK',\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\n    QUERY_PLAN = 'QUERY_PLAN',\n    QUERY_RESULT = 'QUERY_RESULT',\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\n    QUERY_START = 'QUERY_START',\n    REGISTERED_FILE = 'REGISTERED_FILE',\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\n    SUCCESS = 'SUCCESS',\n    VERSION_STRING = 'VERSION_STRING',\n}\n\nexport type WorkerRequest<T, P> = {\n    readonly messageId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerResponse<T, P> = {\n    readonly messageId: number;\n    readonly requestId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\n\nexport class WorkerTask<T, D, P> {\n    readonly type: T;\n    readonly data: D;\n    promise: Promise<P>;\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\n    promiseRejecter: (value: any) => void = () => {};\n\n    constructor(type: T, data: D) {\n        this.type = type;\n        this.data = data;\n        this.promise = new Promise<P>(\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\n                this.promiseResolver = resolve;\n                this.promiseRejecter = reject;\n            },\n        );\n    }\n}\n\nexport type WorkerRequestVariant =\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\n    | WorkerRequest<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined]\n      >\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\n    | WorkerRequest<WorkerRequestType.PING, null>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string]>\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\n    | WorkerRequest<WorkerRequestType.RESET, null>\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.SEND_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\n\nexport type WorkerResponseVariant =\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\n    | WorkerResponse<WorkerResponseType.ERROR, any>\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\n    | WorkerResponse<WorkerResponseType.OK, null>\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_START, Uint8Array>\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\n\nexport type WorkerTaskVariant =\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, boolean>\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\n    | WorkerTask<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined],\n          null\n      >\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\n    | WorkerTask<WorkerRequestType.PING, null, null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\n    | WorkerTask<WorkerRequestType.RESET, null, null>\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\n", "import {\n    WorkerRequestType,\n    WorkerResponseType,\n    WorkerResponseVariant,\n    WorkerTaskVariant,\n    WorkerTask,\n    ConnectionID,\n    WorkerTaskReturnType,\n} from './worker_request';\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\nimport { Logger } from '../log';\nimport { AsyncDuckDBConnection } from './async_connection';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { flattenArrowField } from '../flat_arrow';\nimport { WebFile } from '../bindings/web_file';\n\nconst TEXT_ENCODER = new TextEncoder();\n\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\n    /** The message handler */\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\n    /** The error handler */\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\n    /** The close handler */\n    protected readonly _onCloseHandler: () => void;\n\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** The worker */\n    protected _worker: Worker | null = null;\n    /** The promise for the worker shutdown */\n    protected _workerShutdownPromise: Promise<null> | null = null;\n    /** Make the worker as terminated */\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\n\n    /** The next message id */\n    protected _nextMessageId = 0;\n    /** The pending requests */\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\n\n    constructor(logger: Logger, worker: Worker | null = null) {\n        this._logger = logger;\n        this._onMessageHandler = this.onMessage.bind(this);\n        this._onErrorHandler = this.onError.bind(this);\n        this._onCloseHandler = this.onClose.bind(this);\n        if (worker != null) this.attach(worker);\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n\n    /** Attach to worker */\n    protected attach(worker: Worker): void {\n        this._worker = worker;\n        this._worker.addEventListener('message', this._onMessageHandler);\n        this._worker.addEventListener('error', this._onErrorHandler);\n        this._worker.addEventListener('close', this._onCloseHandler);\n        this._workerShutdownPromise = new Promise<null>(\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\n                this._workerShutdownResolver = resolve;\n            },\n        );\n    }\n\n    /** Detach from worker */\n    public detach(): void {\n        if (!this._worker) return;\n        this._worker.removeEventListener('message', this._onMessageHandler);\n        this._worker.removeEventListener('error', this._onErrorHandler);\n        this._worker.removeEventListener('close', this._onCloseHandler);\n        this._worker = null;\n        this._workerShutdownResolver(null);\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Kill the worker */\n    public async terminate(): Promise<void> {\n        if (!this._worker) return;\n        this._worker.terminate();\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\n        this._worker = null;\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Post a task */\n    protected async postTask<W extends WorkerTaskVariant>(\n        task: W,\n        transfer: ArrayBuffer[] = [],\n    ): Promise<WorkerTaskReturnType<W>> {\n        if (!this._worker) {\n            console.error('cannot send a message since the worker is not set!');\n            return undefined as any;\n        }\n        const mid = this._nextMessageId++;\n        this._pendingRequests.set(mid, task);\n        this._worker.postMessage({\n            messageId: mid,\n            type: task.type,\n            data: task.data,\n        });\n        return (await task.promise) as WorkerTaskReturnType<W>;\n    }\n\n    /** Received a message */\n    protected onMessage(event: MessageEvent): void {\n        const response = event.data as WorkerResponseVariant;\n\n        // Short-circuit unassociated log entries\n        if (response.type == WorkerResponseType.LOG) {\n            this._logger.log(response.data);\n        }\n\n        // Get associated task\n        const task = this._pendingRequests.get(response.requestId);\n        if (!task) {\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\n            return;\n        }\n        this._pendingRequests.delete(response.requestId);\n\n        // Request failed?\n        if (response.type == WorkerResponseType.ERROR) {\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n            const e = new Error(response.data.message);\n            e.name = response.data.name;\n            e.stack = response.data.stack;\n\n            task.promiseRejecter(e);\n            return;\n        }\n\n        // Otherwise differentiate between the tasks first\n        switch (task.type) {\n            case WorkerRequestType.CLOSE_PREPARED:\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\n            case WorkerRequestType.COPY_FILE_TO_PATH:\n            case WorkerRequestType.DISCONNECT:\n            case WorkerRequestType.DROP_FILES:\n            case WorkerRequestType.FLUSH_FILES:\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\n            case WorkerRequestType.INSTANTIATE:\n            case WorkerRequestType.OPEN:\n            case WorkerRequestType.PING:\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\n            case WorkerRequestType.REGISTER_FILE_URL:\n            case WorkerRequestType.RESET:\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GLOB_FILE_INFOS:\n                if (response.type == WorkerResponseType.FILE_INFOS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_VERSION:\n                if (response.type == WorkerResponseType.VERSION_STRING) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_FEATURE_FLAGS:\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.TOKENIZE:\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.DROP_FILE:\n                if (response.type == WorkerResponseType.SUCCESS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CONNECT:\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.RUN_PREPARED:\n            case WorkerRequestType.RUN_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.SEND_PREPARED:\n            case WorkerRequestType.SEND_QUERY:\n                if (response.type == WorkerResponseType.QUERY_START) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CREATE_PREPARED:\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n        }\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\n    }\n\n    /** Received an error */\n    protected onError(event: ErrorEvent): void {\n        console.error(event);\n        console.error(`error in duckdb worker: ${event.message}`);\n        this._pendingRequests.clear();\n    }\n\n    /** The worker was closed */\n    protected onClose(): void {\n        this._workerShutdownResolver(null);\n        if (this._pendingRequests.size != 0) {\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\n            return;\n        }\n        this._pendingRequests.clear();\n    }\n\n    /** Reset the duckdb */\n    public async reset(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\n        return await this.postTask(task);\n    }\n\n    /** Ping the worker thread */\n    public async ping(): Promise<any> {\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\n        await this.postTask(task);\n    }\n    /** Try to drop a file */\n    public async dropFile(name: string): Promise<boolean> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, boolean>(WorkerRequestType.DROP_FILE, name);\n        return await this.postTask(task);\n    }\n    /** Try to drop files */\n    public async dropFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\n        return await this.postTask(task);\n    }\n    /** Flush all files */\n    public async flushFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\n        return await this.postTask(task);\n    }\n\n    /** Open the database */\n    public async instantiate(mainModuleURL: string, pthreadWorkerURL: string | null = null): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\n            WorkerRequestType.INSTANTIATE,\n            [mainModuleURL, pthreadWorkerURL],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get the version */\n    public async getVersion(): Promise<string> {\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\n        const version = await this.postTask(task);\n        return version;\n    }\n\n    /** Get the feature flags */\n    public async getFeatureFlags(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\n            WorkerRequestType.GET_FEATURE_FLAGS,\n            null,\n        );\n        const feature = await this.postTask(task);\n        return feature;\n    }\n\n    /** Open a new database */\n    public async open(config: DuckDBConfig): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\n        await this.postTask(task);\n    }\n\n    /** Tokenize a script text */\n    public async tokenize(text: string): Promise<ScriptTokens> {\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\n        const tokens = await this.postTask(task);\n        return tokens;\n    }\n\n    /** Connect to the database */\n    public async connectInternal(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\n        return await this.postTask(task);\n    }\n\n    /** Connect to the database */\n    public async connect(): Promise<AsyncDuckDBConnection> {\n        const cid = await this.connectInternal();\n        return new AsyncDuckDBConnection(this, cid);\n    }\n\n    /** Disconnect from the database */\n    public async disconnect(conn: ConnectionID): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\n            WorkerRequestType.DISCONNECT,\n            conn,\n        );\n        await this.postTask(task);\n    }\n\n    /** Run a query */\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.RUN_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Send a query */\n    public async sendQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.SEND_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Fetch query results */\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\n            WorkerRequestType.FETCH_QUERY_RESULTS,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Prepare a statement and return its identifier */\n    public async createPrepared(conn: number, text: string): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\n            WorkerRequestType.CREATE_PREPARED,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n    /** Close a prepared statement */\n    public async closePrepared(conn: number, statement: number): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\n            WorkerRequestType.CLOSE_PREPARED,\n            [conn, statement],\n        );\n        await this.postTask(task);\n    }\n    /** Execute a prepared statement and return the full result */\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.RUN_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Execute a prepared statement and stream the result */\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.SEND_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Glob file infos */\n    public async globFiles(path: string): Promise<WebFile[]> {\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\n            WorkerRequestType.GLOB_FILE_INFOS,\n            path,\n        );\n        return await this.postTask(task);\n    }\n    /** Register file text */\n    public async registerFileText(name: string, text: string): Promise<void> {\n        const buffer = TEXT_ENCODER.encode(text);\n        await this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file path. */\n    public async registerFileURL(name: string, url: string): Promise<void> {\n        if (url === undefined) {\n            url = name;\n        }\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>(\n            WorkerRequestType.REGISTER_FILE_URL,\n            [name, url],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register an empty file buffer. */\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, new Uint8Array()],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register a file buffer. */\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, buffer],\n        );\n        await this.postTask(task, [buffer.buffer]);\n    }\n\n    /** Register a file handle. */\n    public async registerFileHandle<HandleType>(name: string, handle: HandleType): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>(\n            WorkerRequestType.REGISTER_FILE_HANDLE,\n            [name, handle],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Enable file statistics */\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\n            [name, enable],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Export file statistics */\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\n            name,\n        );\n        return await this.postTask(task, []);\n    }\n\n    /** Copy a file to a buffer. */\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\n            name,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Copy a file to a path. */\n    public async copyFileToPath(name: string, path: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\n            WorkerRequestType.COPY_FILE_TO_PATH,\n            [name, path],\n        );\n        await this.postTask(task);\n    }\n\n    /** Insert arrow from an ipc stream */\n    public async insertArrowFromIPCStream(\n        conn: ConnectionID,\n        buffer: Uint8Array,\n        options?: ArrowInsertOptions,\n    ): Promise<void> {\n        // Pass to the worker\n        const task = new WorkerTask<\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n            [number, Uint8Array, ArrowInsertOptions | undefined],\n            null\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\n        await this.postTask(task, [buffer.buffer]);\n    }\n    /** Insert a csv file */\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(flattenArrowField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n    /** Insert a json file */\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(flattenArrowField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n}\n", "import * as check from 'wasm-feature-detect';\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nexport interface DuckDBBundles {\n    asyncDefault: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    asyncNext?: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    asyncNextCOI?: {\n        mainModule: string;\n        mainWorker: string;\n        pthreadWorker: string;\n    };\n}\n\nfunction getWorkerURL(url: string) {\n    const content = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([content], { type: 'text/javascript' }));\n}\n\nexport function getJsDelivrBundles(): DuckDBBundles {\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\n    return {\n        asyncDefault: {\n            mainModule: `${jsdelivr_dist_url}duckdb.wasm`,\n            mainWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async.worker.js`),\n        },\n        asyncNext: {\n            mainModule: `${jsdelivr_dist_url}duckdb-next.wasm`,\n            mainWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async-next.worker.js`),\n        },\n        asyncNextCOI: {\n            mainModule: `${jsdelivr_dist_url}duckdb-next-coi.wasm`,\n            mainWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async-next-coi.worker.js`),\n            pthreadWorker: getWorkerURL(`${jsdelivr_dist_url}duckdb-browser-async-next-coi.pthread.worker.js`),\n        },\n    };\n}\n\nexport interface DuckDBBundle {\n    mainModule: string;\n    mainWorker: string | null;\n    pthreadWorker: string | null;\n}\n\nexport interface PlatformFeatures {\n    bigInt64Array: boolean;\n    crossOriginIsolated: boolean;\n    wasmExceptions: boolean;\n    wasmSIMD: boolean;\n    wasmBulkMemory: boolean;\n    wasmThreads: boolean;\n}\n\nlet bigInt64Array: boolean | null = null;\nlet wasmExceptions: boolean | null = null;\nlet wasmThreads: boolean | null = null;\nlet wasmSIMD: boolean | null = null;\nlet wasmBulkMemory: boolean | null = null;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace globalThis {\n    let crossOriginIsolated: boolean;\n}\n\nfunction isNode(): boolean {\n    return typeof process !== 'undefined' && process.release.name === 'node';\n}\n\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\n    if (bigInt64Array == null) {\n        bigInt64Array = typeof BigInt64Array != 'undefined';\n    }\n    if (wasmExceptions == null) {\n        wasmExceptions = await check.exceptions();\n    }\n    if (wasmThreads == null) {\n        wasmThreads = await check.threads();\n    }\n    if (wasmSIMD == null) {\n        wasmSIMD = await check.simd();\n    }\n    if (wasmBulkMemory == null) {\n        wasmBulkMemory = await check.bulkMemory();\n    }\n    return {\n        bigInt64Array: bigInt64Array!,\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\n        wasmExceptions: wasmExceptions!,\n        wasmSIMD: wasmSIMD!,\n        wasmThreads: wasmThreads!,\n        wasmBulkMemory: wasmBulkMemory!,\n    };\n}\n\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\n    const platform = await getPlatformFeatures();\n    if (platform.wasmExceptions && platform.wasmSIMD) {\n        if (platform.wasmThreads && platform.crossOriginIsolated && bundles.asyncNextCOI) {\n            return {\n                mainModule: bundles.asyncNextCOI.mainModule,\n                mainWorker: bundles.asyncNextCOI.mainWorker,\n                pthreadWorker: bundles.asyncNextCOI.pthreadWorker,\n            };\n        }\n        if (bundles.asyncNext) {\n            return {\n                mainModule: bundles.asyncNext.mainModule,\n                mainWorker: bundles.asyncNext.mainWorker,\n                pthreadWorker: null,\n            };\n        }\n    }\n    return {\n        mainModule: bundles.asyncDefault.mainModule,\n        mainWorker: bundles.asyncDefault.mainWorker,\n        pthreadWorker: null,\n    };\n}\n", "import config from '../package.json';\n\nexport const PACKAGE_NAME = config.name;\nexport const PACKAGE_VERSION = config.version;\n\nconst VERSION_PARTS = config.version.split('.');\nexport const PACKAGE_VERSION_MAJOR = VERSION_PARTS[0];\nexport const PACKAGE_VERSION_MINOR = VERSION_PARTS[1];\nexport const PACKAGE_VERSION_PATCH = VERSION_PARTS[2];\n", "import * as duckdb_sync from '../src/targets/duckdb-node-sync';\nimport * as duckdb_async from '../src/targets/duckdb-node-async';\nimport path from 'path';\nimport Worker from 'web-worker';\nimport fs from 'fs';\n\n// Loading debug symbols, especially for WASM take insanely long so we just disable the test timeout\njasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\n\n// Resolve a buffer by fetching from disk\nconst dataDir = path.resolve(__dirname, '../../../data');\nconst resolveBuffer = (url: string) => {\n    const p = path.join(dataDir, url);\n    if (!fs.existsSync(p)) return null;\n    return new Uint8Array(fs.readFileSync(p));\n};\n\n// Resolve test data\nconst resolveData = async (url: string) => {\n    switch (url) {\n        case '/uni/all.zip':\n            return await resolveBuffer('/uni/all.zip');\n        case '/uni/assistenten.parquet':\n            return await resolveBuffer('/uni/assistenten.parquet');\n        case '/uni/studenten.parquet':\n            return await resolveBuffer('/uni/studenten.parquet');\n        case '/uni/hoeren.parquet':\n            return await resolveBuffer('/uni/hoeren.parquet');\n        case '/uni/vorlesungen.parquet':\n            return await resolveBuffer('/uni/vorlesungen.parquet');\n        default:\n            return null;\n    }\n};\n\n// Test environment\nlet db: duckdb_sync.DuckDB | null = null;\nlet adb: duckdb_async.AsyncDuckDB | null = null;\nlet worker: Worker | null = null;\n\nbeforeAll(async () => {\n    // Configure the worker\n    const DUCKDB_CONFIG = await duckdb_async.selectBundle({\n        asyncDefault: {\n            mainModule: path.resolve(__dirname, './duckdb.wasm'),\n            mainWorker: path.resolve(__dirname, './duckdb-node-async.worker.js'),\n        },\n        asyncNext: {\n            mainModule: path.resolve(__dirname, './duckdb-next.wasm'),\n            mainWorker: path.resolve(__dirname, './duckdb-node-async-next.worker.js'),\n        },\n    });\n\n    const logger = new duckdb_sync.VoidLogger();\n    db = await new duckdb_sync.DuckDB(\n        logger,\n        duckdb_sync.NODE_RUNTIME,\n        path.resolve(__dirname, './duckdb.wasm'),\n    ).instantiate();\n\n    worker = new Worker(DUCKDB_CONFIG.mainWorker);\n    adb = new duckdb_async.AsyncDuckDB(logger, worker);\n    await adb.instantiate(DUCKDB_CONFIG.mainModule, DUCKDB_CONFIG.pthreadWorker);\n});\n\nafterAll(async () => {\n    if (worker) worker.terminate();\n});\n\nimport { testBindings, testAsyncBindings } from './bindings.test';\nimport { testBatchStream } from './batch_stream.test';\nimport { testFilesystem } from './filesystem.test';\nimport { testAsyncBatchStream } from './batch_stream_async.test';\nimport { testArrowInsert, testArrowInsertAsync } from './insert_arrow.test';\nimport { testJSONInsert, testJSONInsertAsync } from './insert_json.test';\nimport { testCSVInsert, testCSVInsertAsync } from './insert_csv.test';\nimport { testTokenization, testTokenizationAsync } from './tokenizer.test';\nimport { testRegressionAsync } from './regression';\n\ntestRegressionAsync(() => adb!);\ntestBindings(() => db!, dataDir);\ntestAsyncBindings(() => adb!, dataDir);\ntestBatchStream(() => db!);\ntestAsyncBatchStream(() => adb!);\ntestFilesystem(() => adb!, resolveData, dataDir);\ntestArrowInsert(() => db!);\ntestArrowInsertAsync(() => adb!);\ntestJSONInsert(() => db!);\ntestJSONInsertAsync(() => adb!);\ntestCSVInsert(() => db!);\ntestCSVInsertAsync(() => adb!);\ntestTokenization(() => db!);\ntestTokenizationAsync(() => adb!);\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\n\nexport function testBindings(db: () => duckdb.DuckDBBindings, baseURL: string): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(() => {\n        conn = db().connect();\n    });\n\n    afterEach(() => {\n        conn.close();\n        db().flushFiles();\n        db().dropFiles();\n    });\n\n    describe('DuckDBBindings', () => {\n        describe('error handling', () => {\n            it('INVALID SQL', async () => {\n                let error: Error | null = null;\n                try {\n                    conn.send('INVALID');\n                } catch (e: any) {\n                    error = e;\n                }\n                expect(error).not.toBe(null);\n            });\n        });\n\n        describe('Open', () => {\n            // XXX apparently synchronous XHR on the main thread does not allow for arraybuffer response type?\n            // it('Remote TPCH 0_01', async () => {\n            //     await db().registerFileURL('tpch_0_01.db', `${baseURL}/tpch/0_01/duckdb/db`);\n            //     db().open('tpch_0_01.db');\n            // });\n        });\n\n        describe('Reset', () => {\n            it('table must disappear', async () => {\n                await db().reset();\n                conn = db().connect();\n                conn.query('CREATE TABLE foo (a int)');\n                let table = conn.query<{ name: arrow.Utf8 }>('PRAGMA show_tables;');\n                let rows = table.toArray();\n                expect(rows.length).toEqual(1);\n                expect(rows[0].name).toEqual('foo');\n                await db().reset();\n                conn = db().connect();\n                table = conn.query<{ name: arrow.Utf8 }>('PRAGMA show_tables;');\n                rows = table.toArray();\n                expect(rows.length).toEqual(0);\n            });\n        });\n\n        describe('Prepared Statement', () => {\n            it('Materialized', async () => {\n                const stmt = conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\n                const result = stmt.query(234);\n                expect(result.length).toBe(10001);\n                stmt.close();\n            });\n\n            it('Streaming', async () => {\n                const stmt = conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\n                const stream = stmt.send(234);\n                let size = 0;\n                for (const batch of stream) {\n                    size += batch.length;\n                }\n                expect(size).toBe(10001);\n                conn.close();\n            });\n            it('Typecheck', async () => {\n                conn.query(`CREATE TABLE typecheck (\n                    a BOOLEAN DEFAULT NULL,\n                    b TINYINT DEFAULT NULL,\n                    c SMALLINT DEFAULT NULL,\n                    d INTEGER DEFAULT NULL,\n                    e BIGINT DEFAULT NULL,\n                    f FLOAT DEFAULT NULL,\n                    g DOUBLE DEFAULT NULL,\n                    h CHAR(11) DEFAULT NULL,\n                    i VARCHAR(11) DEFAULT NULL\n                )`);\n\n                const stmt = conn.prepare('INSERT INTO typecheck VALUES(?,?,?,?,?,?,?,?,?)');\n                expect(() =>\n                    stmt.query(true, 100, 10_000, 1_000_000, 5_000_000_000, 0.5, Math.PI, 'hello world', 'hi'),\n                ).not.toThrow();\n                expect(() =>\n                    stmt.query(\n                        'test', // varchar for bool\n                        100,\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                expect(() =>\n                    stmt.query(\n                        true,\n                        10_000, // smallint for tinyint\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                expect(() =>\n                    stmt.query(\n                        true,\n                        100,\n                        1_000_000, // int for smallint\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                expect(() =>\n                    stmt.query(\n                        true,\n                        100,\n                        10_000,\n                        5_000_000_000, // bigint for int\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    ),\n                ).toThrow();\n                conn.close();\n            });\n        });\n    });\n}\n\nexport function testAsyncBindings(adb: () => duckdb.AsyncDuckDB, baseURL: string): void {\n    beforeEach(async () => {});\n\n    afterEach(async () => {\n        await adb().flushFiles();\n        await adb().dropFiles();\n        await adb().open({\n            path: ':memory:',\n        });\n    });\n\n    describe('Bindings', () => {\n        describe('Open', () => {\n            it('Remote TPCH 0_01', async () => {\n                await adb().registerFileURL('tpch_0_01.db', `${baseURL}/tpch/0_01/duckdb/db`);\n                await adb().open({\n                    path: 'tpch_0_01.db',\n                });\n                const conn = await adb().connect();\n                const table = await conn.query<{\n                    a: arrow.Int;\n                }>('select count(*)::INTEGER as a from lineitem');\n                const rows = table.toArray();\n                expect(rows.length).toEqual(1);\n                expect(rows[0].a).toEqual(60175);\n            });\n        });\n\n        describe('Patching', () => {\n            it('Count(*) Default', async () => {\n                await adb().open({\n                    path: ':memory:',\n                    emitBigInt: true,\n                });\n                const conn = await adb().connect();\n                const table = await conn.query('select 1::BIGINT');\n                expect(table.schema.fields.length).toEqual(1);\n                expect(table.schema.fields[0].typeId).toEqual(arrow.Type.Int);\n            });\n\n            it('Count(*) No BigInt', async () => {\n                await adb().open({\n                    path: ':memory:',\n                    emitBigInt: false,\n                });\n                const conn = await adb().connect();\n                const table = await conn.query('select 1::BIGINT');\n                expect(table.schema.fields.length).toEqual(1);\n                expect(table.schema.fields[0].typeId).toEqual(arrow.Type.Float);\n            });\n        });\n\n        describe('Prepared Statement', () => {\n            it('Materialized', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare('SELECT v + ? FROM generate_series(0, 10000) as t(v);');\n                const result = await stmt.query(234);\n                expect(result.length).toBe(10001);\n                await stmt.close();\n            });\n\n            it('Streaming', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\n                const stream = await stmt.send(234);\n                let size = 0;\n                for await (const batch of stream) {\n                    size += batch.length;\n                }\n                expect(size).toBe(10001);\n                await conn.close();\n            });\n            it('Typecheck', async () => {\n                const conn = await adb().connect();\n                await conn.query(`CREATE TABLE typecheck (\n                    a BOOLEAN DEFAULT NULL,\n                    b TINYINT DEFAULT NULL,\n                    c SMALLINT DEFAULT NULL,\n                    d INTEGER DEFAULT NULL,\n                    e BIGINT DEFAULT NULL,\n                    f FLOAT DEFAULT NULL,\n                    g DOUBLE DEFAULT NULL,\n                    h CHAR(11) DEFAULT NULL,\n                    i VARCHAR(11) DEFAULT NULL\n                )`);\n\n                const stmt = await conn.prepare('INSERT INTO typecheck VALUES(?,?,?,?,?,?,?,?,?)');\n\n                const expectToThrow = async (fn: () => Promise<void>) => {\n                    let throwed = false;\n                    try {\n                        await fn();\n                    } catch (e) {\n                        throwed = true;\n                    }\n                    expect(throwed).toBe(true);\n                };\n                expectToThrow(async () => {\n                    await stmt.query(\n                        'test', // varchar for bool\n                        100,\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                expectToThrow(async () => {\n                    await stmt.query(\n                        true,\n                        10_000, // smallint for tinyint\n                        10_000,\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                expectToThrow(async () => {\n                    await stmt.query(\n                        true,\n                        100,\n                        1_000_000, // int for smallint\n                        1_000_000,\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                expectToThrow(async () => {\n                    await stmt.query(\n                        true,\n                        100,\n                        10_000,\n                        5_000_000_000, // bigint for int\n                        5_000_000_000,\n                        0.5,\n                        Math.PI,\n                        'hello world',\n                        'hi',\n                    );\n                });\n                await conn.close();\n            });\n        });\n    });\n}\n", "import * as duckdb from '../src/';\nimport * as arrow from 'apache-arrow';\n\nconst testRows = 10000;\n\nexport function testBatchStream(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(() => {\n        conn = db().connect();\n    });\n\n    afterEach(() => {\n        conn.close();\n        db().flushFiles();\n        db().dropFiles();\n    });\n\n    describe('Arrow Record-Batches Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Record-Batches Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', () => {\n                const result = conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', () => {\n                const result = conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n}\n", "import * as duckdb from '../src/';\nimport * as arrow from 'apache-arrow';\n\nconst decoder = new TextDecoder();\n\nexport function testFilesystem(\n    db: () => duckdb.AsyncDuckDB,\n    resolveData: (url: string) => Promise<Uint8Array | null>,\n    baseDir: string,\n): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        conn = await db().connect();\n    });\n\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n\n    describe('File buffer registration', () => {\n        const test = async () => {\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        };\n        it('File buffer used once', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n        });\n        it('File buffer registered twice', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n        });\n        it('File buffer used twice', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await test();\n            await test();\n        });\n    });\n\n    describe('Parquet Scans', () => {\n        it('single table from buffer', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        });\n\n        it('simple join', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            const hoeren = await resolveData('/uni/hoeren.parquet');\n            const vorlesungen = await resolveData('/uni/vorlesungen.parquet');\n            expect(students).not.toBeNull();\n            expect(hoeren).not.toBeNull();\n            expect(vorlesungen).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerFileBuffer('hoeren.parquet', hoeren!);\n            await db().registerFileBuffer('vorlesungen.parquet', vorlesungen!);\n\n            const result = await conn.send(`\n                    SELECT students.matrnr, vorlesungen.titel\n                    FROM parquet_scan('studenten.parquet') students\n                    INNER JOIN parquet_scan('hoeren.parquet') hoeren ON (students.matrnr = hoeren.matrnr)\n                    INNER JOIN parquet_scan('vorlesungen.parquet') vorlesungen ON (vorlesungen.vorlnr = hoeren.vorlnr);\n                `);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int; titel: arrow.Utf8 }>(result);\n            expect(table.numCols).toBe(2);\n            const flat = [];\n            for (const row of table) {\n                flat.push({\n                    matrnr: row.matrnr,\n                    titel: row.titel?.toString(),\n                });\n            }\n            expect(flat).toEqual([\n                { matrnr: 26120, titel: 'Grundz\u00FCge' },\n                { matrnr: 27550, titel: 'Grundz\u00FCge' },\n                { matrnr: 27550, titel: 'Logik' },\n                { matrnr: 28106, titel: 'Ethik' },\n                { matrnr: 28106, titel: 'Wissenschaftstheorie' },\n                { matrnr: 28106, titel: 'Bioethik' },\n                { matrnr: 28106, titel: 'Der Wiener Kreis' },\n                { matrnr: 29120, titel: 'Grundz\u00FCge' },\n                { matrnr: 29120, titel: 'Ethik' },\n                { matrnr: 29120, titel: 'M\u00E4eutik' },\n                { matrnr: 29555, titel: 'Glaube und Wissen' },\n                { matrnr: 25403, titel: 'Glaube und Wissen' },\n            ]);\n        });\n    });\n\n    describe('Writing', () => {\n        it('Copy To CSV Buffer', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerEmptyFileBuffer('students.csv');\n            await conn.query(`CREATE TABLE students AS SELECT * FROM parquet_scan('studenten.parquet');`);\n            await conn.query(`COPY students TO 'students.csv' WITH (HEADER 1, DELIMITER ';', FORMAT CSV);`);\n            await conn.query(`DROP TABLE IF EXISTS students`);\n            const outBuffer = await db().copyFileToBuffer('students.csv');\n            expect(outBuffer).not.toBeNull();\n            const text = decoder.decode(outBuffer!);\n            expect(text).toBe(`matrnr;name;semester\n24002;Xenokrates;18\n25403;Jonas;12\n26120;Fichte;10\n26830;Aristoxenos;8\n27550;Schopenhauer;6\n28106;Carnap;3\n29120;Theophrastos;2\n29555;Feuerbach;2\n`);\n        });\n\n        it('Copy To Parquet', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerEmptyFileBuffer('students2.parquet');\n            await conn.query(`CREATE TABLE students2 AS SELECT * FROM parquet_scan('studenten.parquet');`);\n            await conn.query(`COPY students2 TO 'students2.parquet' (FORMAT PARQUET);`);\n            const url = await db().copyFileToBuffer('students2.parquet');\n            expect(url).not.toBeNull();\n        });\n\n        it('Copy To Parquet And Load Again', async () => {\n            const students = await resolveData('/uni/studenten.parquet');\n            expect(students).not.toBeNull();\n            await db().registerFileBuffer('studenten.parquet', students!);\n            await db().registerEmptyFileBuffer('students3.parquet');\n            await conn.query(`CREATE TABLE students3 AS SELECT * FROM parquet_scan('studenten.parquet');`);\n            await conn.query(`COPY students3 TO 'students3.parquet' (FORMAT PARQUET);`);\n            const url = await db().copyFileToBuffer('students3.parquet');\n            expect(url).not.toBeNull();\n            await conn.query(`CREATE TABLE students4 AS SELECT * FROM parquet_scan('students3.parquet');`);\n            const result = await conn.send(`SELECT matrnr FROM students4;`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        });\n    });\n\n    describe('File access', () => {\n        it('Small Parquet file', async () => {\n            await db().registerFileURL('studenten.parquet', `${baseDir}/uni/studenten.parquet`);\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\n            const table = await arrow.Table.from<{ matrnr: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.toArray()).toEqual(\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\n            );\n        });\n\n        it('Large Parquet file', async () => {\n            await db().registerFileURL('lineitem.parquet', `${baseDir}/tpch/0_01/parquet/lineitem.parquet`);\n            const result = await conn.send(`SELECT count(*)::INTEGER as cnt FROM parquet_scan('lineitem.parquet');`);\n            const table = await arrow.Table.from<{ cnt: arrow.Int }>(result);\n            expect(table.getColumnAt(0)?.get(0)).toBeGreaterThan(60_000);\n        });\n    });\n\n    describe('Export', () => {\n        it('Generate Series as CSV', async () => {\n            await conn.query('CREATE TABLE foo AS SELECT * FROM generate_series(1, 5) t(v)');\n            await conn.query(`EXPORT DATABASE '/tmp/duckdbexportcsv'`);\n\n            const results = await db().globFiles('/tmp/duckdbexportcsv/*');\n            expect(results).not.toEqual([]);\n            expect(results.length).toEqual(3);\n            const filenames = results.map(file => file.fileName).sort();\n            expect(filenames).toEqual([\n                '/tmp/duckdbexportcsv/0_foo.csv',\n                '/tmp/duckdbexportcsv/load.sql',\n                '/tmp/duckdbexportcsv/schema.sql',\n            ]);\n\n            const csv_buffer_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/0_foo.csv');\n            const load_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/load.sql');\n            const schema_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/schema.sql');\n            expect(load_script_utf8.length).not.toEqual(0);\n            expect(schema_script_utf8.length).not.toEqual(0);\n            expect(csv_buffer_utf8.length).not.toEqual(0);\n\n            const load_script = decoder.decode(load_script_utf8);\n            const schema_script = decoder.decode(schema_script_utf8);\n            const csv_buffer = decoder.decode(csv_buffer_utf8);\n            expect(load_script.trim()).toEqual(\n                `COPY foo FROM '/tmp/duckdbexportcsv/0_foo.csv' (FORMAT 'csv', quote '\"', delimiter ',', header 0);`,\n            );\n            expect(schema_script.trim()).toEqual(`CREATE TABLE foo(v BIGINT);`);\n            expect(csv_buffer.trim()).toEqual(`1\\n2\\n3\\n4\\n5`);\n        });\n\n        it('Generate Series as Parquet', async () => {\n            await conn.query('CREATE TABLE foo AS SELECT * FROM generate_series(1, 5) t(v)');\n            await conn.query(`EXPORT DATABASE '/tmp/duckdbexportparquet' (FORMAT PARQUET)`);\n\n            const results = await db().globFiles('/tmp/duckdbexportparquet/*');\n            expect(results).not.toEqual([]);\n            expect(results.length).toEqual(3);\n            const filenames = results.map(file => file.fileName).sort();\n            expect(filenames).toEqual([\n                '/tmp/duckdbexportparquet/0_foo.parquet',\n                '/tmp/duckdbexportparquet/load.sql',\n                '/tmp/duckdbexportparquet/schema.sql',\n            ]);\n\n            const parquet_buffer_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/0_foo.parquet');\n            const load_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/load.sql');\n            const schema_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/schema.sql');\n            expect(load_script_utf8.length).not.toEqual(0);\n            expect(schema_script_utf8.length).not.toEqual(0);\n            expect(parquet_buffer_utf8.length).not.toEqual(0);\n\n            const content = await conn.query(\n                `SELECT v::integer FROM parquet_scan('/tmp/duckdbexportparquet/0_foo.parquet')`,\n            );\n            expect(content.length).toEqual(5);\n            expect(content.getColumnAt(0)?.toArray()).toEqual(new Int32Array([1, 2, 3, 4, 5]));\n        });\n    });\n}\n", "import * as duckdb from '../src/';\nimport * as arrow from 'apache-arrow';\n\nconst testRows = 10000;\n\nexport function testAsyncBatchStream(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        conn = await db().connect();\n    });\n\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n\n    describe('AsyncDuckDB', () => {\n        it('ping', async () => {\n            await db().ping();\n        });\n    });\n\n    describe('Arrow Record-Batches Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const row of batch) {\n                        expect(row!.v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = await conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n\n        describe('scripts', () => {\n            it('test1', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS x, (sin(v) * 100 + 100)::INTEGER AS y FROM generate_series(0, ${testRows}) as t(v)\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(2);\n                    for (const row of batch) {\n                        expect(row!.x).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Record-Batches Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 127);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++ & 32767);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = await conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v.valueOf()).toBe(i++);\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                let i = 0;\n                for await (const batch of result) {\n                    expect(batch.numCols).toBe(1);\n                    for (const v of batch.getChildAt(0)!) {\n                        expect(v).toBe(String(i++));\n                    }\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Row-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const row of table) {\n                    expect(row.v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n\n    describe('Arrow Table Column-Major', () => {\n        describe('single column', () => {\n            it('TINYINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 127);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('SMALLINT', async () => {\n                const result = await conn.send(`\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++ & 32767);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('INTEGER', async () => {\n                const result = await conn.send(`\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('BIGINT', async () => {\n                const result = await conn.send(`\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(i++);\n                }\n                expect(i).toBe(testRows + 1);\n            });\n\n            it('STRING', async () => {\n                const result = await conn.send(`\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\n                `);\n                const table = await arrow.Table.from(result);\n                let i = 0;\n                for (const v of table.getColumnAt(0)!) {\n                    expect(v.valueOf()).toBe(String(i++));\n                }\n                expect(i).toBe(testRows + 1);\n            });\n        });\n    });\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\nimport { Column, compareTable } from './table_test';\n\n/// Unfortunately, arrow.Table.from does not build a proper Schema.\n/// When it does, we might want to switch back to arrow.Table here instead\n/// of arrow Schema + ArrowBatch.\ninterface ArrowInsertTest {\n    name: string;\n    schema: arrow.Schema;\n    batches: ArrowBatch[];\n    options: duckdb.ArrowInsertOptions;\n    query: string;\n    expectedColumns: Column[];\n}\n\ninterface ArrowBatch {\n    numRows: number;\n    columns: arrow.Vector[];\n}\n\nexport function generateXInt32(n: number, cols: number): number[][] {\n    const columns = [];\n    for (let j = 0; j < cols; ++j) {\n        const column = [];\n        for (let i = 0; i < n; ++i) {\n            column.push(i);\n        }\n        columns.push(column);\n    }\n    return columns;\n}\n\nexport function generateArrowXInt32(n: number, cols: number): [arrow.Schema, arrow.RecordBatch[]] {\n    const columns = generateXInt32(n, cols);\n    const fields = [];\n    for (let j = 0; j < cols; ++j) {\n        fields.push(new arrow.Field(`v${j}`, new arrow.Int32()));\n    }\n    const schema = new arrow.Schema(fields);\n    const batches = [];\n    for (let i = 0; i < n; ) {\n        const rows = Math.min(1000, n - i);\n        batches.push(\n            new arrow.RecordBatch(\n                schema,\n                rows,\n                columns.map(c => arrow.Int32Vector.from(c.slice(i, i + n))),\n            ),\n        );\n        i += rows;\n    }\n    return [schema, batches];\n}\n\nconst ARROW_INSERT_TESTS: ArrowInsertTest[] = [\n    {\n        name: 'integers_1',\n        schema: arrow.Schema.new({\n            a: new arrow.Int32(),\n            b: new arrow.Int32(),\n            c: new arrow.Int32(),\n        }),\n        batches: [\n            {\n                numRows: 3,\n                columns: [\n                    arrow.Int32Vector.from([1, 4, 7]),\n                    arrow.Int32Vector.from([2, 5, 8]),\n                    arrow.Int32Vector.from([3, 6, 9]),\n                ],\n            },\n        ],\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'combined_1',\n        schema: arrow.Schema.new({\n            a: new arrow.Int32(),\n            b: new arrow.Int16(),\n            c: new arrow.Utf8(),\n        }),\n        batches: [\n            {\n                numRows: 3,\n                columns: [\n                    arrow.Int32Vector.from([1, 4, 7]),\n                    arrow.Int16Vector.from([2, 5, 8]),\n                    arrow.Utf8Vector.from(['3', '6', '9']),\n                ],\n            },\n        ],\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: ['3', '6', '9'] },\n        ],\n    },\n    {\n        name: 'combined_2',\n        schema: arrow.Schema.new({\n            a: new arrow.Int32(),\n            b: new arrow.Int16(),\n            c: new arrow.Utf8(),\n        }),\n        batches: [\n            {\n                numRows: 3,\n                columns: [\n                    arrow.Int32Vector.from([1, 4, 7]),\n                    arrow.Int16Vector.from([2, 5, 8]),\n                    arrow.Utf8Vector.from(['3', '6', '9']),\n                ],\n            },\n            {\n                numRows: 2,\n                columns: [\n                    arrow.Int32Vector.from([10, 13]),\n                    arrow.Int16Vector.from([11, 14]),\n                    arrow.Utf8Vector.from(['12', '15']),\n                ],\n            },\n        ],\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7, 10, 13] },\n            { name: 'b', values: [2, 5, 8, 11, 14] },\n            { name: 'c', values: ['3', '6', '9', '12', '15'] },\n        ],\n    },\n];\n\nexport function testArrowInsert(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(async () => {\n        db().flushFiles();\n        conn = db().connect();\n    });\n    afterEach(async () => {\n        conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('Arrow insert from iterable', () => {\n        for (const test of ARROW_INSERT_TESTS) {\n            it(test.name, () => {\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                conn.insertArrowBatches(\n                    test.schema,\n                    test.batches.map(b => new arrow.RecordBatch(test.schema, b.numRows, b.columns)),\n                    test.options,\n                );\n                const results = conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n    describe('Arrow insert from vectors', () => {\n        it('simple integers', () => {\n            conn.query(`DROP TABLE IF EXISTS insert_from_vectors`);\n            conn.insertArrowVectors(\n                {\n                    a: arrow.Int32Vector.from([1, 4, 7]),\n                    b: arrow.Int32Vector.from([2, 5, 8]),\n                    c: arrow.Utf8Vector.from(['3', '6', '9']),\n                },\n                {\n                    name: 'insert_from_vectors',\n                },\n            );\n            const results = conn.query('select * from insert_from_vectors');\n            compareTable(results, [\n                { name: 'a', values: [1, 4, 7] },\n                { name: 'b', values: [2, 5, 8] },\n                { name: 'c', values: ['3', '6', '9'] },\n            ]);\n            conn.query(`DROP TABLE IF EXISTS insert_from_vectors`);\n        });\n    });\n    describe('Arrow benchmark inserts', () => {\n        it('generated integer batches', () => {\n            conn.query(`DROP TABLE IF EXISTS insert_generated_batches`);\n            const [schema, batches] = generateArrowXInt32(10000, 2);\n            conn.insertArrowBatches(schema, batches, {\n                schema: 'main',\n                name: 'insert_generated_batches',\n            });\n            conn.query(`DROP TABLE IF EXISTS insert_generated_batches`);\n        });\n    });\n}\n\nexport function testArrowInsertAsync(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('Arrow insert from iterable', () => {\n        for (const test of ARROW_INSERT_TESTS) {\n            it(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                await conn.insertArrowBatches(\n                    test.schema,\n                    test.batches.map(b => new arrow.RecordBatch(test.schema, b.numRows, b.columns)),\n                    test.options,\n                );\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n    describe('Arrow insert from vectors', () => {\n        it('simple integers', async () => {\n            await conn.query(`DROP TABLE IF EXISTS insert_from_vectors`);\n            await conn.insertArrowVectors(\n                {\n                    a: arrow.Int32Vector.from([1, 4, 7]),\n                    b: arrow.Int32Vector.from([2, 5, 8]),\n                    c: arrow.Utf8Vector.from(['3', '6', '9']),\n                },\n                {\n                    name: 'insert_from_vectors',\n                },\n            );\n            const results = await conn.query('select * from insert_from_vectors');\n            compareTable(results, [\n                { name: 'a', values: [1, 4, 7] },\n                { name: 'b', values: [2, 5, 8] },\n                { name: 'c', values: ['3', '6', '9'] },\n            ]);\n        });\n    });\n}\n", "import * as arrow from 'apache-arrow';\n\nexport interface Column {\n    name: string;\n    values: any[];\n}\n\nexport function compareTable(table: arrow.Table, expected: Column[]): void {\n    // Check column count\n    const colCount = expected.length;\n    expect(table.numCols).toEqual(colCount);\n    if (colCount == 0) return;\n\n    // Check columns\n    const rowCount = expected[0].values.length;\n    for (let i = 0; i < colCount; ++i) {\n        expect(expected[i].values.length).toEqual(rowCount);\n        expect(table.getColumnAt(i)?.length).toEqual(rowCount);\n        expect(table.getColumnAt(i)?.name).toEqual(expected[i].name);\n    }\n\n    // Compare the actual values\n    for (let i = 0; i < colCount; ++i) {\n        const col = table.getColumnAt(i)!;\n        const have = [];\n        for (let j = 0; j < rowCount; ++j) {\n            have.push(col.get(j));\n        }\n        expect(have).toEqual(expected[i].values);\n    }\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\nimport { Column, compareTable } from './table_test';\n\nfunction itBrowser(expectation: string, assertion?: jasmine.ImplementationCallback, timeout?: number): void {\n    if (typeof window !== 'undefined') {\n        it(expectation, assertion, timeout);\n    }\n}\n\nconst encoder = new TextEncoder();\n\ninterface JSONInsertTest {\n    name: string;\n    input: string;\n    options: duckdb.JSONInsertOptions;\n    query: string;\n    expectedColumns: Column[];\n}\n\nconst JSON_INSERT_TESTS: JSONInsertTest[] = [\n    {\n        name: 'rows_integers',\n        input: `[\n            {\"a\":1, \"b\":2, \"c\":3},\n            {\"a\":4, \"b\":5, \"c\":6},\n            {\"a\":7, \"b\":8, \"c\":9},\n        ]`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'cols_integers',\n        input: `{\n            \"a\": [1, 4, 7],\n            \"b\": [2, 5, 8],\n            \"c\": [3, 6, 9]\n        }`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'options_1',\n        input: `[\n            {\"a\":1, \"b\":2, \"c\":3},\n            {\"a\":4, \"b\":5, \"c\":6},\n            {\"a\":7, \"b\":8, \"c\":9},\n        ]`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n            shape: duckdb.JSONTableShape.ROW_ARRAY,\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.Utf8(),\n            },\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: ['3', '6', '9'] },\n        ],\n    },\n];\n\nconst TEST_FILE = 'TEST';\n\nexport function testJSONInsert(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(async () => {\n        db().flushFiles();\n        conn = db().connect();\n    });\n    afterEach(async () => {\n        conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('JSON Insert Sync', () => {\n        for (const test of JSON_INSERT_TESTS) {\n            it(test.name, () => {\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                db().registerFileBuffer(TEST_FILE, buffer);\n                conn.insertJSONFromPath(TEST_FILE, test.options);\n                const results = conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n\nexport function testJSONInsertAsync(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('JSON Insert Buffer Async', () => {\n        for (const test of JSON_INSERT_TESTS) {\n            it(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                await db().registerFileBuffer(TEST_FILE, buffer);\n                await conn.insertJSONFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n\n    describe('JSON Insert Blob Async', () => {\n        for (const test of JSON_INSERT_TESTS) {\n            itBrowser(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                const blob = new Blob([buffer]);\n                await db().registerFileHandle(TEST_FILE, blob);\n                await conn.insertJSONFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n", "import * as arrow from 'apache-arrow';\nimport * as duckdb from '../src/';\nimport { Column, compareTable } from './table_test';\n\nfunction itBrowser(expectation: string, assertion?: jasmine.ImplementationCallback, timeout?: number): void {\n    if (typeof window !== 'undefined') {\n        it(expectation, assertion, timeout);\n    }\n}\n\nconst encoder = new TextEncoder();\n\ninterface CSVInsertTest {\n    name: string;\n    input: string;\n    options: duckdb.CSVInsertOptions;\n    query: string;\n    expectedColumns: Column[];\n}\n\nconst CSV_INSERT_TESTS: CSVInsertTest[] = [\n    {\n        name: 'integers_auto_1',\n        input: `\"a\",\"b\",\"c\"\n1,2,3\n4,5,6\n7,8,9\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'integers_auto_2',\n        input: `a,b,c\n1,2,3\n4,5,6\n7,8,9\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: [3, 6, 9] },\n        ],\n    },\n    {\n        name: 'integers_auto_3',\n        input: `a,b,c`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'column0', values: ['a'] },\n            { name: 'column1', values: ['b'] },\n            { name: 'column2', values: ['c'] },\n        ],\n    },\n    {\n        name: 'integers_auto_2',\n        input: `a\n1\n4\n7\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [{ name: 'a', values: [1, 4, 7] }],\n    },\n    {\n        name: 'options_1',\n        input: `1,2,3\n4,5,6\n7,8,9\n`,\n        options: {\n            schema: 'main',\n            name: 'foo2',\n            header: false,\n            detect: false,\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.Utf8(),\n            },\n        },\n        query: 'SELECT * FROM main.foo2',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            { name: 'c', values: ['3', '6', '9'] },\n        ],\n    },\n    {\n        name: 'options_2',\n        input: `1|2|01/02/2020\n4|5|01/03/2020\n7|8|01/04/2020\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n            detect: false,\n            header: false,\n            delimiter: '|',\n            dateFormat: '%m/%d/%Y',\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.DateDay(),\n            },\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            {\n                name: 'c',\n                values: [\n                    new Date(Date.UTC(2020, 0, 2)),\n                    new Date(Date.UTC(2020, 0, 3)),\n                    new Date(Date.UTC(2020, 0, 4)),\n                ],\n            },\n        ],\n    },\n    {\n        name: 'options_3',\n        input: `1|2|20:32:45 1992-03-02\n4|5|20:32:50 1992-03-02\n7|8|20:32:55 1992-03-02\n`,\n        options: {\n            schema: 'main',\n            name: 'foo',\n            detect: false,\n            header: false,\n            delimiter: '|',\n            quote: \"'\",\n            timestampFormat: '%H:%M:%S %Y-%m-%d',\n            columns: {\n                a: new arrow.Int16(),\n                b: new arrow.Int32(),\n                c: new arrow.TimestampSecond(),\n            },\n        },\n        query: 'SELECT * FROM main.foo',\n        expectedColumns: [\n            { name: 'a', values: [1, 4, 7] },\n            { name: 'b', values: [2, 5, 8] },\n            {\n                name: 'c',\n                values: [\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 45)).getTime(),\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 50)).getTime(),\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 55)).getTime(),\n                ],\n            },\n        ],\n    },\n];\n\nconst TEST_FILE = 'TEST';\n\nexport function testCSVInsert(db: () => duckdb.DuckDBBindings): void {\n    let conn: duckdb.DuckDBConnection;\n\n    beforeEach(async () => {\n        db().flushFiles();\n        conn = db().connect();\n    });\n    afterEach(async () => {\n        conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('CSV Insert Sync', () => {\n        for (const test of CSV_INSERT_TESTS) {\n            it(test.name, () => {\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                db().registerFileBuffer(TEST_FILE, buffer);\n                conn.insertCSVFromPath(TEST_FILE, test.options);\n                const results = conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n\nexport function testCSVInsertAsync(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('CSV Insert Buffer Async', () => {\n        for (const test of CSV_INSERT_TESTS) {\n            it(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                await db().registerFileBuffer(TEST_FILE, buffer);\n                await conn.insertCSVFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n\n    describe('CSV Insert Blob Async', () => {\n        for (const test of CSV_INSERT_TESTS) {\n            itBrowser(test.name, async () => {\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\n                const buffer = encoder.encode(test.input);\n                const blob = new Blob([buffer]);\n                await db().registerFileHandle(TEST_FILE, blob);\n                await conn.insertCSVFromPath(TEST_FILE, test.options);\n                const results = await conn.query(test.query);\n                compareTable(results, test.expectedColumns);\n            });\n        }\n    });\n}\n", "import * as duckdb from '../src/';\n\nexport function testTokenization(db: () => duckdb.DuckDBBindings): void {\n    describe('Tokenizer', () => {\n        it('SELECT 1', async () => {\n            expect(db().tokenize('SELECT 1')).toEqual({\n                offsets: [0, 7],\n                types: [4, 1],\n            });\n        });\n        it('SELECT * FROM region', async () => {\n            expect(db().tokenize('SELECT * FROM region')).toEqual({\n                offsets: [0, 7, 9, 14],\n                types: [4, 3, 4, 0],\n            });\n        });\n    });\n}\n\nexport function testTokenizationAsync(db: () => duckdb.AsyncDuckDB): void {\n    describe('Tokenizer', () => {\n        it('SELECT 1', async () => {\n            expect(await db().tokenize('SELECT 1')).toEqual({\n                offsets: [0, 7],\n                types: [4, 1],\n            });\n        });\n        it('SELECT * FROM region', async () => {\n            expect(await db().tokenize('SELECT * FROM region')).toEqual({\n                offsets: [0, 7, 9, 14],\n                types: [4, 3, 4, 0],\n            });\n        });\n    });\n}\n", "import * as duckdb from '../../src';\nimport * as arrow from 'apache-arrow';\n\n// https://github.com/duckdb/duckdb-wasm/issues/332\nexport function testGitHubIssue332(db: () => duckdb.AsyncDuckDB): void {\n    let conn: duckdb.AsyncDuckDBConnection;\n    beforeEach(async () => {\n        await db().flushFiles();\n        conn = await db().connect();\n    });\n    afterEach(async () => {\n        await conn.close();\n        await db().flushFiles();\n        await db().dropFiles();\n    });\n    describe('GitHub issues', () => {\n        it('332', async () => {\n            await db().registerFileText(\n                'Products.csv',\n                `ProductGroup,Product,Year,Quarter,Revenue,Units,Count,Product Key,Reseller,Product Info,QuarterAsNumber\nElectronics,Phone,2018,Q1,103,7,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2018,Q1,102,4,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2019,Q1,98,12,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2018,Q1,104,3,1,2018-Q1,Samsung,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2019,Q1,83,7,1,2019-Q1,Google,Format=XML; <Properties>\u2026,1\nMedia,Theater,2018,Q1,17,4,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Theater,2019,Q1,20,7,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Movies,2018,Q1,25,12,1,2018-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nMedia,Movies,2019,Q1,26,13,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2018,Q2,105,5,1,2018-Q2,Samsung,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2019,Q2,82,15,1,2019-Q2,LG,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2018,Q2,99,4,1,2018-Q2,LG,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2019,Q2,84,20,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Theater,2018,Q2,17,4,1,2018-Q2,Microsoft,Format=XML; <Properties>\u2026,2\nMedia,Theater,2019,Q2,22,5,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Movies,2018,Q2,25,12,1,2018-Q2,Samsung,Format=XML; <Properties>\u2026,2\nMedia,Movies,2019,Q2,26,14,1,2019-Q2,Google,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2000,Q1,103,7,1,2000-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2001,Q1,102,4,1,2001-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2002,Q1,98,12,1,2002-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2003,Q1,104,3,1,2003-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Computer,2004,Q1,83,7,1,2004-Q1,Samsung,Format=XML; <Properties>\u2026,1\nMedia,Theater,2005,Q1,17,4,1,2005-Q1,Google,Format=XML; <Properties>\u2026,1\nMedia,Theater,2006,Q1,20,7,1,2006-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Movies,2007,Q1,25,12,1,2007-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Movies,2008,Q1,26,13,1,2008-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2009,Q2,105,5,1,2009-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2010,Q2,82,15,1,2010-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2011,Q2,99,4,1,2011-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2012,Q2,84,20,1,2012-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Theater,2013,Q2,17,4,1,2013-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Theater,2014,Q2,22,5,1,2014-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Movies,2015,Q2,25,12,1,2015-Q2,Sony,Format=XML; <Properties>\u2026,2\nMedia,Movies,2016,Q2,26,14,1,2016-Q2,Samsung,Format=XML; <Properties>\u2026,2\nMedia,Movies,2017,Q1,26,13,1,2017-Q1,Google,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2018,Q2,105,5,1,2018-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2019,Q2,82,15,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\nElectronics,Computer,2020,Q2,99,4,1,2020-Q2,Microsoft,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2020,Q1,103,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\nElectronics,Phone,2020,Q2,102,4,1,2020-Q2,Samsung,Format=XML; <Properties>\u2026,2\nElectronics,Phone,2020,Q3,98,12,1,2020-Q3,LG,Format=XML; <Properties>\u2026,3\nElectronics,Computer,2020,Q4,104,3,1,2020-Q4,LG,Format=XML; <Properties>\u2026,4\nElectronics,Computer,2020,Q1,83,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\nMedia,Theater,2020,Q1,17,4,1,2020-Q1,Microsoft,Format=XML; <Properties>\u2026,1\nMedia,Theater,2020,Q1,20,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\n`,\n            );\n            await conn.query(\"CREATE TABLE products AS SELECT * FROM 'Products.csv'\");\n            const all = await conn.query('SELECT * FROM products');\n            expect(all.schema.fields.length).toBe(11);\n            expect(all.schema.fields[0].name).toBe('ProductGroup');\n            const insensitive = await conn.query<{\n                ProductGroup: arrow.Utf8;\n            }>('SELECT productgroup FROM products GROUP BY productgroup');\n            expect(insensitive.schema.fields.length).toBe(1);\n            expect(insensitive.schema.fields[0].name).toBe('ProductGroup');\n            expect(insensitive.toArray().length).toEqual(2);\n            await conn.query('DROP TABLE products');\n        });\n    });\n}\n", "import * as duckdb from '../../src';\nimport * as arrow from 'apache-arrow';\n\n// https://github.com/duckdb/duckdb-wasm/issues/334\nexport function testGitHubIssue334(adb: () => duckdb.AsyncDuckDB): void {\n    describe('GitHub issues', () => {\n        describe('334', () => {\n            it('CSV insert', async () => {\n                await adb().registerFileText(`data.csv`, '1|foo\\n2|bar\\n');\n                const conn = await adb().connect();\n                await conn.insertCSVFromPath('data.csv', {\n                    schema: 'main',\n                    name: 'foo',\n                    detect: false,\n                    header: false,\n                    delimiter: '|',\n                    columns: {\n                        col1: new arrow.Int32(),\n                        col2: new arrow.Utf8(),\n                    },\n                });\n                await conn.query('DROP TABLE IF EXISTS foo');\n                await conn.close();\n                await adb().dropFile('data.csv');\n            });\n            it('JSON row insert', async () => {\n                await adb().registerFileText(\n                    'rows.json',\n                    `[\n                    { \"col1\": 1, \"col2\": \"foo\" },\n                    { \"col1\": 2, \"col2\": \"bar\" },\n                ]`,\n                );\n                const conn = await adb().connect();\n                await conn.insertJSONFromPath('rows.json', { name: 'rows' });\n                await conn.query('DROP TABLE IF EXISTS rows');\n                await conn.close();\n                await adb().dropFile('rows.json');\n            });\n            it('JSON column insert', async () => {\n                await adb().registerFileText(\n                    'columns.json',\n                    `{\n                    \"col1\": [1, 2],\n                    \"col2\": [\"foo\", \"bar\"]\n                }`,\n                );\n                const conn = await adb().connect();\n                await conn.insertJSONFromPath('columns.json', { name: 'columns' });\n                await conn.query('DROP TABLE IF EXISTS columns');\n                await conn.close();\n                await adb().dropFile('columns.json');\n            });\n            it('Query result materialized', async () => {\n                const conn = await adb().connect();\n                await conn.query<{ v: arrow.Int }>(`\n                SELECT * FROM generate_series(1, 100) t(v)\n            `);\n                await conn.close();\n            });\n            it('Query result streamed', async () => {\n                const conn = await adb().connect();\n                for await (const batch of await conn.send<{ v: arrow.Int }>(`\n                SELECT * FROM generate_series(1, 100) t(v)\n            `)) {\n                    expect(batch.length).toBeGreaterThan(0);\n                }\n                await conn.close();\n            });\n            it('Prepared statement materialized', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare(`SELECT v + ? FROM generate_series(0, 10000) as t(v);`);\n                await stmt.query(234);\n                await stmt.close();\n                await conn.close();\n            });\n            it('Prepared statement streamed', async () => {\n                const conn = await adb().connect();\n                const stmt = await conn.prepare(`SELECT v + ? FROM generate_series(0, 10000) as t(v);`);\n                for await (const batch of await stmt.send(234)) {\n                    expect(batch.length).toBeGreaterThan(0);\n                }\n                await stmt.close();\n                await conn.close();\n            });\n        });\n    });\n}\n", "import * as duckdb from '../../src/';\nimport { testGitHubIssue332 } from './github_332.test';\nimport { testGitHubIssue334 } from './github_334.test';\n\nexport function testRegressionAsync(adb: () => duckdb.AsyncDuckDB): void {\n    testGitHubIssue332(adb);\n    testGitHubIssue334(adb);\n}\n"],
  "mappings": "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",
  "names": []
}
